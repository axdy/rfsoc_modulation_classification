-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/packet_generator/packet_generator_src_Packet_Generator.vhd
-- Created: 2023-01-11 17:03:48
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-05
-- Target subsystem base rate: 1e-05
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-05
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- dataOut                       ce_out        1e-05
-- validOut                      ce_out        1e-05
-- tlast                         ce_out        1e-05
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: packet_generator_src_Packet_Generator
-- Source Path: packet_generator/Packet Generator
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY packet_generator_src_Packet_Generator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        dataIn                            :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        validIn                           :   IN    std_logic;
        capture                           :   IN    std_logic;
        captureSize                       :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        ce_out                            :   OUT   std_logic;
        dataOut                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        validOut                          :   OUT   std_logic;
        tlast                             :   OUT   std_logic
        );
END packet_generator_src_Packet_Generator;


ARCHITECTURE rtl OF packet_generator_src_Packet_Generator IS

  -- Component Declarations
  COMPONENT packet_generator_src_packet_generator_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          validIn                         :   IN    std_logic;
          capture                         :   IN    std_logic;
          captureSize                     :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          validOut                        :   OUT   std_logic;
          addr                            :   OUT   std_logic_vector(14 DOWNTO 0);  -- ufix15
          wrEn                            :   OUT   std_logic;
          tlast                           :   OUT   std_logic;
          s                               :   OUT   std_logic_vector(2 DOWNTO 0)  -- ufix3
          );
  END COMPONENT;

  COMPONENT packet_generator_src_SinglePortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          din                             :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          addr                            :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          we                              :   IN    std_logic;
          dout                            :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : packet_generator_src_packet_generator_block
    USE ENTITY work.packet_generator_src_packet_generator_block(rtl);

  FOR ALL : packet_generator_src_SinglePortRAM_generic
    USE ENTITY work.packet_generator_src_SinglePortRAM_generic(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL validOut_1                       : std_logic;
  SIGNAL addr                             : std_logic_vector(14 DOWNTO 0);  -- ufix15
  SIGNAL wrEn                             : std_logic;
  SIGNAL tlast_1                          : std_logic;
  SIGNAL s                                : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL reduced_reg                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay_out1_1                     : std_logic;
  SIGNAL Constant_out1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL dataIn_unsigned                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL addr_unsigned                    : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL dataIn_1                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL addr_1                           : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL wrEn_1                           : std_logic;
  SIGNAL Single_Port_RAM_System_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Single_Port_RAM_System_out1_unsigned : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Single_Port_RAM_System_out1_1    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay1_out1_1                    : std_logic;

BEGIN
  u_packet_generator : packet_generator_src_packet_generator_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              validIn => validIn,
              capture => capture,
              captureSize => captureSize,  -- uint16
              validOut => validOut_1,
              addr => addr,  -- ufix15
              wrEn => wrEn,
              tlast => tlast_1,
              s => s  -- ufix3
              );

  u_Single_Port_RAM_System : packet_generator_src_SinglePortRAM_generic
    GENERIC MAP( AddrWidth => 15,
                 DataWidth => 32
                 )
    PORT MAP( clk => clk,
              enb => clk_enable,
              din => std_logic_vector(dataIn_1),
              addr => std_logic_vector(addr_1),
              we => wrEn_1,
              dout => Single_Port_RAM_System_out1
              );

  enb <= clk_enable;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= validOut_1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        reduced_reg(0) <= Delay_out1;
        reduced_reg(1) <= reduced_reg(0);
      END IF;
    END IF;
  END PROCESS reduced_process;

  Delay_out1_1 <= reduced_reg(1);

  Constant_out1 <= to_unsigned(0, 32);

  dataIn_unsigned <= unsigned(dataIn);

  addr_unsigned <= unsigned(addr);

  Single_Port_RAM_System_in0_buff_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataIn_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dataIn_1 <= dataIn_unsigned;
      END IF;
    END IF;
  END PROCESS Single_Port_RAM_System_in0_buff_in_pipe_process;


  Single_Port_RAM_System_in1_buff_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      addr_1 <= to_unsigned(16#0000#, 15);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        addr_1 <= addr_unsigned;
      END IF;
    END IF;
  END PROCESS Single_Port_RAM_System_in1_buff_in_pipe_process;


  Single_Port_RAM_System_in2_buff_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      wrEn_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        wrEn_1 <= wrEn;
      END IF;
    END IF;
  END PROCESS Single_Port_RAM_System_in2_buff_in_pipe_process;


  Single_Port_RAM_System_out1_unsigned <= unsigned(Single_Port_RAM_System_out1);

  Single_Port_RAM_System_outbuff_out_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Single_Port_RAM_System_out1_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Single_Port_RAM_System_out1_1 <= Single_Port_RAM_System_out1_unsigned;
      END IF;
    END IF;
  END PROCESS Single_Port_RAM_System_outbuff_out_pipe_process;


  
  Switch_out1 <= Constant_out1 WHEN Delay_out1_1 = '0' ELSE
      Single_Port_RAM_System_out1_1;

  dataOut <= std_logic_vector(Switch_out1);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= tlast_1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch2_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch2_reg(0) <= Delay1_out1;
        delayMatch2_reg(1) <= delayMatch2_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  Delay1_out1_1 <= delayMatch2_reg(1);

  ce_out <= clk_enable;

  validOut <= Delay_out1_1;

  tlast <= Delay1_out1_1;

END rtl;

