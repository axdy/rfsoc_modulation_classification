-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/fifo_packet/DMAController_src_DMA_Controller.vhd
-- Created: 2023-01-24 23:01:02
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-05
-- Target subsystem base rate: 1e-05
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-05
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- dataOut                       ce_out        1e-05
-- validOut                      ce_out        1e-05
-- tlastOut                      ce_out        1e-05
-- state                         ce_out        1e-05
-- treadyOut                     ce_out        1e-05
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DMAController_src_DMA_Controller
-- Source Path: fifo_packet/DMA Controller
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY DMAController_src_DMA_Controller IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        dataIn                            :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        validIn                           :   IN    std_logic;
        tlastIn                           :   IN    std_logic;
        ready_dma                         :   IN    std_logic;
        treadyIn                          :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        dataOut                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        validOut                          :   OUT   std_logic;
        tlastOut                          :   OUT   std_logic;
        state                             :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        treadyOut                         :   OUT   std_logic
        );
END DMAController_src_DMA_Controller;


ARCHITECTURE rtl OF DMAController_src_DMA_Controller IS

  -- Component Declarations
  COMPONENT DMAController_src_FIFO_State_Machine
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          validIn                         :   IN    std_logic;
          tlastIn                         :   IN    std_logic;
          ready_dma                       :   IN    std_logic;
          treadyIn                        :   IN    std_logic;
          addr                            :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
          wr_en                           :   OUT   std_logic;
          validOut                        :   OUT   std_logic;
          tlastOut                        :   OUT   std_logic;
          stateOut                        :   OUT   std_logic_vector(2 DOWNTO 0)  -- ufix3
          );
  END COMPONENT;

  COMPONENT DMAController_src_SinglePortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          din                             :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          addr                            :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          we                              :   IN    std_logic;
          dout                            :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : DMAController_src_FIFO_State_Machine
    USE ENTITY work.DMAController_src_FIFO_State_Machine(rtl);

  FOR ALL : DMAController_src_SinglePortRAM_generic
    USE ENTITY work.DMAController_src_SinglePortRAM_generic(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr                             : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL wr_en                            : std_logic;
  SIGNAL validOut_1                       : std_logic;
  SIGNAL tlastOut_1                       : std_logic;
  SIGNAL stateOut                         : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Single_Port_RAM_System_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL stateOut_unsigned                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Delay2_out1                      : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Constant_out1                    : std_logic;

BEGIN
  u_FIFO_State_Machine : DMAController_src_FIFO_State_Machine
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              validIn => validIn,
              tlastIn => tlastIn,
              ready_dma => ready_dma,
              treadyIn => treadyIn,
              addr => addr,  -- ufix4
              wr_en => wr_en,
              validOut => validOut_1,
              tlastOut => tlastOut_1,
              stateOut => stateOut  -- ufix3
              );

  u_Single_Port_RAM_System : DMAController_src_SinglePortRAM_generic
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 32
                 )
    PORT MAP( clk => clk,
              enb => clk_enable,
              din => dataIn,
              addr => addr,
              we => wr_en,
              dout => Single_Port_RAM_System_out1
              );

  enb <= clk_enable;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= validOut_1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= tlastOut_1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  stateOut_unsigned <= unsigned(stateOut);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= to_unsigned(16#0#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= stateOut_unsigned;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  state <= std_logic_vector(Delay2_out1);

  Constant_out1 <= '1';

  ce_out <= clk_enable;

  dataOut <= Single_Port_RAM_System_out1;

  validOut <= Delay_out1;

  tlastOut <= Delay1_out1;

  treadyOut <= Constant_out1;

END rtl;

