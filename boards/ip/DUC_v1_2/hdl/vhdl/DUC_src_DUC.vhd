-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/ddcduc/DUC_src_DUC.vhd
-- Created: 2023-01-04 14:48:45
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 7.8125e-09
-- Target subsystem base rate: 7.8125e-09
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        7.8125e-09
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- dataOut                       ce_out        7.8125e-09
-- validOut                      ce_out        7.8125e-09
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DUC_src_DUC
-- Source Path: ddcduc/DUC
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DUC_src_DUC_pkg.ALL;

ENTITY DUC_src_DUC IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        dataIn                            :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        validIn                           :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        dataOut                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        validOut                          :   OUT   std_logic
        );
END DUC_src_DUC;


ARCHITECTURE rtl OF DUC_src_DUC IS

  -- Component Declarations
  COMPONENT DUC_src_DUC_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1_1                       :   OUT   std_logic;
          enb_1_4_1                       :   OUT   std_logic;
          enb_1_8_1                       :   OUT   std_logic;
          enb_1_16_0                      :   OUT   std_logic;
          enb_1_16_1                      :   OUT   std_logic;
          enb_1_32_0                      :   OUT   std_logic;
          enb_1_32_1                      :   OUT   std_logic;
          enb_1_32_2                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT DUC_src_unpack_IQ
    PORT( dataIn                          :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          complex_dataOut_re              :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          complex_dataOut_im              :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
          );
  END COMPONENT;

  COMPONENT DUC_src_FIR_Interpolation
    PORT( clk                             :   IN    std_logic;
          enb_1_16_1                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          DUC_src_FIR_Interpolation_in_re :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          DUC_src_FIR_Interpolation_in_im :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          DUC_src_FIR_Interpolation_out_re :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          DUC_src_FIR_Interpolation_out_im :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En16
          );
  END COMPONENT;

  COMPONENT DUC_src_Halfband_Interpolation_1
    PORT( clk                             :   IN    std_logic;
          enb_1_8_1                       :   IN    std_logic;
          reset                           :   IN    std_logic;
          DUC_src_Halfband_Interpolation_1_in_re :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          DUC_src_Halfband_Interpolation_1_in_im :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          DUC_src_Halfband_Interpolation_1_out_re :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          DUC_src_Halfband_Interpolation_1_out_im :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En16
          );
  END COMPONENT;

  COMPONENT DUC_src_Halfband_Interpolation_2
    PORT( clk                             :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          reset                           :   IN    std_logic;
          DUC_src_Halfband_Interpolation_2_in_re :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          DUC_src_Halfband_Interpolation_2_in_im :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          DUC_src_Halfband_Interpolation_2_out_re :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          DUC_src_Halfband_Interpolation_2_out_im :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En16
          );
  END COMPONENT;

  COMPONENT DUC_src_CIC_Interpolation
    PORT( clk                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          reset                           :   IN    std_logic;
          DUC_src_CIC_Interpolation_in_re :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          DUC_src_CIC_Interpolation_in_im :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          DUC_src_CIC_Interpolation_out_re :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En8
          DUC_src_CIC_Interpolation_out_im :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En8
          );
  END COMPONENT;

  COMPONENT DUC_src_pack_IQ
    PORT( complex_dataIn_re               :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          complex_dataIn_im               :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          dataOut                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : DUC_src_DUC_tc
    USE ENTITY work.DUC_src_DUC_tc(rtl);

  FOR ALL : DUC_src_unpack_IQ
    USE ENTITY work.DUC_src_unpack_IQ(rtl);

  FOR ALL : DUC_src_FIR_Interpolation
    USE ENTITY work.DUC_src_FIR_Interpolation(rtl);

  FOR ALL : DUC_src_Halfband_Interpolation_1
    USE ENTITY work.DUC_src_Halfband_Interpolation_1(rtl);

  FOR ALL : DUC_src_Halfband_Interpolation_2
    USE ENTITY work.DUC_src_Halfband_Interpolation_2(rtl);

  FOR ALL : DUC_src_CIC_Interpolation
    USE ENTITY work.DUC_src_CIC_Interpolation(rtl);

  FOR ALL : DUC_src_pack_IQ
    USE ENTITY work.DUC_src_pack_IQ(rtl);

  -- Signals
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL enb_1_4_1                        : std_logic;
  SIGNAL enb_1_16_1                       : std_logic;
  SIGNAL enb_1_32_1                       : std_logic;
  SIGNAL enb_1_8_1                        : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_16_0                       : std_logic;
  SIGNAL enb_1_32_2                       : std_logic;
  SIGNAL enb_1_32_0                       : std_logic;
  SIGNAL Pipeline12_reg                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Pipeline12_out1                  : std_logic;
  SIGNAL dataIn_unsigned                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Pipeline11_reg                   : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL Pipeline11_out1                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Enabled_Delay_delOut             : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Enabled_Delay_ectrl              : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Enabled_Delay_out1               : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Enabled_Delay_last_value         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Downsample_ds_out                : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Downsample_out1                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Downsample_out1_1                : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Downsample_out1_2                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL unpack_IQ_out1_re                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL unpack_IQ_out1_im                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL unpack_IQ_out1_re_signed         : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL unpack_IQ_out1_im_signed         : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL unpack_IQ_out1_re_1              : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL unpack_IQ_out1_im_1              : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL FIR_Interpolation1_bypass_reg_re : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL FIR_Interpolation1_bypass_reg_im : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL unpack_IQ_out1_re_2              : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL unpack_IQ_out1_im_2              : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL unpack_IQ_out1_re_3              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL unpack_IQ_out1_im_3              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL FIR_Interpolation_out1_re        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL FIR_Interpolation_out1_im        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL FIR_Interpolation_out1_re_1      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL FIR_Interpolation_out1_im_1      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL FIR_Interpolation_out1_re_2      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL FIR_Interpolation_out1_im_2      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline2_bypass_reg_re          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline2_bypass_reg_im          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL FIR_Interpolation_out1_re_3      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL FIR_Interpolation_out1_im_3      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain11_cast                      : signed(35 DOWNTO 0);  -- sfix36_En31
  SIGNAL Gain1_out                        : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain1_cast                       : signed(35 DOWNTO 0);  -- sfix36_En31
  SIGNAL Gain1_out_1                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain1_out1_re                    : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain1_out1_im                    : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain1_out1_re_1                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain1_out1_im_1                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline3_out1_re                : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline3_out1_im                : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Halfband_Interpolation_11_bypass_reg_re : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Halfband_Interpolation_11_bypass_reg_im : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline3_out1_re_1              : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline3_out1_im_1              : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline3_out1_re_2              : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Pipeline3_out1_im_2              : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Halfband_Interpolation_1_out1_re : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Halfband_Interpolation_1_out1_im : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Halfband_Interpolation_1_out1_re_1 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Halfband_Interpolation_1_out1_im_1 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Halfband_Interpolation_1_out1_re_2 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Halfband_Interpolation_1_out1_im_2 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline4_bypass_reg_re          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline4_bypass_reg_im          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Halfband_Interpolation_1_out1_re_3 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Halfband_Interpolation_1_out1_im_3 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline4_out1_re                : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline4_out1_im                : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline4_out1_re_1              : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline4_out1_im_1              : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain21_cast                      : signed(35 DOWNTO 0);  -- sfix36_En31
  SIGNAL Gain2_out                        : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain2_cast                       : signed(35 DOWNTO 0);  -- sfix36_En31
  SIGNAL Gain2_out_1                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain2_out1_re                    : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain2_out1_im                    : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline5_bypass_reg_re          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline5_bypass_reg_im          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain2_out1_re_1                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain2_out1_im_1                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain2_out1_re_2                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain2_out1_im_2                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline5_out1_re                : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline5_out1_im                : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Halfband_Interpolation_21_bypass_reg_re : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Halfband_Interpolation_21_bypass_reg_im : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline5_out1_re_1              : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline5_out1_im_1              : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline5_out1_re_2              : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Pipeline5_out1_im_2              : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Halfband_Interpolation_2_out1_re : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Halfband_Interpolation_2_out1_im : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Halfband_Interpolation_2_out1_re_1 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Halfband_Interpolation_2_out1_im_1 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Halfband_Interpolation_2_out1_re_2 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Halfband_Interpolation_2_out1_im_2 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline6_bypass_reg_re          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline6_bypass_reg_im          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Halfband_Interpolation_2_out1_re_3 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Halfband_Interpolation_2_out1_im_3 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline6_out1_re                : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline6_out1_im                : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline6_out1_re_1              : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline6_out1_im_1              : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain31_cast                      : signed(35 DOWNTO 0);  -- sfix36_En31
  SIGNAL Gain3_out                        : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain3_cast                       : signed(35 DOWNTO 0);  -- sfix36_En31
  SIGNAL Gain3_out_1                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain3_out1_re                    : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain3_out1_im                    : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline7_bypass_reg_re          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline7_bypass_reg_im          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain3_out1_re_1                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain3_out1_im_1                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline7_out1_re                : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline7_out1_im                : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline7_out1_re_1              : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline7_out1_im_1              : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL CIC_Interpolation1_bypass_reg_re : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL CIC_Interpolation1_bypass_reg_im : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline7_out1_re_2              : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline7_out1_im_2              : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline7_out1_re_3              : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Pipeline7_out1_im_3              : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL CIC_Interpolation_out1_re        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL CIC_Interpolation_out1_im        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL CIC_Interpolation_out1_re_signed : signed(17 DOWNTO 0);  -- sfix18_En8
  SIGNAL CIC_Interpolation_out1_im_signed : signed(17 DOWNTO 0);  -- sfix18_En8
  SIGNAL Gain_in_buff_in_pipe_reg_re      : vector_of_signed18(0 TO 2);  -- sfix18_En8 [3]
  SIGNAL Gain_in_buff_in_pipe_reg_im      : vector_of_signed18(0 TO 2);  -- sfix18_En8 [3]
  SIGNAL Pipeline8_out1_re                : signed(17 DOWNTO 0);  -- sfix18_En8
  SIGNAL Pipeline8_out1_im                : signed(17 DOWNTO 0);  -- sfix18_En8
  SIGNAL Gain_cast                        : signed(35 DOWNTO 0);  -- sfix36_En34
  SIGNAL Gain_out                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain4_cast                       : signed(35 DOWNTO 0);  -- sfix36_En34
  SIGNAL Gain_out_1                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline9_reg_re                 : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL Pipeline9_reg_im                 : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL Pipeline9_out1_re                : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Pipeline9_out1_im                : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL y                                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_unsigned                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL out_0_pipe_in_pipe_reg           : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL Pipeline10_out1                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 203);  -- ufix1 [204]
  SIGNAL Constant_out1_1                  : std_logic;

BEGIN
  u_DUC_tc : DUC_src_DUC_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              enb_1_4_1 => enb_1_4_1,
              enb_1_8_1 => enb_1_8_1,
              enb_1_16_0 => enb_1_16_0,
              enb_1_16_1 => enb_1_16_1,
              enb_1_32_0 => enb_1_32_0,
              enb_1_32_1 => enb_1_32_1,
              enb_1_32_2 => enb_1_32_2
              );

  u_unpack_IQ : DUC_src_unpack_IQ
    PORT MAP( dataIn => Downsample_out1_2,  -- uint32
              complex_dataOut_re => unpack_IQ_out1_re,  -- sfix16_En15
              complex_dataOut_im => unpack_IQ_out1_im  -- sfix16_En15
              );

  u_DUC_src_FIR_Interpolation : DUC_src_FIR_Interpolation
    PORT MAP( clk => clk,
              enb_1_16_1 => enb_1_16_1,
              reset => reset,
              DUC_src_FIR_Interpolation_in_re => unpack_IQ_out1_re_3,  -- sfix16_En15
              DUC_src_FIR_Interpolation_in_im => unpack_IQ_out1_im_3,  -- sfix16_En15
              DUC_src_FIR_Interpolation_out_re => FIR_Interpolation_out1_re,  -- sfix18_En16
              DUC_src_FIR_Interpolation_out_im => FIR_Interpolation_out1_im  -- sfix18_En16
              );

  u_DUC_src_Halfband_Interpolation_1 : DUC_src_Halfband_Interpolation_1
    PORT MAP( clk => clk,
              enb_1_8_1 => enb_1_8_1,
              reset => reset,
              DUC_src_Halfband_Interpolation_1_in_re => Pipeline3_out1_re_2,  -- sfix18_En16
              DUC_src_Halfband_Interpolation_1_in_im => Pipeline3_out1_im_2,  -- sfix18_En16
              DUC_src_Halfband_Interpolation_1_out_re => Halfband_Interpolation_1_out1_re,  -- sfix18_En16
              DUC_src_Halfband_Interpolation_1_out_im => Halfband_Interpolation_1_out1_im  -- sfix18_En16
              );

  u_DUC_src_Halfband_Interpolation_2 : DUC_src_Halfband_Interpolation_2
    PORT MAP( clk => clk,
              enb_1_4_1 => enb_1_4_1,
              reset => reset,
              DUC_src_Halfband_Interpolation_2_in_re => Pipeline5_out1_re_2,  -- sfix18_En16
              DUC_src_Halfband_Interpolation_2_in_im => Pipeline5_out1_im_2,  -- sfix18_En16
              DUC_src_Halfband_Interpolation_2_out_re => Halfband_Interpolation_2_out1_re,  -- sfix18_En16
              DUC_src_Halfband_Interpolation_2_out_im => Halfband_Interpolation_2_out1_im  -- sfix18_En16
              );

  u_DUC_src_CIC_Interpolation : DUC_src_CIC_Interpolation
    PORT MAP( clk => clk,
              enb_1_1_1 => enb_1_1_1,
              reset => reset,
              DUC_src_CIC_Interpolation_in_re => Pipeline7_out1_re_3,  -- sfix18_En16
              DUC_src_CIC_Interpolation_in_im => Pipeline7_out1_im_3,  -- sfix18_En16
              DUC_src_CIC_Interpolation_out_re => CIC_Interpolation_out1_re,  -- sfix18_En8
              DUC_src_CIC_Interpolation_out_im => CIC_Interpolation_out1_im  -- sfix18_En8
              );

  u_pack_IQ : DUC_src_pack_IQ
    PORT MAP( complex_dataIn_re => std_logic_vector(Pipeline9_out1_re),  -- sfix18_En16
              complex_dataIn_im => std_logic_vector(Pipeline9_out1_im),  -- sfix18_En16
              dataOut => y  -- uint32
              );

  Pipeline12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline12_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pipeline12_reg(0) <= validIn;
        Pipeline12_reg(1) <= Pipeline12_reg(0);
      END IF;
    END IF;
  END PROCESS Pipeline12_process;

  Pipeline12_out1 <= Pipeline12_reg(1);

  dataIn_unsigned <= unsigned(dataIn);

  Pipeline11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline11_reg <= (OTHERS => to_unsigned(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pipeline11_reg(0) <= dataIn_unsigned;
        Pipeline11_reg(1) <= Pipeline11_reg(0);
      END IF;
    END IF;
  END PROCESS Pipeline11_process;

  Pipeline11_out1 <= Pipeline11_reg(1);

  
  Enabled_Delay_ectrl <= Enabled_Delay_delOut WHEN Pipeline12_out1 = '0' ELSE
      Pipeline11_out1;

  Enabled_Delay_lowered_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Enabled_Delay_delOut <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Enabled_Delay_delOut <= Enabled_Delay_ectrl;
      END IF;
    END IF;
  END PROCESS Enabled_Delay_lowered_process;


  Enabled_Delay_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Enabled_Delay_last_value <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Enabled_Delay_last_value <= Enabled_Delay_out1;
      END IF;
    END IF;
  END PROCESS Enabled_Delay_bypass_process;


  
  Enabled_Delay_out1 <= Enabled_Delay_last_value WHEN Pipeline12_out1 = '0' ELSE
      Enabled_Delay_delOut;

  -- Downsample register
  Downsample_ds_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Downsample_ds_out <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_32_2 = '1' THEN
        Downsample_ds_out <= Enabled_Delay_out1;
      END IF;
    END IF;
  END PROCESS Downsample_ds_process;


  -- Downsample output register
  Downsample_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Downsample_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_32_0 = '1' THEN
        Downsample_out1 <= Downsample_ds_out;
      END IF;
    END IF;
  END PROCESS Downsample_output_process;


  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Downsample_out1_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_32_0 = '1' THEN
        Downsample_out1_1 <= Downsample_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Downsample_out1_2 <= std_logic_vector(Downsample_out1_1);

  unpack_IQ_out1_re_signed <= signed(unpack_IQ_out1_re);

  unpack_IQ_out1_im_signed <= signed(unpack_IQ_out1_im);

  FIR_Interpolation_in_buff_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      unpack_IQ_out1_re_1 <= to_signed(16#0000#, 16);
      unpack_IQ_out1_im_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        unpack_IQ_out1_re_1 <= unpack_IQ_out1_re_signed;
        unpack_IQ_out1_im_1 <= unpack_IQ_out1_im_signed;
      END IF;
    END IF;
  END PROCESS FIR_Interpolation_in_buff_in_pipe_process;


  FIR_Interpolation1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      FIR_Interpolation1_bypass_reg_re <= to_signed(16#0000#, 16);
      FIR_Interpolation1_bypass_reg_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_32_1 = '1' THEN
        FIR_Interpolation1_bypass_reg_im <= unpack_IQ_out1_im_1;
        FIR_Interpolation1_bypass_reg_re <= unpack_IQ_out1_re_1;
      END IF;
    END IF;
  END PROCESS FIR_Interpolation1_bypass_process;

  
  unpack_IQ_out1_re_2 <= unpack_IQ_out1_re_1 WHEN enb_1_32_1 = '1' ELSE
      FIR_Interpolation1_bypass_reg_re;
  
  unpack_IQ_out1_im_2 <= unpack_IQ_out1_im_1 WHEN enb_1_32_1 = '1' ELSE
      FIR_Interpolation1_bypass_reg_im;

  unpack_IQ_out1_re_3 <= std_logic_vector(unpack_IQ_out1_re_2);

  unpack_IQ_out1_im_3 <= std_logic_vector(unpack_IQ_out1_im_2);

  FIR_Interpolation_out1_re_1 <= signed(FIR_Interpolation_out1_re);

  FIR_Interpolation_out1_im_1 <= signed(FIR_Interpolation_out1_im);

  FIR_Interpolation_outbuff_out_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      FIR_Interpolation_out1_re_2 <= to_signed(16#00000#, 18);
      FIR_Interpolation_out1_im_2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        FIR_Interpolation_out1_re_2 <= FIR_Interpolation_out1_re_1;
        FIR_Interpolation_out1_im_2 <= FIR_Interpolation_out1_im_1;
      END IF;
    END IF;
  END PROCESS FIR_Interpolation_outbuff_out_pipe_process;


  Pipeline2_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline2_bypass_reg_re <= to_signed(16#00000#, 18);
      Pipeline2_bypass_reg_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_1 = '1' THEN
        Pipeline2_bypass_reg_im <= FIR_Interpolation_out1_im_2;
        Pipeline2_bypass_reg_re <= FIR_Interpolation_out1_re_2;
      END IF;
    END IF;
  END PROCESS Pipeline2_bypass_process;

  
  FIR_Interpolation_out1_re_3 <= FIR_Interpolation_out1_re_2 WHEN enb_1_16_1 = '1' ELSE
      Pipeline2_bypass_reg_re;
  
  FIR_Interpolation_out1_im_3 <= FIR_Interpolation_out1_im_2 WHEN enb_1_16_1 = '1' ELSE
      Pipeline2_bypass_reg_im;

  Gain11_cast <= resize(FIR_Interpolation_out1_re_3 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 36);
  Gain1_out <= Gain11_cast(32 DOWNTO 15);

  Gain1_cast <= resize(FIR_Interpolation_out1_im_3 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 36);
  Gain1_out_1 <= Gain1_cast(32 DOWNTO 15);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain1_out1_re <= to_signed(16#00000#, 18);
      Gain1_out1_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Gain1_out1_re <= Gain1_out;
        Gain1_out1_im <= Gain1_out_1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  Gain1_out1_re_1 <= Gain1_out1_re;

  Gain1_out1_im_1 <= Gain1_out1_im;

  Halfband_Interpolation_1_in_buff_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline3_out1_re <= to_signed(16#00000#, 18);
      Pipeline3_out1_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pipeline3_out1_re <= Gain1_out1_re_1;
        Pipeline3_out1_im <= Gain1_out1_im_1;
      END IF;
    END IF;
  END PROCESS Halfband_Interpolation_1_in_buff_in_pipe_process;


  Halfband_Interpolation_11_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Halfband_Interpolation_11_bypass_reg_re <= to_signed(16#00000#, 18);
      Halfband_Interpolation_11_bypass_reg_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_1 = '1' THEN
        Halfband_Interpolation_11_bypass_reg_im <= Pipeline3_out1_im;
        Halfband_Interpolation_11_bypass_reg_re <= Pipeline3_out1_re;
      END IF;
    END IF;
  END PROCESS Halfband_Interpolation_11_bypass_process;

  
  Pipeline3_out1_re_1 <= Pipeline3_out1_re WHEN enb_1_16_1 = '1' ELSE
      Halfband_Interpolation_11_bypass_reg_re;
  
  Pipeline3_out1_im_1 <= Pipeline3_out1_im WHEN enb_1_16_1 = '1' ELSE
      Halfband_Interpolation_11_bypass_reg_im;

  Pipeline3_out1_re_2 <= std_logic_vector(Pipeline3_out1_re_1);

  Pipeline3_out1_im_2 <= std_logic_vector(Pipeline3_out1_im_1);

  Halfband_Interpolation_1_out1_re_1 <= signed(Halfband_Interpolation_1_out1_re);

  Halfband_Interpolation_1_out1_im_1 <= signed(Halfband_Interpolation_1_out1_im);

  Halfband_Interpolation_1_outbuff_out_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Halfband_Interpolation_1_out1_re_2 <= to_signed(16#00000#, 18);
      Halfband_Interpolation_1_out1_im_2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Halfband_Interpolation_1_out1_re_2 <= Halfband_Interpolation_1_out1_re_1;
        Halfband_Interpolation_1_out1_im_2 <= Halfband_Interpolation_1_out1_im_1;
      END IF;
    END IF;
  END PROCESS Halfband_Interpolation_1_outbuff_out_pipe_process;


  Pipeline4_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline4_bypass_reg_re <= to_signed(16#00000#, 18);
      Pipeline4_bypass_reg_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_8_1 = '1' THEN
        Pipeline4_bypass_reg_im <= Halfband_Interpolation_1_out1_im_2;
        Pipeline4_bypass_reg_re <= Halfband_Interpolation_1_out1_re_2;
      END IF;
    END IF;
  END PROCESS Pipeline4_bypass_process;

  
  Halfband_Interpolation_1_out1_re_3 <= Halfband_Interpolation_1_out1_re_2 WHEN enb_1_8_1 = '1' ELSE
      Pipeline4_bypass_reg_re;
  
  Halfband_Interpolation_1_out1_im_3 <= Halfband_Interpolation_1_out1_im_2 WHEN enb_1_8_1 = '1' ELSE
      Pipeline4_bypass_reg_im;

  Pipeline4_out1_re <= Halfband_Interpolation_1_out1_re_3;

  Pipeline4_out1_im <= Halfband_Interpolation_1_out1_im_3;

  Gain2_in_buff_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline4_out1_re_1 <= to_signed(16#00000#, 18);
      Pipeline4_out1_im_1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pipeline4_out1_re_1 <= Pipeline4_out1_re;
        Pipeline4_out1_im_1 <= Pipeline4_out1_im;
      END IF;
    END IF;
  END PROCESS Gain2_in_buff_in_pipe_process;


  Gain21_cast <= resize(Pipeline4_out1_re_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 36);
  Gain2_out <= Gain21_cast(32 DOWNTO 15);

  Gain2_cast <= resize(Pipeline4_out1_im_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 36);
  Gain2_out_1 <= Gain2_cast(32 DOWNTO 15);

  Gain2_outbuff_out_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain2_out1_re <= to_signed(16#00000#, 18);
      Gain2_out1_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain2_out1_re <= Gain2_out;
        Gain2_out1_im <= Gain2_out_1;
      END IF;
    END IF;
  END PROCESS Gain2_outbuff_out_pipe_process;


  Pipeline5_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline5_bypass_reg_re <= to_signed(16#00000#, 18);
      Pipeline5_bypass_reg_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_8_1 = '1' THEN
        Pipeline5_bypass_reg_im <= Gain2_out1_im;
        Pipeline5_bypass_reg_re <= Gain2_out1_re;
      END IF;
    END IF;
  END PROCESS Pipeline5_bypass_process;

  
  Gain2_out1_re_1 <= Gain2_out1_re WHEN enb_1_8_1 = '1' ELSE
      Pipeline5_bypass_reg_re;
  
  Gain2_out1_im_1 <= Gain2_out1_im WHEN enb_1_8_1 = '1' ELSE
      Pipeline5_bypass_reg_im;

  Gain2_out1_re_2 <= Gain2_out1_re_1;

  Gain2_out1_im_2 <= Gain2_out1_im_1;

  Halfband_Interpolation_2_in_buff_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline5_out1_re <= to_signed(16#00000#, 18);
      Pipeline5_out1_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pipeline5_out1_re <= Gain2_out1_re_2;
        Pipeline5_out1_im <= Gain2_out1_im_2;
      END IF;
    END IF;
  END PROCESS Halfband_Interpolation_2_in_buff_in_pipe_process;


  Halfband_Interpolation_21_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Halfband_Interpolation_21_bypass_reg_re <= to_signed(16#00000#, 18);
      Halfband_Interpolation_21_bypass_reg_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_8_1 = '1' THEN
        Halfband_Interpolation_21_bypass_reg_im <= Pipeline5_out1_im;
        Halfband_Interpolation_21_bypass_reg_re <= Pipeline5_out1_re;
      END IF;
    END IF;
  END PROCESS Halfband_Interpolation_21_bypass_process;

  
  Pipeline5_out1_re_1 <= Pipeline5_out1_re WHEN enb_1_8_1 = '1' ELSE
      Halfband_Interpolation_21_bypass_reg_re;
  
  Pipeline5_out1_im_1 <= Pipeline5_out1_im WHEN enb_1_8_1 = '1' ELSE
      Halfband_Interpolation_21_bypass_reg_im;

  Pipeline5_out1_re_2 <= std_logic_vector(Pipeline5_out1_re_1);

  Pipeline5_out1_im_2 <= std_logic_vector(Pipeline5_out1_im_1);

  Halfband_Interpolation_2_out1_re_1 <= signed(Halfband_Interpolation_2_out1_re);

  Halfband_Interpolation_2_out1_im_1 <= signed(Halfband_Interpolation_2_out1_im);

  Halfband_Interpolation_2_outbuff_out_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Halfband_Interpolation_2_out1_re_2 <= to_signed(16#00000#, 18);
      Halfband_Interpolation_2_out1_im_2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Halfband_Interpolation_2_out1_re_2 <= Halfband_Interpolation_2_out1_re_1;
        Halfband_Interpolation_2_out1_im_2 <= Halfband_Interpolation_2_out1_im_1;
      END IF;
    END IF;
  END PROCESS Halfband_Interpolation_2_outbuff_out_pipe_process;


  Pipeline6_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline6_bypass_reg_re <= to_signed(16#00000#, 18);
      Pipeline6_bypass_reg_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_1 = '1' THEN
        Pipeline6_bypass_reg_im <= Halfband_Interpolation_2_out1_im_2;
        Pipeline6_bypass_reg_re <= Halfband_Interpolation_2_out1_re_2;
      END IF;
    END IF;
  END PROCESS Pipeline6_bypass_process;

  
  Halfband_Interpolation_2_out1_re_3 <= Halfband_Interpolation_2_out1_re_2 WHEN enb_1_4_1 = '1' ELSE
      Pipeline6_bypass_reg_re;
  
  Halfband_Interpolation_2_out1_im_3 <= Halfband_Interpolation_2_out1_im_2 WHEN enb_1_4_1 = '1' ELSE
      Pipeline6_bypass_reg_im;

  Pipeline6_out1_re <= Halfband_Interpolation_2_out1_re_3;

  Pipeline6_out1_im <= Halfband_Interpolation_2_out1_im_3;

  Gain3_in_buff_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline6_out1_re_1 <= to_signed(16#00000#, 18);
      Pipeline6_out1_im_1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pipeline6_out1_re_1 <= Pipeline6_out1_re;
        Pipeline6_out1_im_1 <= Pipeline6_out1_im;
      END IF;
    END IF;
  END PROCESS Gain3_in_buff_in_pipe_process;


  Gain31_cast <= resize(Pipeline6_out1_re_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 36);
  Gain3_out <= Gain31_cast(32 DOWNTO 15);

  Gain3_cast <= resize(Pipeline6_out1_im_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 36);
  Gain3_out_1 <= Gain3_cast(32 DOWNTO 15);

  Gain3_outbuff_out_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain3_out1_re <= to_signed(16#00000#, 18);
      Gain3_out1_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain3_out1_re <= Gain3_out;
        Gain3_out1_im <= Gain3_out_1;
      END IF;
    END IF;
  END PROCESS Gain3_outbuff_out_pipe_process;


  Pipeline7_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline7_bypass_reg_re <= to_signed(16#00000#, 18);
      Pipeline7_bypass_reg_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_1 = '1' THEN
        Pipeline7_bypass_reg_im <= Gain3_out1_im;
        Pipeline7_bypass_reg_re <= Gain3_out1_re;
      END IF;
    END IF;
  END PROCESS Pipeline7_bypass_process;

  
  Gain3_out1_re_1 <= Gain3_out1_re WHEN enb_1_4_1 = '1' ELSE
      Pipeline7_bypass_reg_re;
  
  Gain3_out1_im_1 <= Gain3_out1_im WHEN enb_1_4_1 = '1' ELSE
      Pipeline7_bypass_reg_im;

  Pipeline7_out1_re <= Gain3_out1_re_1;

  Pipeline7_out1_im <= Gain3_out1_im_1;

  CIC_Interpolation_in_buff_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline7_out1_re_1 <= to_signed(16#00000#, 18);
      Pipeline7_out1_im_1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pipeline7_out1_re_1 <= Pipeline7_out1_re;
        Pipeline7_out1_im_1 <= Pipeline7_out1_im;
      END IF;
    END IF;
  END PROCESS CIC_Interpolation_in_buff_in_pipe_process;


  CIC_Interpolation1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CIC_Interpolation1_bypass_reg_re <= to_signed(16#00000#, 18);
      CIC_Interpolation1_bypass_reg_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_1 = '1' THEN
        CIC_Interpolation1_bypass_reg_im <= Pipeline7_out1_im_1;
        CIC_Interpolation1_bypass_reg_re <= Pipeline7_out1_re_1;
      END IF;
    END IF;
  END PROCESS CIC_Interpolation1_bypass_process;

  
  Pipeline7_out1_re_2 <= Pipeline7_out1_re_1 WHEN enb_1_4_1 = '1' ELSE
      CIC_Interpolation1_bypass_reg_re;
  
  Pipeline7_out1_im_2 <= Pipeline7_out1_im_1 WHEN enb_1_4_1 = '1' ELSE
      CIC_Interpolation1_bypass_reg_im;

  Pipeline7_out1_re_3 <= std_logic_vector(Pipeline7_out1_re_2);

  Pipeline7_out1_im_3 <= std_logic_vector(Pipeline7_out1_im_2);

  CIC_Interpolation_out1_re_signed <= signed(CIC_Interpolation_out1_re);

  CIC_Interpolation_out1_im_signed <= signed(CIC_Interpolation_out1_im);

  Gain_in_buff_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain_in_buff_in_pipe_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      Gain_in_buff_in_pipe_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain_in_buff_in_pipe_reg_im(0) <= CIC_Interpolation_out1_im_signed;
        Gain_in_buff_in_pipe_reg_im(1 TO 2) <= Gain_in_buff_in_pipe_reg_im(0 TO 1);
        Gain_in_buff_in_pipe_reg_re(0) <= CIC_Interpolation_out1_re_signed;
        Gain_in_buff_in_pipe_reg_re(1 TO 2) <= Gain_in_buff_in_pipe_reg_re(0 TO 1);
      END IF;
    END IF;
  END PROCESS Gain_in_buff_in_pipe_process;

  Pipeline8_out1_re <= Gain_in_buff_in_pipe_reg_re(2);
  Pipeline8_out1_im <= Gain_in_buff_in_pipe_reg_im(2);

  Gain_cast <= resize(Pipeline8_out1_re & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 36);
  Gain_out <= Gain_cast(35 DOWNTO 18);

  Gain4_cast <= resize(Pipeline8_out1_im & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 36);
  Gain_out_1 <= Gain4_cast(35 DOWNTO 18);

  Pipeline9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline9_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      Pipeline9_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pipeline9_reg_im(0) <= Gain_out_1;
        Pipeline9_reg_im(1) <= Pipeline9_reg_im(0);
        Pipeline9_reg_re(0) <= Gain_out;
        Pipeline9_reg_re(1) <= Pipeline9_reg_re(0);
      END IF;
    END IF;
  END PROCESS Pipeline9_process;

  Pipeline9_out1_re <= Pipeline9_reg_re(1);
  Pipeline9_out1_im <= Pipeline9_reg_im(1);

  y_unsigned <= unsigned(y);

  out_0_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      out_0_pipe_in_pipe_reg <= (OTHERS => to_unsigned(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        out_0_pipe_in_pipe_reg(0) <= y_unsigned;
        out_0_pipe_in_pipe_reg(1) <= out_0_pipe_in_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS out_0_pipe_in_pipe_process;

  Pipeline10_out1 <= out_0_pipe_in_pipe_reg(1);

  dataOut <= std_logic_vector(Pipeline10_out1);

  Constant_out1 <= '1';

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch1_reg(0) <= Constant_out1;
        delayMatch1_reg(1 TO 203) <= delayMatch1_reg(0 TO 202);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Constant_out1_1 <= delayMatch1_reg(203);

  ce_out <= enb_1_1_1;

  validOut <= Constant_out1_1;

END rtl;

