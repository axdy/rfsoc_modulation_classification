-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/ddcduc/DUC_src_DUC_tc.vhd
-- Created: 2023-01-04 14:48:45
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DUC_src_DUC_tc
-- Source Path: DUC_tc
-- Hierarchy Level: 1
-- 
-- Master clock enable input: clk_enable
-- 
-- enb         : identical to clk_enable
-- enb_1_1_1   : identical to clk_enable
-- enb_1_4_1   : 4x slower than clk with phase 1
-- enb_1_8_1   : 8x slower than clk with phase 1
-- enb_1_16_0  : 16x slower than clk with last phase
-- enb_1_16_1  : 16x slower than clk with phase 1
-- enb_1_32_0  : 32x slower than clk with last phase
-- enb_1_32_1  : 32x slower than clk with phase 1
-- enb_1_32_2  : 32x slower than clk with phase 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY DUC_src_DUC_tc IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        enb                               :   OUT   std_logic;
        enb_1_1_1                         :   OUT   std_logic;
        enb_1_4_1                         :   OUT   std_logic;
        enb_1_8_1                         :   OUT   std_logic;
        enb_1_16_0                        :   OUT   std_logic;
        enb_1_16_1                        :   OUT   std_logic;
        enb_1_32_0                        :   OUT   std_logic;
        enb_1_32_1                        :   OUT   std_logic;
        enb_1_32_2                        :   OUT   std_logic
        );
END DUC_src_DUC_tc;


ARCHITECTURE rtl OF DUC_src_DUC_tc IS

  -- Signals
  SIGNAL count4                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL phase_1                          : std_logic;
  SIGNAL phase_1_tmp                      : std_logic;
  SIGNAL count8                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL phase_1_1                        : std_logic;
  SIGNAL phase_1_tmp_1                    : std_logic;
  SIGNAL count16                          : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL phase_0                          : std_logic;
  SIGNAL phase_0_tmp                      : std_logic;
  SIGNAL phase_1_2                        : std_logic;
  SIGNAL phase_1_tmp_2                    : std_logic;
  SIGNAL count32                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL phase_all                        : std_logic;
  SIGNAL phase_0_1                        : std_logic;
  SIGNAL phase_0_tmp_1                    : std_logic;
  SIGNAL phase_1_3                        : std_logic;
  SIGNAL phase_1_tmp_3                    : std_logic;
  SIGNAL phase_2                          : std_logic;
  SIGNAL phase_2_tmp                      : std_logic;

BEGIN
  Counter4 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count4 <= to_unsigned(1, 2);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF count4 >= to_unsigned(3, 2) THEN
          count4 <= to_unsigned(0, 2);
        ELSE
          count4 <= count4 + to_unsigned(1, 2);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter4;

  temp_process1 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      phase_1 <= '1';
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        phase_1 <= phase_1_tmp;
      END IF;
    END IF; 
  END PROCESS temp_process1;

  phase_1_tmp <= '1' WHEN count4 = to_unsigned(0, 2) AND clk_enable = '1' ELSE '0';

  Counter8 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count8 <= to_unsigned(1, 3);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF count8 >= to_unsigned(7, 3) THEN
          count8 <= to_unsigned(0, 3);
        ELSE
          count8 <= count8 + to_unsigned(1, 3);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter8;

  temp_process2 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      phase_1_1 <= '1';
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        phase_1_1 <= phase_1_tmp_1;
      END IF;
    END IF; 
  END PROCESS temp_process2;

  phase_1_tmp_1 <= '1' WHEN count8 = to_unsigned(0, 3) AND clk_enable = '1' ELSE '0';

  Counter16 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count16 <= to_unsigned(1, 4);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF count16 >= to_unsigned(15, 4) THEN
          count16 <= to_unsigned(0, 4);
        ELSE
          count16 <= count16 + to_unsigned(1, 4);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter16;

  temp_process3 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      phase_0 <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        phase_0 <= phase_0_tmp;
      END IF;
    END IF; 
  END PROCESS temp_process3;

  phase_0_tmp <= '1' WHEN count16 = to_unsigned(15, 4) AND clk_enable = '1' ELSE '0';

  temp_process4 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      phase_1_2 <= '1';
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        phase_1_2 <= phase_1_tmp_2;
      END IF;
    END IF; 
  END PROCESS temp_process4;

  phase_1_tmp_2 <= '1' WHEN count16 = to_unsigned(0, 4) AND clk_enable = '1' ELSE '0';

  Counter32 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count32 <= to_unsigned(1, 5);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF count32 >= to_unsigned(31, 5) THEN
          count32 <= to_unsigned(0, 5);
        ELSE
          count32 <= count32 + to_unsigned(1, 5);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter32;

  phase_all <= '1' WHEN clk_enable = '1' ELSE '0';

  temp_process5 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      phase_0_1 <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        phase_0_1 <= phase_0_tmp_1;
      END IF;
    END IF; 
  END PROCESS temp_process5;

  phase_0_tmp_1 <= '1' WHEN count32 = to_unsigned(31, 5) AND clk_enable = '1' ELSE '0';

  temp_process6 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      phase_1_3 <= '1';
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        phase_1_3 <= phase_1_tmp_3;
      END IF;
    END IF; 
  END PROCESS temp_process6;

  phase_1_tmp_3 <= '1' WHEN count32 = to_unsigned(0, 5) AND clk_enable = '1' ELSE '0';

  temp_process7 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      phase_2 <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        phase_2 <= phase_2_tmp;
      END IF;
    END IF; 
  END PROCESS temp_process7;

  phase_2_tmp <= '1' WHEN count32 = to_unsigned(1, 5) AND clk_enable = '1' ELSE '0';

  enb <=  phase_all AND clk_enable;

  enb_1_1_1 <=  phase_all AND clk_enable;

  enb_1_4_1 <=  phase_1 AND clk_enable;

  enb_1_8_1 <=  phase_1_1 AND clk_enable;

  enb_1_16_0 <=  phase_0 AND clk_enable;

  enb_1_16_1 <=  phase_1_2 AND clk_enable;

  enb_1_32_0 <=  phase_0_1 AND clk_enable;

  enb_1_32_1 <=  phase_1_3 AND clk_enable;

  enb_1_32_2 <=  phase_2 AND clk_enable;


END rtl;

