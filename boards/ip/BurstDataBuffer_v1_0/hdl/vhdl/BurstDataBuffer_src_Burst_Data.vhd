-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/axis_combine/BurstDataBuffer_src_Burst_Data.vhd
-- Created: 2023-01-10 15:52:58
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-05
-- Target subsystem base rate: 1e-05
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-05
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- dataOut                       ce_out        1e-05
-- validOut                      ce_out        1e-05
-- tlastOut                      ce_out        1e-05
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: BurstDataBuffer_src_Burst_Data
-- Source Path: axis_combine/Burst Data
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY BurstDataBuffer_src_Burst_Data IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        dataIn                            :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        validIn                           :   IN    std_logic;
        tlastIn                           :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        dataOut                           :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        validOut                          :   OUT   std_logic;
        tlastOut                          :   OUT   std_logic
        );
END BurstDataBuffer_src_Burst_Data;


ARCHITECTURE rtl OF BurstDataBuffer_src_Burst_Data IS

  -- Component Declarations
  COMPONENT BurstDataBuffer_src_Buffer_Controller
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          validIn                         :   IN    std_logic;
          tlastIn                         :   IN    std_logic;
          wrEn0                           :   OUT   std_logic;
          wrEn1                           :   OUT   std_logic;
          bufferSelect                    :   OUT   std_logic;
          ram0Addr                        :   OUT   std_logic_vector(12 DOWNTO 0);  -- ufix13
          ram1Addr                        :   OUT   std_logic_vector(12 DOWNTO 0);  -- ufix13
          validOut                        :   OUT   std_logic;
          tlastOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT BurstDataBuffer_src_SinglePortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          din                             :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          addr                            :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          we                              :   IN    std_logic;
          dout                            :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : BurstDataBuffer_src_Buffer_Controller
    USE ENTITY work.BurstDataBuffer_src_Buffer_Controller(rtl);

  FOR ALL : BurstDataBuffer_src_SinglePortRAM_generic
    USE ENTITY work.BurstDataBuffer_src_SinglePortRAM_generic(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL wrEn0                            : std_logic;
  SIGNAL wrEn1                            : std_logic;
  SIGNAL bufferSelect                     : std_logic;
  SIGNAL ram0Addr                         : std_logic_vector(12 DOWNTO 0);  -- ufix13
  SIGNAL ram1Addr                         : std_logic_vector(12 DOWNTO 0);  -- ufix13
  SIGNAL validOut_1                       : std_logic;
  SIGNAL tlastOut_1                       : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL NOT_out1                         : std_logic;
  SIGNAL Pong_Buffer_out1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Pong_Buffer_out1_unsigned        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Ping_Buffer_out1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Ping_Buffer_out1_unsigned        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Switch_out1                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay2_out1                      : std_logic;

BEGIN
  u_Buffer_Controller : BurstDataBuffer_src_Buffer_Controller
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              validIn => validIn,
              tlastIn => tlastIn,
              wrEn0 => wrEn0,
              wrEn1 => wrEn1,
              bufferSelect => bufferSelect,
              ram0Addr => ram0Addr,  -- ufix13
              ram1Addr => ram1Addr,  -- ufix13
              validOut => validOut_1,
              tlastOut => tlastOut_1
              );

  u_Pong_Buffer : BurstDataBuffer_src_SinglePortRAM_generic
    GENERIC MAP( AddrWidth => 13,
                 DataWidth => 16
                 )
    PORT MAP( clk => clk,
              enb => clk_enable,
              din => dataIn,
              addr => ram1Addr,
              we => wrEn1,
              dout => Pong_Buffer_out1
              );

  u_Ping_Buffer : BurstDataBuffer_src_SinglePortRAM_generic
    GENERIC MAP( AddrWidth => 13,
                 DataWidth => 16
                 )
    PORT MAP( clk => clk,
              enb => clk_enable,
              din => dataIn,
              addr => ram0Addr,
              we => wrEn0,
              dout => Ping_Buffer_out1
              );

  enb <= clk_enable;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= bufferSelect;
      END IF;
    END IF;
  END PROCESS Delay_process;


  NOT_out1 <=  NOT Delay_out1;

  Pong_Buffer_out1_unsigned <= unsigned(Pong_Buffer_out1);

  Ping_Buffer_out1_unsigned <= unsigned(Ping_Buffer_out1);

  
  Switch_out1 <= Pong_Buffer_out1_unsigned WHEN NOT_out1 = '0' ELSE
      Ping_Buffer_out1_unsigned;

  dataOut <= std_logic_vector(Switch_out1);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= validOut_1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= tlastOut_1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  ce_out <= clk_enable;

  validOut <= Delay1_out1;

  tlastOut <= Delay2_out1;

END rtl;

