-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/axis_combine/BurstDataBuffer.vhd
-- Created: 2023-01-10 15:53:01
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: BurstDataBuffer
-- Source Path: BurstDataBuffer
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY BurstDataBuffer IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        AXI4_Stream_Master_TREADY         :   IN    std_logic;  -- ufix1
        AXI4_Stream_Slave_TDATA           :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Stream_Slave_TVALID          :   IN    std_logic;  -- ufix1
        AXI4_Stream_Slave_TLAST           :   IN    std_logic;  -- ufix1
        AXI4_Stream_Master_TDATA          :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Stream_Master_TVALID         :   OUT   std_logic;  -- ufix1
        AXI4_Stream_Master_TLAST          :   OUT   std_logic;  -- ufix1
        AXI4_Stream_Slave_TREADY          :   OUT   std_logic  -- ufix1
        );
END BurstDataBuffer;


ARCHITECTURE rtl OF BurstDataBuffer IS

  -- Component Declarations
  COMPONENT BurstDataBuffer_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT BurstDataBuffer_axi4_stream_slave
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          AXI4_Stream_Slave_TDATA         :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Stream_Slave_TVALID        :   IN    std_logic;  -- ufix1
          AXI4_Stream_Slave_TLAST         :   IN    std_logic;  -- ufix1
          auto_ready                      :   IN    std_logic;  -- ufix1
          AXI4_Stream_Slave_TREADY        :   OUT   std_logic;  -- ufix1
          user_data                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          user_valid                      :   OUT   std_logic;  -- ufix1
          user_TLAST                      :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT BurstDataBuffer_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          dataIn                          :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          validIn                         :   IN    std_logic;  -- ufix1
          tlastIn                         :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          dataOut                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          validOut                        :   OUT   std_logic;  -- ufix1
          tlastOut                        :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT BurstDataBuffer_axi4_stream_master
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          AXI4_Stream_Master_TREADY       :   IN    std_logic;  -- ufix1
          user_data                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          user_valid                      :   IN    std_logic;  -- ufix1
          user_TLAST                      :   IN    std_logic;  -- ufix1
          AXI4_Stream_Master_TDATA        :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Stream_Master_TVALID       :   OUT   std_logic;  -- ufix1
          AXI4_Stream_Master_TLAST        :   OUT   std_logic;  -- ufix1
          auto_ready                      :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : BurstDataBuffer_reset_sync
    USE ENTITY work.BurstDataBuffer_reset_sync(rtl);

  FOR ALL : BurstDataBuffer_axi4_stream_slave
    USE ENTITY work.BurstDataBuffer_axi4_stream_slave(rtl);

  FOR ALL : BurstDataBuffer_dut
    USE ENTITY work.BurstDataBuffer_dut(rtl);

  FOR ALL : BurstDataBuffer_axi4_stream_master
    USE ENTITY work.BurstDataBuffer_axi4_stream_master(rtl);

  -- Signals
  SIGNAL reset                            : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL tlastOut_sig                     : std_logic;  -- ufix1
  SIGNAL top_user_TLAST                   : std_logic;  -- ufix1
  SIGNAL validOut_sig                     : std_logic;  -- ufix1
  SIGNAL top_user_valid                   : std_logic;  -- ufix1
  SIGNAL top_user_TLAST_1                 : std_logic;  -- ufix1
  SIGNAL tlastIn_sig                      : std_logic;  -- ufix1
  SIGNAL top_user_valid_1                 : std_logic;  -- ufix1
  SIGNAL validIn_sig                      : std_logic;  -- ufix1
  SIGNAL auto_ready_axi4_stream_master    : std_logic;  -- ufix1
  SIGNAL top_user_data                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL auto_ready_dut_enb               : std_logic;  -- ufix1
  SIGNAL axi_enable                       : std_logic;  -- ufix1
  SIGNAL dut_enable                       : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL dataOut_sig                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL AXI4_Stream_Master_TDATA_tmp     : std_logic_vector(15 DOWNTO 0);  -- ufix16

BEGIN
  u_BurstDataBuffer_reset_sync_inst : BurstDataBuffer_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_cm,  -- ufix1
              reset_out => reset
              );

  u_BurstDataBuffer_axi4_stream_slave_inst : BurstDataBuffer_axi4_stream_slave
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              enb => const_1,
              AXI4_Stream_Slave_TDATA => AXI4_Stream_Slave_TDATA,  -- ufix16
              AXI4_Stream_Slave_TVALID => AXI4_Stream_Slave_TVALID,  -- ufix1
              AXI4_Stream_Slave_TLAST => AXI4_Stream_Slave_TLAST,  -- ufix1
              auto_ready => auto_ready_axi4_stream_master,  -- ufix1
              AXI4_Stream_Slave_TREADY => AXI4_Stream_Slave_TREADY,  -- ufix1
              user_data => top_user_data,  -- ufix16
              user_valid => top_user_valid_1,  -- ufix1
              user_TLAST => top_user_TLAST_1  -- ufix1
              );

  u_BurstDataBuffer_dut_inst : BurstDataBuffer_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              dut_enable => dut_enable,  -- ufix1
              dataIn => top_user_data,  -- ufix16
              validIn => validIn_sig,  -- ufix1
              tlastIn => tlastIn_sig,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              dataOut => dataOut_sig,  -- ufix16
              validOut => validOut_sig,  -- ufix1
              tlastOut => tlastOut_sig  -- ufix1
              );

  u_BurstDataBuffer_axi4_stream_master_inst : BurstDataBuffer_axi4_stream_master
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              enb => const_1,
              AXI4_Stream_Master_TREADY => AXI4_Stream_Master_TREADY,  -- ufix1
              user_data => dataOut_sig,  -- ufix16
              user_valid => top_user_valid,  -- ufix1
              user_TLAST => top_user_TLAST,  -- ufix1
              AXI4_Stream_Master_TDATA => AXI4_Stream_Master_TDATA_tmp,  -- ufix16
              AXI4_Stream_Master_TVALID => AXI4_Stream_Master_TVALID,  -- ufix1
              AXI4_Stream_Master_TLAST => AXI4_Stream_Master_TLAST,  -- ufix1
              auto_ready => auto_ready_axi4_stream_master  -- ufix1
              );

  const_1 <= '1';

  enb <= const_1;

  reset_cm <=  NOT IPCORE_RESETN;

  top_user_TLAST <= tlastOut_sig;

  top_user_valid <= validOut_sig;

  tlastIn_sig <= top_user_TLAST_1;

  validIn_sig <= top_user_valid_1;

  reg_process : PROCESS (IPCORE_CLK, reset)
  BEGIN
    IF reset = '1' THEN
      auto_ready_dut_enb <= '0';
    ELSIF IPCORE_CLK'EVENT AND IPCORE_CLK = '1' THEN
      IF enb = '1' THEN
        auto_ready_dut_enb <= auto_ready_axi4_stream_master;
      END IF;
    END IF;
  END PROCESS reg_process;


  dut_enable <= axi_enable AND auto_ready_dut_enb;

  AXI4_Stream_Master_TDATA <= AXI4_Stream_Master_TDATA_tmp;

END rtl;

