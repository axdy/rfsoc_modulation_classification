-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/amc_model_w16a16/amc_cnn_snr_src_SinglePortRAM_generic_block4.vhd
-- Created: 2023-05-29 02:49:12
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: amc_cnn_snr_src_SinglePortRAM_generic_block4
-- Source Path: amc_model_w16a16/DUT HDL/Dense Layer 2/Dense Layer 2/Weight Storage 3/SinglePortRAM_generic
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY amc_cnn_snr_src_SinglePortRAM_generic_block4 IS
  GENERIC( AddrWidth                      : integer := 1;
           DataWidth                      : integer := 1
           );
  PORT( clk                               :   IN    std_logic;
        enb                               :   IN    std_logic;
        din                               :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
        addr                              :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
        we                                :   IN    std_logic;  -- ufix1
        dout                              :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
        );
END amc_cnn_snr_src_SinglePortRAM_generic_block4;


ARCHITECTURE rtl OF amc_cnn_snr_src_SinglePortRAM_generic_block4 IS

  -- Local Type Definitions
  TYPE ram_type IS ARRAY (2**AddrWidth - 1 DOWNTO 0) of std_logic_vector(DataWidth - 1 DOWNTO 0);

  -- Signals
  SIGNAL ram                              : ram_type := (B"000011111011000000", B"000000001010111110", B"000001000111110110", B"110000001010101100", B"000000111001101010", B"110111101011101101", B"110111001000110011", B"000101100111110001", B"111100101111000110", B"000010101101110100", B"111100110010111110",
                                                        B"000111100000000011", B"000100111111010001", B"110011011001111100", B"000000000000000000", B"111011100100101011", B"000000101100001100", B"110000010001000110", B"001000101011000001", B"111110100110010000", B"111110110011100010", B"001000010010011001",
                                                        B"001011101011000001", B"110100110100001101", B"001000010010101101", B"110111011010010001", B"110011011010100000", B"110000110111001000", B"000000000000000000", B"000100000100111011", B"111011101011110011", B"111110101101101100", B"111010010001100111",
                                                        B"111110110010000000", B"111111101011001100", B"000000000010111010", B"001000111000101101", B"000011100101100100", B"000011000001011000", B"111000011001010111", B"110111100000110011", B"111011111010000001", B"111100111110001000", B"000001100001001010",
                                                        B"111010001111011011", B"111100111001110100", B"000100100111101001", B"110111101101111101", B"000010100000101000", B"000101110011000111", B"000110000111101001", B"000000000100110010", B"001001001111101101", B"000111010111110001", B"110111110001111101",
                                                        B"000000011101110010", B"000010000000110010", B"111110011010001010", B"111101011100010010", B"111111010000100000", B"000101000000110111", B"111110110001001010", B"111010101011011011", B"111111110111100000", B"110011100010000010", B"000000000000000000",
                                                        B"000011010000100100", B"110100001011000111", B"000110111110011101", B"001001100110001101", B"000100010111001111", B"000010000010010110", B"111010110000100001", B"000111111111011101", B"110101100000011111", B"000000100110010100", B"111010001000011001",
                                                        B"110001101100110010", B"000111110011110001", B"000000000011100010", B"111010110011110101", B"000011000001100100", B"000100011100101101", B"000001110111110100", B"111010110011000111", B"110110010110110001", B"111100001110010010", B"000001111001010000",
                                                        B"000100100101000011", B"110100000011001001", B"000011000101011000", B"000100000001000011", B"111011100111101111", B"111101011000110100", B"000000100100110010", B"111001100101101011", B"000010000000101010", B"001001001001110001", B"001000100010111101",
                                                        B"000111000111000001", B"110111001101011101", B"000000001001111010", B"111100100001110000", B"111111101000011000", B"000000100000110000", B"001000101101010111", B"111011001011010111", B"111110100110100000", B"111001011100100011", B"111111100001000110",
                                                        B"111111110001000000", B"111001111010011011", B"000000101111000110", B"000000010110011000", B"111100000101010100", B"000100101000111111", B"000111101100000001", B"001001110000111111", B"000111000100001011", B"111110011010110110", B"111011100000111101",
                                                        B"111111110001101100", B"111011111011010101", B"111100010001011100", B"000110100011111111", B"111101110100110010", B"001001001100100011", B"000001111111111000");
  SIGNAL data_int                         : std_logic_vector(DataWidth - 1 DOWNTO 0) := B"000001111111111000";
  SIGNAL addr_unsigned                    : unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width

BEGIN
  addr_unsigned <= unsigned(addr);

  SinglePortRAM_generic_process: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF enb = '1' THEN
        IF we = '1' THEN
          ram(to_integer(addr_unsigned)) <= din;
          data_int <= din;
        ELSE
          data_int <= ram(to_integer(addr_unsigned));
        END IF;
      END IF;
    END IF;
  END PROCESS SinglePortRAM_generic_process;

  dout <= data_int;

END rtl;

