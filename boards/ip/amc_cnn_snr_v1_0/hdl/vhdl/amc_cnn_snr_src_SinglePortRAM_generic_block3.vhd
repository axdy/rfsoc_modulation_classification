-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/amc_model_w16a16/amc_cnn_snr_src_SinglePortRAM_generic_block3.vhd
-- Created: 2023-05-29 02:49:12
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: amc_cnn_snr_src_SinglePortRAM_generic_block3
-- Source Path: amc_model_w16a16/DUT HDL/Dense Layer 2/Dense Layer 2/Weight Storage 2/SinglePortRAM_generic
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY amc_cnn_snr_src_SinglePortRAM_generic_block3 IS
  GENERIC( AddrWidth                      : integer := 1;
           DataWidth                      : integer := 1
           );
  PORT( clk                               :   IN    std_logic;
        enb                               :   IN    std_logic;
        din                               :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
        addr                              :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
        we                                :   IN    std_logic;  -- ufix1
        dout                              :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
        );
END amc_cnn_snr_src_SinglePortRAM_generic_block3;


ARCHITECTURE rtl OF amc_cnn_snr_src_SinglePortRAM_generic_block3 IS

  -- Local Type Definitions
  TYPE ram_type IS ARRAY (2**AddrWidth - 1 DOWNTO 0) of std_logic_vector(DataWidth - 1 DOWNTO 0);

  -- Signals
  SIGNAL ram                              : ram_type := (B"000011001010010110", B"111111111000100100", B"000000000101110100", B"110010111000010010", B"000001100011111000", B"111000000111000111", B"110111101010011011", B"000100001000101101", B"111100011011111000", B"000001101000110100", B"111111110101010100",
                                                        B"000110110110111111", B"000100010111100101", B"110100101101001011", B"000000000000000000", B"111100000000111110", B"000010101001101010", B"110001011111100000", B"000111100111101111", B"000000100000101010", B"111110101010110100", B"000111000010011011",
                                                        B"001011101110110101", B"110100011000010111", B"001000011001010101", B"111000101001001011", B"110011111000100100", B"110011010101010100", B"000000000000000000", B"000011011100100100", B"111011101001000011", B"111110000001111110", B"111010111101110011",
                                                        B"111110001011010110", B"000001000110000000", B"000001011000100100", B"000111101001011011", B"000011010101111110", B"000011010001101110", B"111011100110101111", B"110111101110111111", B"111100000010111000", B"111110000011001010", B"000001111101111000",
                                                        B"111001111011110111", B"111100100010000110", B"000011101100010100", B"110111101010100001", B"000100101010010111", B"000100110101011101", B"000101101100111011", B"000000001010111010", B"000111111111110011", B"000110100001011001", B"111000000100011111",
                                                        B"000000010100001100", B"000001110011001110", B"111110111001100010", B"111101010011110110", B"111111010101111010", B"000100000000100101", B"111110101001011110", B"111010011111110111", B"111111011110011100", B"110100010011011001", B"000000000000000000",
                                                        B"000010010110011100", B"110100011000010011", B"000110000100000001", B"001000100110100111", B"000100001111110001", B"000000110110000110", B"111010100001100101", B"000110110111110001", B"110101101101010001", B"000000110001010110", B"111011000000010001",
                                                        B"110001011001111110", B"000111000000001101", B"111111100101110010", B"111011101100111101", B"000010000001011110", B"000101010100010111", B"000001101011101110", B"111010100100101011", B"110111011110010111", B"111011110010011001", B"000001011000001100",
                                                        B"000100110011000111", B"110011110011101110", B"000011100110101000", B"000011000101001110", B"111011101000111111", B"111101001101010010", B"000000100101111000", B"111001101111010001", B"000011000110100010", B"001000110000010101", B"000111101111000101",
                                                        B"000110111111100101", B"110110111101010011", B"111111000001101000", B"111101100000111010", B"111110001110001010", B"111111101001001000", B"000111011101011111", B"111010111000001001", B"111110110100011000", B"111001111000111111", B"111111001101011010",
                                                        B"000001000010000100", B"111001011001000101", B"000001001110000100", B"000000011010100010", B"111011100010101101", B"000011101110001110", B"000110101010001011", B"001000110001010001", B"000110110111011101", B"111100111011101110", B"111011101110001011",
                                                        B"111111111011010110", B"111100001001101000", B"111100011011001100", B"000101010010000011", B"111101000111011110", B"000111110001011111", B"000001001011011110");
  SIGNAL data_int                         : std_logic_vector(DataWidth - 1 DOWNTO 0) := B"000001001011011110";
  SIGNAL addr_unsigned                    : unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width

BEGIN
  addr_unsigned <= unsigned(addr);

  SinglePortRAM_generic_process: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF enb = '1' THEN
        IF we = '1' THEN
          ram(to_integer(addr_unsigned)) <= din;
          data_int <= din;
        ELSE
          data_int <= ram(to_integer(addr_unsigned));
        END IF;
      END IF;
    END IF;
  END PROCESS SinglePortRAM_generic_process;

  dout <= data_int;

END rtl;

