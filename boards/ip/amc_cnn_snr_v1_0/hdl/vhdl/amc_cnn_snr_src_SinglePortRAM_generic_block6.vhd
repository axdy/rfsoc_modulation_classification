-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/amc_model_w16a16/amc_cnn_snr_src_SinglePortRAM_generic_block6.vhd
-- Created: 2023-05-29 02:49:12
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: amc_cnn_snr_src_SinglePortRAM_generic_block6
-- Source Path: amc_model_w16a16/DUT HDL/Dense Layer 2/Dense Layer 2/Weight Storage 5/SinglePortRAM_generic
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY amc_cnn_snr_src_SinglePortRAM_generic_block6 IS
  GENERIC( AddrWidth                      : integer := 1;
           DataWidth                      : integer := 1
           );
  PORT( clk                               :   IN    std_logic;
        enb                               :   IN    std_logic;
        din                               :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
        addr                              :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
        we                                :   IN    std_logic;  -- ufix1
        dout                              :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
        );
END amc_cnn_snr_src_SinglePortRAM_generic_block6;


ARCHITECTURE rtl OF amc_cnn_snr_src_SinglePortRAM_generic_block6 IS

  -- Local Type Definitions
  TYPE ram_type IS ARRAY (2**AddrWidth - 1 DOWNTO 0) of std_logic_vector(DataWidth - 1 DOWNTO 0);

  -- Signals
  SIGNAL ram                              : ram_type := (B"000111010000000101", B"111111101000011100", B"000011110110001010", B"110100111110100101", B"000111001000000101", B"110011011111011000", B"000100101011101101", B"000111011100010111", B"000000011101011010", B"000101101010011101", B"001110110011101100",
                                                        B"001001111000101111", B"000110110001011001", B"111001001001111011", B"000000000000000000", B"110100011011110101", B"000110001011101011", B"000110110101010001", B"110111111100001001", B"110000000010111110", B"111100001010001110", B"001011110101110011",
                                                        B"001010000001011111", B"001111111010011110", B"000001110011110110", B"000111110001000101", B"000100000110110011", B"111100100010101010", B"000000000000000000", B"000110110101011111", B"111101100100100000", B"000010011001110100", B"110110101100111001",
                                                        B"000001101100111100", B"000100011111101011", B"110100100100100111", B"001101000010111000", B"111011100101110111", B"110010000010100010", B"111101101010110110", B"111100001010001010", B"111100010010110010", B"111111101001011110", B"111111000001011100",
                                                        B"111001111100010111", B"111011001000111011", B"000110000000101101", B"110010001000111010", B"111111101111000110", B"001001001100100001", B"000011101110010010", B"111100100001111100", B"001100100011100000", B"001010100011001111", B"111001001000111111",
                                                        B"111100101000010100", B"000011010001110110", B"111010101000101101", B"111101011011001000", B"111011000010010111", B"111001101010011001", B"111101000100111010", B"000111010010001111", B"001100101110010110", B"110111101001110101", B"000000000000000000",
                                                        B"000110101110001101", B"001000011100011001", B"001001110100010111", B"001100010001000000", B"000010110011000010", B"000101011001101011", B"111011111001000111", B"001010011010000001", B"110110100100111001", B"110110000010011101", B"111101000111001100",
                                                        B"001101011100111010", B"001010101010011101", B"111111001011111110", B"001000001000111011", B"000101000011111001", B"111100010001111100", B"000000111011101010", B"110110100011110011", B"110100100010010101", B"000010101010110110", B"000001001011011000",
                                                        B"111010111110011111", B"110111111110101001", B"001001110110000111", B"000111011001110111", B"111001110010000111", B"000001110111100000", B"000001010100010000", B"111010000001111001", B"110100000001111111", B"001010110000101011", B"111011100101010111",
                                                        B"111100010100101100", B"001111111101101110", B"111111000110111000", B"110101001001100111", B"111011111011011111", B"000100111101100011", B"001010011101110011", B"110111100011011011", B"111001001111000011", B"111000001010100011", B"001100011110010100",
                                                        B"000110100011110101", B"000110100110001011", B"000011110111010110", B"111010111000100111", B"111010101101000111", B"001000110100101001", B"001001101011000001", B"001100100100011010", B"000001110000100010", B"111110101111100000", B"111101111000110010",
                                                        B"111001111100010011", B"111011001001011001", B"001100011100010000", B"001010111001101011", B"111100011110011000", B"001100001000110000", B"000101110110110101");
  SIGNAL data_int                         : std_logic_vector(DataWidth - 1 DOWNTO 0) := B"000101110110110101";
  SIGNAL addr_unsigned                    : unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width

BEGIN
  addr_unsigned <= unsigned(addr);

  SinglePortRAM_generic_process: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF enb = '1' THEN
        IF we = '1' THEN
          ram(to_integer(addr_unsigned)) <= din;
          data_int <= din;
        ELSE
          data_int <= ram(to_integer(addr_unsigned));
        END IF;
      END IF;
    END IF;
  END PROCESS SinglePortRAM_generic_process;

  dout <= data_int;

END rtl;

