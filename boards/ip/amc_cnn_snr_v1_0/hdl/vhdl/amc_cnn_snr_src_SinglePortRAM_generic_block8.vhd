-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/amc_model_w16a16/amc_cnn_snr_src_SinglePortRAM_generic_block8.vhd
-- Created: 2023-05-29 02:49:12
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: amc_cnn_snr_src_SinglePortRAM_generic_block8
-- Source Path: amc_model_w16a16/DUT HDL/Dense Layer 2/Dense Layer 2/Weight Storage 7/SinglePortRAM_generic
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY amc_cnn_snr_src_SinglePortRAM_generic_block8 IS
  GENERIC( AddrWidth                      : integer := 1;
           DataWidth                      : integer := 1
           );
  PORT( clk                               :   IN    std_logic;
        enb                               :   IN    std_logic;
        din                               :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
        addr                              :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
        we                                :   IN    std_logic;  -- ufix1
        dout                              :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
        );
END amc_cnn_snr_src_SinglePortRAM_generic_block8;


ARCHITECTURE rtl OF amc_cnn_snr_src_SinglePortRAM_generic_block8 IS

  -- Local Type Definitions
  TYPE ram_type IS ARRAY (2**AddrWidth - 1 DOWNTO 0) of std_logic_vector(DataWidth - 1 DOWNTO 0);

  -- Signals
  SIGNAL ram                              : ram_type := (B"111101010110101000", B"001110101100100000", B"111001101000001111", B"001111111101000010", B"110000000001000110", B"000110011100010011", B"110100110110001111", B"111101110001110100", B"001111111111111010", B"110111111111101011", B"001111010011100010",
                                                        B"111111100011010100", B"111110011001100010", B"001111111111100010", B"000000000000000000", B"001000011001001101", B"110000000110010110", B"000101101011100111", B"000110011111010011", B"110000100100111000", B"001101110001010000", B"000010010011101110",
                                                        B"001101000011010000", B"110111010000101111", B"000110010110111111", B"111011100010010011", B"111001001100010001", B"001111111011001010", B"000000000000000000", B"111101100100001100", B"110000111101001100", B"110111111100010101", B"001000101100010011",
                                                        B"001100001011000010", B"110111101101000011", B"110000000011101000", B"111111111010011010", B"111101110110110010", B"000100010000010011", B"111100111111100000", B"110001001110011100", B"111000010111001011", B"110110111101010111", B"001111111010000100",
                                                        B"001011101010111101", B"111000011001101001", B"111010100110011001", B"001111111100011100", B"001010001001001101", B"000010101101100010", B"110101100011111111", B"111011010011000101", B"000001111001001010", B"000001001101101110", B"001000010001111001",
                                                        B"001111111100100110", B"110111000010010011", B"001111110101110010", B"111000011000111111", B"001111100101100110", B"111101001011100110", B"110000000001000010", B"111000110011111011", B"111111100011101110", B"000011101001100010", B"000000000000000000",
                                                        B"111100010010010000", B"110101100010001001", B"111111101101000100", B"000010101010100000", B"110011011011010110", B"111010101011000101", B"110100111100111011", B"000001000100010110", B"001010101100101011", B"000011011101111110", B"001111111100101010",
                                                        B"110011100110000100", B"000100000101010001", B"111010011101110001", B"001011001010110101", B"111000100001110001", B"111110000110000100", B"110001101001010000", B"110111101001001101", B"010000000000000000", B"111000000101011001", B"110000000101110100",
                                                        B"111101001011001010", B"001111111111001100", B"000001001010100100", B"111101110001011010", B"110110010000110001", B"110111110110000111", B"001111000101000100", B"110101110010110011", B"110010000001111010", B"111011111110110101", B"000000001110101000",
                                                        B"111101100111011000", B"111011000111110111", B"110011111001000000", B"000000000101000000", B"010000000000000000", B"110011110001111010", B"001001110101010111", B"001000111100101001", B"110000000000110110", B"110110000000101101", B"111010101100001101",
                                                        B"111001010101011001", B"111000111001100111", B"001111111111011100", B"001111000010100000", B"111010001010101111", B"111111111111010110", B"000000000010110110", B"000011111001001110", B"110011110101101110", B"110000001011010010", B"111000110110010111",
                                                        B"001111111000111100", B"111000000010010101", B"111111001100000000", B"000011100001110000", B"110111010001000111", B"000101100100001001", B"111011001000011001");
  SIGNAL data_int                         : std_logic_vector(DataWidth - 1 DOWNTO 0) := B"111011001000011001";
  SIGNAL addr_unsigned                    : unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width

BEGIN
  addr_unsigned <= unsigned(addr);

  SinglePortRAM_generic_process: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF enb = '1' THEN
        IF we = '1' THEN
          ram(to_integer(addr_unsigned)) <= din;
          data_int <= din;
        ELSE
          data_int <= ram(to_integer(addr_unsigned));
        END IF;
      END IF;
    END IF;
  END PROCESS SinglePortRAM_generic_process;

  dout <= data_int;

END rtl;

