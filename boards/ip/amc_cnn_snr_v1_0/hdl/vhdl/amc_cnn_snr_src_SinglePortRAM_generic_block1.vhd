-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/amc_model_w16a16/amc_cnn_snr_src_SinglePortRAM_generic_block1.vhd
-- Created: 2023-05-29 02:49:12
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: amc_cnn_snr_src_SinglePortRAM_generic_block1
-- Source Path: amc_model_w16a16/DUT HDL/Dense Layer 2/Dense Layer 2/Weight Storage 0/SinglePortRAM_generic
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY amc_cnn_snr_src_SinglePortRAM_generic_block1 IS
  GENERIC( AddrWidth                      : integer := 1;
           DataWidth                      : integer := 1
           );
  PORT( clk                               :   IN    std_logic;
        enb                               :   IN    std_logic;
        din                               :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
        addr                              :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
        we                                :   IN    std_logic;  -- ufix1
        dout                              :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
        );
END amc_cnn_snr_src_SinglePortRAM_generic_block1;


ARCHITECTURE rtl OF amc_cnn_snr_src_SinglePortRAM_generic_block1 IS

  -- Local Type Definitions
  TYPE ram_type IS ARRAY (2**AddrWidth - 1 DOWNTO 0) of std_logic_vector(DataWidth - 1 DOWNTO 0);

  -- Signals
  SIGNAL ram                              : ram_type := (B"111010011011001001", B"111111100100010100", B"111000010010111101", B"000111100000011001", B"000010101011100000", B"111010000000010011", B"000100011111110011", B"111001101101111101", B"111011100111000011", B"111010010101111101", B"111000110001010101",
                                                        B"111110100100101000", B"111011001001000111", B"000100000111110001", B"000000000000000000", B"111000101111101011", B"001101101011100000", B"110111000001010101", B"110000000011001000", B"001010001010100111", B"111100110010000000", B"111110011011001100",
                                                        B"001100001011111110", B"110101100000000001", B"001000111111110001", B"110111100011000111", B"110100000010001001", B"001000001101110011", B"000000000000000000", B"111001111000110001", B"000010010001111010", B"110101011101010101", B"111100110110101110",
                                                        B"111100110110101110", B"001101010110011010", B"001000000111101001", B"111011000110011001", B"000110001110101011", B"111011010110010001", B"001010111001111001", B"111000110000000001", B"111100010010110000", B"000101010110100001", B"000001010011011010",
                                                        B"111100011101000110", B"111011101011010001", B"111010011111100001", B"111101011000010110", B"000011010010110100", B"111100001010011000", B"000011100100011100", B"111111001110100010", B"111110111111010110", B"111101000100010000", B"111011010110110011",
                                                        B"000000001010011000", B"111101101011001000", B"111101110111111010", B"111101001100000100", B"111101100001110100", B"000010000100110010", B"111111011100001010", B"110011110101001000", B"111110100011100010", B"110111111101100101", B"000000000000000000",
                                                        B"111001110101101101", B"110110010000110111", B"111100000010101010", B"111111100110110100", B"000001101010000100", B"111000100001111011", B"111001001101010101", B"111110000111010010", B"110111011000010111", B"000001110000111000", B"000011010110111000",
                                                        B"110100011000000101", B"111100111101100110", B"111110011101010100", B"110000000001011010", B"111000110111001101", B"000110110100011011", B"000000100001100110", B"111011111011000111", B"000000011111011010", B"111011100101000101", B"111111111001001010",
                                                        B"111110011011110000", B"110110000101000101", B"000001011011101000", B"111001000000001101", B"111100000101101000", B"111100111100100100", B"111111000010111000", B"111010000110110111", B"001000011011101101", B"111010101100110111", B"000111111100010001",
                                                        B"000110010100000111", B"111001010001010101", B"110011110111101000", B"111011011101110101", B"111100100100110100", B"110101010000010101", B"111111011100000110", B"111010000111011001", B"000011001001101010", B"111001010110101111", B"111111010001101000",
                                                        B"001010101100100001", B"111000101001100011", B"000001111100101010", B"000000100100110100", B"111011000101100011", B"111001001011110101", B"111101001100010100", B"111111110111101010", B"000100110000010101", B"001111110111111100", B"111100001100110000",
                                                        B"111101110100110010", B"111011001000010111", B"111100010111001000", B"111010111011110001", B"111100111001110100", B"111011110101011001", B"111010011011101011");
  SIGNAL data_int                         : std_logic_vector(DataWidth - 1 DOWNTO 0) := B"111010011011101011";
  SIGNAL addr_unsigned                    : unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width

BEGIN
  addr_unsigned <= unsigned(addr);

  SinglePortRAM_generic_process: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF enb = '1' THEN
        IF we = '1' THEN
          ram(to_integer(addr_unsigned)) <= din;
          data_int <= din;
        ELSE
          data_int <= ram(to_integer(addr_unsigned));
        END IF;
      END IF;
    END IF;
  END PROCESS SinglePortRAM_generic_process;

  dout <= data_int;

END rtl;

