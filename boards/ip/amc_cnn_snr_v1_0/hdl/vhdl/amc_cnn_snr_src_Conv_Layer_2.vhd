-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/amc_model_w16a16/amc_cnn_snr_src_Conv_Layer_2.vhd
-- Created: 2023-05-29 02:49:15
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: amc_cnn_snr_src_Conv_Layer_2
-- Source Path: amc_model_w16a16/DUT HDL/Conv Layer 2
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.amc_cnn_snr_src_DUT_HDL_pkg.ALL;

ENTITY amc_cnn_snr_src_Conv_Layer_2 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        vectorIn                          :   IN    vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En8 [64]
        validIn                           :   IN    std_logic;
        ready_nx_layer                    :   IN    std_logic;
        vectorOut                         :   OUT   vector_of_std_logic_vector16(0 TO 15);  -- sfix16_En4 [16]
        validOut                          :   OUT   std_logic;
        ready_prev                        :   OUT   std_logic
        );
END amc_cnn_snr_src_Conv_Layer_2;


ARCHITECTURE rtl OF amc_cnn_snr_src_Conv_Layer_2 IS

  -- Component Declarations
  COMPONENT amc_cnn_snr_src_Buffer_and_Sliding_Window_State_Machine_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          validIn                         :   IN    std_logic;
          ready_nx_layer                  :   IN    std_logic;
          wr_addr                         :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
          wr_en                           :   OUT   std_logic;
          rd_addr                         :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
          rd_row_idx                      :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
          validOut                        :   OUT   std_logic;
          ready_prev                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT amc_cnn_snr_src_BRAM_Storage_Layer_2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          vectorIn                        :   IN    vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En8 [64]
          wr_addr                         :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          validIn                         :   IN    std_logic;
          vectorOut                       :   OUT   vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En8 [64]
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT amc_cnn_snr_src_Vector_Slice_Selection
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          frameIn                         :   IN    vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En8 [64]
          validIn                         :   IN    std_logic;
          frameOut                        :   OUT   vector_of_std_logic_vector16(0 TO 15);  -- sfix16_En8 [16]
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT amc_cnn_snr_src_Filter_Matrix_Multiplier1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          samplesIn                       :   IN    vector_of_std_logic_vector16(0 TO 15);  -- sfix16_En8 [16]
          validIn                         :   IN    std_logic;
          vectorOut                       :   OUT   vector_of_std_logic_vector16(0 TO 15);  -- sfix16_En4 [16]
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT amc_cnn_snr_src_ReLU_block
    PORT( in_rsvd                         :   IN    vector_of_std_logic_vector16(0 TO 15);  -- sfix16_En4 [16]
          out_rsvd                        :   OUT   vector_of_std_logic_vector16(0 TO 15)  -- sfix16_En4 [16]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : amc_cnn_snr_src_Buffer_and_Sliding_Window_State_Machine_block
    USE ENTITY work.amc_cnn_snr_src_Buffer_and_Sliding_Window_State_Machine_block(rtl);

  FOR ALL : amc_cnn_snr_src_BRAM_Storage_Layer_2
    USE ENTITY work.amc_cnn_snr_src_BRAM_Storage_Layer_2(rtl);

  FOR ALL : amc_cnn_snr_src_Vector_Slice_Selection
    USE ENTITY work.amc_cnn_snr_src_Vector_Slice_Selection(rtl);

  FOR ALL : amc_cnn_snr_src_Filter_Matrix_Multiplier1
    USE ENTITY work.amc_cnn_snr_src_Filter_Matrix_Multiplier1(rtl);

  FOR ALL : amc_cnn_snr_src_ReLU_block
    USE ENTITY work.amc_cnn_snr_src_ReLU_block(rtl);

  -- Signals
  SIGNAL wr_addr                          : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL wr_en                            : std_logic;
  SIGNAL rd_addr                          : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL rd_row_idx                       : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL validOut_1                       : std_logic;
  SIGNAL gemm2_samples                    : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL gemm2_valid                      : std_logic;
  SIGNAL Vector_Slice_Selection_out1      : vector_of_std_logic_vector16(0 TO 15);  -- ufix16 [16]
  SIGNAL Vector_Slice_Selection_out2      : std_logic;
  SIGNAL Vector_Slice_Selection_out1_signed : vector_of_signed16(0 TO 15);  -- sfix16_En8 [16]
  SIGNAL Pipeline_Delay11_out1            : vector_of_signed16(0 TO 15);  -- sfix16_En8 [16]
  SIGNAL Pipeline_Delay11_out1_1          : vector_of_std_logic_vector16(0 TO 15);  -- ufix16 [16]
  SIGNAL Pipeline_Delay12_out1            : std_logic;
  SIGNAL vectorOut_1                      : vector_of_std_logic_vector16(0 TO 15);  -- ufix16 [16]
  SIGNAL Filter_Matrix_Multiplier1_out2   : std_logic;
  SIGNAL vectorOut_signed                 : vector_of_signed16(0 TO 15);  -- sfix16_En4 [16]
  SIGNAL din                              : vector_of_signed16(0 TO 15);  -- sfix16_En4 [16]
  SIGNAL din_1                            : vector_of_std_logic_vector16(0 TO 15);  -- ufix16 [16]
  SIGNAL out_rsvd                         : vector_of_std_logic_vector16(0 TO 15);  -- ufix16 [16]
  SIGNAL out_signed                       : vector_of_signed16(0 TO 15);  -- sfix16_En4 [16]
  SIGNAL Pipeline_Delay6_out1             : vector_of_signed16(0 TO 15);  -- sfix16_En4 [16]
  SIGNAL Pipeline_Delay5_reg              : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Pipeline_Delay5_reg_next         : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Pipeline_Delay5_out1             : std_logic;

BEGIN
  -- Work on getting vector output from BRAM Storage Layer 2

  u_Buffer_and_Sliding_Window_State_Machine : amc_cnn_snr_src_Buffer_and_Sliding_Window_State_Machine_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              validIn => validIn,
              ready_nx_layer => ready_nx_layer,
              wr_addr => wr_addr,  -- ufix9
              wr_en => wr_en,
              rd_addr => rd_addr,  -- ufix9
              rd_row_idx => rd_row_idx,  -- ufix7
              validOut => validOut_1,
              ready_prev => ready_prev
              );

  u_BRAM_Storage_Layer_2 : amc_cnn_snr_src_BRAM_Storage_Layer_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              vectorIn => vectorIn,  -- sfix16_En8 [64]
              wr_addr => wr_addr,  -- ufix9
              wr_en => wr_en,
              rd_addr => rd_addr,  -- ufix9
              validIn => validOut_1,
              vectorOut => gemm2_samples,  -- sfix16_En8 [64]
              validOut => gemm2_valid
              );

  u_Vector_Slice_Selection : amc_cnn_snr_src_Vector_Slice_Selection
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              frameIn => gemm2_samples,  -- sfix16_En8 [64]
              validIn => gemm2_valid,
              frameOut => Vector_Slice_Selection_out1,  -- sfix16_En8 [16]
              validOut => Vector_Slice_Selection_out2
              );

  u_Filter_Matrix_Multiplier1 : amc_cnn_snr_src_Filter_Matrix_Multiplier1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              samplesIn => Pipeline_Delay11_out1_1,  -- sfix16_En8 [16]
              validIn => Pipeline_Delay12_out1,
              vectorOut => vectorOut_1,  -- sfix16_En4 [16]
              validOut => Filter_Matrix_Multiplier1_out2
              );

  u_ReLU : amc_cnn_snr_src_ReLU_block
    PORT MAP( in_rsvd => din_1,  -- sfix16_En4 [16]
              out_rsvd => out_rsvd  -- sfix16_En4 [16]
              );

  outputgen5: FOR k IN 0 TO 15 GENERATE
    Vector_Slice_Selection_out1_signed(k) <= signed(Vector_Slice_Selection_out1(k));
  END GENERATE;

  Pipeline_Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Pipeline_Delay11_out1(0) <= to_signed(16#0000#, 16);
        Pipeline_Delay11_out1(1) <= to_signed(16#0000#, 16);
        Pipeline_Delay11_out1(2) <= to_signed(16#0000#, 16);
        Pipeline_Delay11_out1(3) <= to_signed(16#0000#, 16);
        Pipeline_Delay11_out1(4) <= to_signed(16#0000#, 16);
        Pipeline_Delay11_out1(5) <= to_signed(16#0000#, 16);
        Pipeline_Delay11_out1(6) <= to_signed(16#0000#, 16);
        Pipeline_Delay11_out1(7) <= to_signed(16#0000#, 16);
        Pipeline_Delay11_out1(8) <= to_signed(16#0000#, 16);
        Pipeline_Delay11_out1(9) <= to_signed(16#0000#, 16);
        Pipeline_Delay11_out1(10) <= to_signed(16#0000#, 16);
        Pipeline_Delay11_out1(11) <= to_signed(16#0000#, 16);
        Pipeline_Delay11_out1(12) <= to_signed(16#0000#, 16);
        Pipeline_Delay11_out1(13) <= to_signed(16#0000#, 16);
        Pipeline_Delay11_out1(14) <= to_signed(16#0000#, 16);
        Pipeline_Delay11_out1(15) <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Pipeline_Delay11_out1(0) <= Vector_Slice_Selection_out1_signed(0);
        Pipeline_Delay11_out1(1) <= Vector_Slice_Selection_out1_signed(1);
        Pipeline_Delay11_out1(2) <= Vector_Slice_Selection_out1_signed(2);
        Pipeline_Delay11_out1(3) <= Vector_Slice_Selection_out1_signed(3);
        Pipeline_Delay11_out1(4) <= Vector_Slice_Selection_out1_signed(4);
        Pipeline_Delay11_out1(5) <= Vector_Slice_Selection_out1_signed(5);
        Pipeline_Delay11_out1(6) <= Vector_Slice_Selection_out1_signed(6);
        Pipeline_Delay11_out1(7) <= Vector_Slice_Selection_out1_signed(7);
        Pipeline_Delay11_out1(8) <= Vector_Slice_Selection_out1_signed(8);
        Pipeline_Delay11_out1(9) <= Vector_Slice_Selection_out1_signed(9);
        Pipeline_Delay11_out1(10) <= Vector_Slice_Selection_out1_signed(10);
        Pipeline_Delay11_out1(11) <= Vector_Slice_Selection_out1_signed(11);
        Pipeline_Delay11_out1(12) <= Vector_Slice_Selection_out1_signed(12);
        Pipeline_Delay11_out1(13) <= Vector_Slice_Selection_out1_signed(13);
        Pipeline_Delay11_out1(14) <= Vector_Slice_Selection_out1_signed(14);
        Pipeline_Delay11_out1(15) <= Vector_Slice_Selection_out1_signed(15);
      END IF;
    END IF;
  END PROCESS Pipeline_Delay11_process;


  outputgen4: FOR k IN 0 TO 15 GENERATE
    Pipeline_Delay11_out1_1(k) <= std_logic_vector(Pipeline_Delay11_out1(k));
  END GENERATE;

  Pipeline_Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Pipeline_Delay12_out1 <= '0';
      ELSIF enb = '1' THEN
        Pipeline_Delay12_out1 <= Vector_Slice_Selection_out2;
      END IF;
    END IF;
  END PROCESS Pipeline_Delay12_process;


  outputgen3: FOR k IN 0 TO 15 GENERATE
    vectorOut_signed(k) <= signed(vectorOut_1(k));
  END GENERATE;

  Pipeline_Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        din(0) <= to_signed(16#0000#, 16);
        din(1) <= to_signed(16#0000#, 16);
        din(2) <= to_signed(16#0000#, 16);
        din(3) <= to_signed(16#0000#, 16);
        din(4) <= to_signed(16#0000#, 16);
        din(5) <= to_signed(16#0000#, 16);
        din(6) <= to_signed(16#0000#, 16);
        din(7) <= to_signed(16#0000#, 16);
        din(8) <= to_signed(16#0000#, 16);
        din(9) <= to_signed(16#0000#, 16);
        din(10) <= to_signed(16#0000#, 16);
        din(11) <= to_signed(16#0000#, 16);
        din(12) <= to_signed(16#0000#, 16);
        din(13) <= to_signed(16#0000#, 16);
        din(14) <= to_signed(16#0000#, 16);
        din(15) <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din(0) <= vectorOut_signed(0);
        din(1) <= vectorOut_signed(1);
        din(2) <= vectorOut_signed(2);
        din(3) <= vectorOut_signed(3);
        din(4) <= vectorOut_signed(4);
        din(5) <= vectorOut_signed(5);
        din(6) <= vectorOut_signed(6);
        din(7) <= vectorOut_signed(7);
        din(8) <= vectorOut_signed(8);
        din(9) <= vectorOut_signed(9);
        din(10) <= vectorOut_signed(10);
        din(11) <= vectorOut_signed(11);
        din(12) <= vectorOut_signed(12);
        din(13) <= vectorOut_signed(13);
        din(14) <= vectorOut_signed(14);
        din(15) <= vectorOut_signed(15);
      END IF;
    END IF;
  END PROCESS Pipeline_Delay9_process;


  outputgen2: FOR k IN 0 TO 15 GENERATE
    din_1(k) <= std_logic_vector(din(k));
  END GENERATE;

  outputgen1: FOR k IN 0 TO 15 GENERATE
    out_signed(k) <= signed(out_rsvd(k));
  END GENERATE;

  Pipeline_Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Pipeline_Delay6_out1(0) <= to_signed(16#0000#, 16);
        Pipeline_Delay6_out1(1) <= to_signed(16#0000#, 16);
        Pipeline_Delay6_out1(2) <= to_signed(16#0000#, 16);
        Pipeline_Delay6_out1(3) <= to_signed(16#0000#, 16);
        Pipeline_Delay6_out1(4) <= to_signed(16#0000#, 16);
        Pipeline_Delay6_out1(5) <= to_signed(16#0000#, 16);
        Pipeline_Delay6_out1(6) <= to_signed(16#0000#, 16);
        Pipeline_Delay6_out1(7) <= to_signed(16#0000#, 16);
        Pipeline_Delay6_out1(8) <= to_signed(16#0000#, 16);
        Pipeline_Delay6_out1(9) <= to_signed(16#0000#, 16);
        Pipeline_Delay6_out1(10) <= to_signed(16#0000#, 16);
        Pipeline_Delay6_out1(11) <= to_signed(16#0000#, 16);
        Pipeline_Delay6_out1(12) <= to_signed(16#0000#, 16);
        Pipeline_Delay6_out1(13) <= to_signed(16#0000#, 16);
        Pipeline_Delay6_out1(14) <= to_signed(16#0000#, 16);
        Pipeline_Delay6_out1(15) <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Pipeline_Delay6_out1(0) <= out_signed(0);
        Pipeline_Delay6_out1(1) <= out_signed(1);
        Pipeline_Delay6_out1(2) <= out_signed(2);
        Pipeline_Delay6_out1(3) <= out_signed(3);
        Pipeline_Delay6_out1(4) <= out_signed(4);
        Pipeline_Delay6_out1(5) <= out_signed(5);
        Pipeline_Delay6_out1(6) <= out_signed(6);
        Pipeline_Delay6_out1(7) <= out_signed(7);
        Pipeline_Delay6_out1(8) <= out_signed(8);
        Pipeline_Delay6_out1(9) <= out_signed(9);
        Pipeline_Delay6_out1(10) <= out_signed(10);
        Pipeline_Delay6_out1(11) <= out_signed(11);
        Pipeline_Delay6_out1(12) <= out_signed(12);
        Pipeline_Delay6_out1(13) <= out_signed(13);
        Pipeline_Delay6_out1(14) <= out_signed(14);
        Pipeline_Delay6_out1(15) <= out_signed(15);
      END IF;
    END IF;
  END PROCESS Pipeline_Delay6_process;


  outputgen: FOR k IN 0 TO 15 GENERATE
    vectorOut(k) <= std_logic_vector(Pipeline_Delay6_out1(k));
  END GENERATE;

  Pipeline_Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Pipeline_Delay5_reg(0) <= '0';
        Pipeline_Delay5_reg(1) <= '0';
      ELSIF enb = '1' THEN
        Pipeline_Delay5_reg(0) <= Pipeline_Delay5_reg_next(0);
        Pipeline_Delay5_reg(1) <= Pipeline_Delay5_reg_next(1);
      END IF;
    END IF;
  END PROCESS Pipeline_Delay5_process;

  Pipeline_Delay5_out1 <= Pipeline_Delay5_reg(1);
  Pipeline_Delay5_reg_next(0) <= Filter_Matrix_Multiplier1_out2;
  Pipeline_Delay5_reg_next(1) <= Pipeline_Delay5_reg(0);

  validOut <= Pipeline_Delay5_out1;

END rtl;

