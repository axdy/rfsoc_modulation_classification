-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/amc_model_w16a16/amc_cnn_snr_src_SinglePortRAM_generic_block2.vhd
-- Created: 2023-05-29 02:49:12
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: amc_cnn_snr_src_SinglePortRAM_generic_block2
-- Source Path: amc_model_w16a16/DUT HDL/Dense Layer 2/Dense Layer 2/Weight Storage 1/SinglePortRAM_generic
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY amc_cnn_snr_src_SinglePortRAM_generic_block2 IS
  GENERIC( AddrWidth                      : integer := 1;
           DataWidth                      : integer := 1
           );
  PORT( clk                               :   IN    std_logic;
        enb                               :   IN    std_logic;
        din                               :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
        addr                              :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
        we                                :   IN    std_logic;  -- ufix1
        dout                              :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
        );
END amc_cnn_snr_src_SinglePortRAM_generic_block2;


ARCHITECTURE rtl OF amc_cnn_snr_src_SinglePortRAM_generic_block2 IS

  -- Local Type Definitions
  TYPE ram_type IS ARRAY (2**AddrWidth - 1 DOWNTO 0) of std_logic_vector(DataWidth - 1 DOWNTO 0);

  -- Signals
  SIGNAL ram                              : ram_type := (B"110111100100100011", B"111101101111101100", B"110100111100010001", B"111110101001000110", B"000101101100101001", B"111000011001111111", B"000011101101110000", B"111000101000111111", B"111101011010010000", B"111010010100100011", B"000010000100000110",
                                                        B"000000000001110000", B"110111111010010001", B"111010100110011001", B"000000000000000000", B"110001011110011010", B"000100011001001101", B"001111111101000100", B"000011000010111000", B"000111100010110111", B"111000100101000111", B"111011011000010001",
                                                        B"001011010011010111", B"001101110011011100", B"000111110111000101", B"001110001011001010", B"001101011011110000", B"000110001101010011", B"000000000000000000", B"110111101011000001", B"111100010000011110", B"110000111000110110", B"111010011000010111",
                                                        B"110011011110011010", B"000111010011101111", B"000100010110011001", B"110110001101100101", B"000000000100010110", B"110100000101101111", B"000101000100001011", B"111010010110000001", B"111100101001010100", B"000001111000100100", B"111110101101111010",
                                                        B"111010111000011101", B"111011011001110001", B"111000101110101111", B"110000110110101110", B"110000000011100000", B"111000011010010101", B"000000101100001000", B"111101010000010000", B"111100001110010100", B"111010011010101011", B"111011000010101101",
                                                        B"111100101110110000", B"111010001010011001", B"111000101100010111", B"111011110111101111", B"111001011001111001", B"110110000111011111", B"111100010011100100", B"001010001101000111", B"001111111100111110", B"111000000110110001", B"000000000000000000",
                                                        B"110111101001001011", B"001000000110100101", B"111010000101100101", B"111011111111110010", B"000000101111101110", B"110110100001001001", B"111010011000110011", B"111010101010001111", B"110011011000110110", B"111111111101001010", B"000000010001000000",
                                                        B"001100110110010110", B"111010100100010101", B"111110000101101010", B"001010110010101111", B"111000100001000101", B"111100011110100100", B"111110101100001100", B"110110110010100101", B"110010001001000100", B"000000110001011010", B"111101100111011110",
                                                        B"111100011000011100", B"110111110000000101", B"001010111111100011", B"110101101000111111", B"111010011010111011", B"001000100101000001", B"111010001110110111", B"111001111010010111", B"000101111111001111", B"000100010000000011", B"111011000110011001",
                                                        B"000100100000010011", B"001111101000010000", B"110010101000011100", B"000010010110010010", B"111000101001000011", B"111011000100011101", B"111001100101110111", B"110110111000101101", B"111111111001001100", B"111000001001011101", B"001011000110010111",
                                                        B"001001000100110101", B"111111100100101100", B"000101011110100101", B"111010111100100011", B"111011000100010101", B"111011011011111101", B"111011100010100111", B"111100100001101010", B"000010011110111110", B"001001101011100111", B"111101110010101100",
                                                        B"111001010000111101", B"111010011010011001", B"001000001000101011", B"111010111001101101", B"111011100000100111", B"111101011110010010", B"111000010010111001");
  SIGNAL data_int                         : std_logic_vector(DataWidth - 1 DOWNTO 0) := B"111000010010111001";
  SIGNAL addr_unsigned                    : unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width

BEGIN
  addr_unsigned <= unsigned(addr);

  SinglePortRAM_generic_process: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF enb = '1' THEN
        IF we = '1' THEN
          ram(to_integer(addr_unsigned)) <= din;
          data_int <= din;
        ELSE
          data_int <= ram(to_integer(addr_unsigned));
        END IF;
      END IF;
    END IF;
  END PROCESS SinglePortRAM_generic_process;

  dout <= data_int;

END rtl;

