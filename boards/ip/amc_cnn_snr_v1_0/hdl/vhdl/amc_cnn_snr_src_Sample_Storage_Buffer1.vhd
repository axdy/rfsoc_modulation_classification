-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/amc_model_w16a16/amc_cnn_snr_src_Sample_Storage_Buffer1.vhd
-- Created: 2023-05-29 02:49:30
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: amc_cnn_snr_src_Sample_Storage_Buffer1
-- Source Path: amc_model_w16a16/DUT HDL/Dense Layer 1/Sample Storage Buffer1
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY amc_cnn_snr_src_Sample_Storage_Buffer1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        validIn                           :   IN    std_logic;
        wr_addr                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        wr_en                             :   OUT   std_logic;
        rd_addr                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        rd_row_idx                        :   OUT   std_logic_vector(4 DOWNTO 0);  -- ufix5
        validOut                          :   OUT   std_logic;
        ready_prev                        :   OUT   std_logic
        );
END amc_cnn_snr_src_Sample_Storage_Buffer1;


ARCHITECTURE rtl OF amc_cnn_snr_src_Sample_Storage_Buffer1 IS

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL wr_addr_tmp                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL rd_addr_tmp                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL rd_row_idx_tmp                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL reg_flag                         : std_logic;
  SIGNAL reg_input_count                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL reg_count_out_rows               : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL reg_count_out_cols               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL reg_track_stored                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL state                            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL state_not_empty                  : std_logic;
  SIGNAL reg_flag_next                    : std_logic;
  SIGNAL reg_input_count_next             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL reg_count_out_rows_next          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL reg_count_out_cols_next          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL reg_track_stored_next            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL state_next                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL state_not_empty_next             : std_logic;

BEGIN
  Sample_Storage_Buffer1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        state_not_empty <= '0';
        reg_flag <= '0';
        reg_input_count <= to_unsigned(16#00#, 8);
        reg_count_out_rows <= to_unsigned(16#00#, 5);
        reg_count_out_cols <= to_unsigned(16#00#, 8);
        reg_track_stored <= to_unsigned(16#00#, 8);
        state <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        reg_flag <= reg_flag_next;
        reg_input_count <= reg_input_count_next;
        reg_count_out_rows <= reg_count_out_rows_next;
        reg_count_out_cols <= reg_count_out_cols_next;
        reg_track_stored <= reg_track_stored_next;
        state <= state_next;
        state_not_empty <= state_not_empty_next;
      END IF;
    END IF;
  END PROCESS Sample_Storage_Buffer1_process;

  Sample_Storage_Buffer1_output : PROCESS (reg_count_out_cols, reg_count_out_rows, reg_flag, reg_input_count,
       reg_track_stored, state, state_not_empty, validIn)
    VARIABLE reg_flag_temp : std_logic;
    VARIABLE reg_track_stored_temp : unsigned(7 DOWNTO 0);
    VARIABLE state_temp : unsigned(2 DOWNTO 0);
  BEGIN
    reg_flag_temp := reg_flag;
    reg_track_stored_temp := reg_track_stored;
    state_temp := state;
    reg_input_count_next <= reg_input_count;
    reg_count_out_rows_next <= reg_count_out_rows;
    reg_count_out_cols_next <= reg_count_out_cols;
    state_not_empty_next <= state_not_empty;
    -- States
    -- Write samples to buffer
    -- Constant Variables
    IF ( NOT state_not_empty) = '1' THEN 
      state_not_empty_next <= '1';
      state_temp := to_unsigned(16#1#, 3);
    END IF;
    validOut <= '0';
    rd_addr_tmp <= to_unsigned(16#00#, 8);
    wr_addr_tmp <= to_unsigned(16#00#, 8);
    wr_en <= '0';
    ready_prev <= '0';
    rd_row_idx_tmp <= to_unsigned(16#00#, 5);
    CASE state_temp IS
      WHEN "001" =>
        IF validIn = '1' THEN 
          wr_en <= '1';
          wr_addr_tmp <= reg_input_count;
          reg_track_stored_temp := reg_track_stored + to_unsigned(16#01#, 8);
          -- tracks how many samples have been stored in memory
          reg_flag_temp := '1';
          IF reg_input_count = to_unsigned(16#7B#, 8) THEN 
            reg_input_count_next <= to_unsigned(16#00#, 8);
          ELSE 
            reg_input_count_next <= reg_input_count + to_unsigned(16#01#, 8);
          END IF;
        END IF;
        IF (reg_flag_temp AND hdlcoder_to_stdlogic(reg_count_out_cols < reg_track_stored_temp)) = '1' THEN 
          -- and ready_nx_layer
          rd_addr_tmp <= reg_count_out_cols;
          rd_row_idx_tmp <= reg_count_out_rows;
          validOut <= '1';
          IF reg_count_out_rows = to_unsigned(16#0F#, 5) THEN 
            reg_count_out_rows_next <= to_unsigned(16#00#, 5);
            IF reg_count_out_cols = to_unsigned(16#7B#, 8) THEN 
              reg_count_out_cols_next <= to_unsigned(16#00#, 8);
              reg_track_stored_temp := to_unsigned(16#00#, 8);
              ready_prev <= '1';
              reg_flag_temp := '0';
            ELSE 
              reg_count_out_cols_next <= reg_count_out_cols + to_unsigned(16#01#, 8);
            END IF;
          ELSE 
            reg_count_out_rows_next <= reg_count_out_rows + to_unsigned(16#01#, 5);
          END IF;
        END IF;
      WHEN OTHERS => 
        NULL;
    END CASE;
    reg_flag_next <= reg_flag_temp;
    reg_track_stored_next <= reg_track_stored_temp;
    state_next <= state_temp;
  END PROCESS Sample_Storage_Buffer1_output;


  wr_addr <= std_logic_vector(wr_addr_tmp);

  rd_addr <= std_logic_vector(rd_addr_tmp);

  rd_row_idx <= std_logic_vector(rd_row_idx_tmp);

END rtl;

