-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/ddcduc/DDC_src_FIR_Rate_Conversion_Controller_block.vhd
-- Created: 2023-01-04 14:03:17
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DDC_src_FIR_Rate_Conversion_Controller_block
-- Source Path: ddcduc/DDC/FIR Rate Conversion HDL Optimized1/FIR Rate Conversion Controller
-- Hierarchy Level: 2
-- 
-- FIR Rate Conversion Controller
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY DDC_src_FIR_Rate_Conversion_Controller_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataValid                         :   IN    std_logic;
        request                           :   IN    std_logic;
        phase                             :   OUT   std_logic;  -- ufix1
        phaseValid                        :   OUT   std_logic;
        ready                             :   OUT   std_logic
        );
END DDC_src_FIR_Rate_Conversion_Controller_block;


ARCHITECTURE rtl OF DDC_src_FIR_Rate_Conversion_Controller_block IS

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL inputCountTableOut               : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL nextInputCount                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL inputCount                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rdyToAdv                         : std_logic;
  SIGNAL advance                          : std_logic;
  SIGNAL InputControl_out2                : unsigned(1 DOWNTO 0);  -- ufix2

BEGIN
  phase <= '0';

  inputCountTableOut <= to_unsigned(16#2#, 2);

  inputCountReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      inputCount <= to_unsigned(16#1#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        inputCount <= nextInputCount;
      END IF;
    END IF;
  END PROCESS inputCountReg_process;


  advance <= request AND rdyToAdv;

  -- Input control counter combinatorial logic
  rdyToAdv <= hdlcoder_to_stdlogic((inputCount = to_unsigned(16#0#, 2)) OR ((inputCount = to_unsigned(16#1#, 2)) AND (dataValid /= '0')));
  
  InputControl_out2 <= inputCountTableOut WHEN advance /= '0' ELSE
      inputCount - to_unsigned(16#1#, 2) WHEN dataValid /= '0' ELSE
      inputCount;
  
  ready <= '1' WHEN InputControl_out2 /= to_unsigned(16#0#, 2) ELSE
      '0';
  nextInputCount <= InputControl_out2;

  phaseValidReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      phaseValid <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        phaseValid <= rdyToAdv;
      END IF;
    END IF;
  END PROCESS phaseValidReg_process;


END rtl;

