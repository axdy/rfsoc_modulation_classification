-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/ddcduc/DDC_src_cSection.vhd
-- Created: 2023-01-04 14:03:17
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DDC_src_cSection
-- Source Path: ddcduc/DDC/CICDecimation/cSection
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY DDC_src_cSection IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dsOut_re                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En13
        dsOut_im                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En13
        ds_vout                           :   IN    std_logic;
        internalReset                     :   IN    std_logic;
        combOut_re                        :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En10
        combOut_im                        :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En10
        c_vout                            :   OUT   std_logic
        );
END DDC_src_cSection;


ARCHITECTURE rtl OF DDC_src_cSection IS

  -- Signals
  SIGNAL cBuff_vout1                      : std_logic;
  SIGNAL cBuff_vout2                      : std_logic;
  SIGNAL cBuff_vout3                      : std_logic;
  SIGNAL cBuff_vout4                      : std_logic;
  SIGNAL cBuff_vout5                      : std_logic;
  SIGNAL invalidOut_re_1                  : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL dsOut_re_signed                  : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL cDelay_re1                       : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL subtractor_sub_cast              : signed(24 DOWNTO 0);  -- sfix25_En13
  SIGNAL subtractor_sub_cast_1            : signed(24 DOWNTO 0);  -- sfix25_En13
  SIGNAL subOut_re1                       : signed(24 DOWNTO 0);  -- sfix25_En13
  SIGNAL cOut_re1                         : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL cBuff_re1                        : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL cIn_re2                          : signed(22 DOWNTO 0);  -- sfix23_En12
  SIGNAL cDelay_re2                       : signed(22 DOWNTO 0);  -- sfix23_En12
  SIGNAL subtractor_sub_cast_2            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL subtractor_sub_cast_3            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL subOut_re2                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL cOut_re2                         : signed(22 DOWNTO 0);  -- sfix23_En12
  SIGNAL cBuff_re2                        : signed(22 DOWNTO 0);  -- sfix23_En12
  SIGNAL cIn_re3                          : signed(21 DOWNTO 0);  -- sfix22_En11
  SIGNAL cDelay_re3                       : signed(21 DOWNTO 0);  -- sfix22_En11
  SIGNAL subtractor_sub_cast_4            : signed(22 DOWNTO 0);  -- sfix23_En11
  SIGNAL subtractor_sub_cast_5            : signed(22 DOWNTO 0);  -- sfix23_En11
  SIGNAL subOut_re3                       : signed(22 DOWNTO 0);  -- sfix23_En11
  SIGNAL cOut_re3                         : signed(21 DOWNTO 0);  -- sfix22_En11
  SIGNAL cBuff_re3                        : signed(21 DOWNTO 0);  -- sfix22_En11
  SIGNAL cIn_re4                          : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL cDelay_re4                       : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL subtractor_sub_cast_6            : signed(21 DOWNTO 0);  -- sfix22_En10
  SIGNAL subtractor_sub_cast_7            : signed(21 DOWNTO 0);  -- sfix22_En10
  SIGNAL subOut_re4                       : signed(21 DOWNTO 0);  -- sfix22_En10
  SIGNAL cOut_re4                         : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL cBuff_re4                        : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL cDelay_re5                       : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL subtractor_sub_cast_8            : signed(21 DOWNTO 0);  -- sfix22_En10
  SIGNAL subtractor_sub_cast_9            : signed(21 DOWNTO 0);  -- sfix22_En10
  SIGNAL subOut_re5                       : signed(21 DOWNTO 0);  -- sfix22_En10
  SIGNAL cOut_re5                         : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL cBuff_re5                        : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL combOutreg_re                    : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL combOut_re_tmp                   : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL invalidOut_im_1                  : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL dsOut_im_signed                  : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL cDelay_im1                       : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL subtractor_sub_cast_10           : signed(24 DOWNTO 0);  -- sfix25_En13
  SIGNAL subtractor_sub_cast_11           : signed(24 DOWNTO 0);  -- sfix25_En13
  SIGNAL subOut_im1                       : signed(24 DOWNTO 0);  -- sfix25_En13
  SIGNAL cOut_im1                         : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL cBuff_im1                        : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL cIn_im2                          : signed(22 DOWNTO 0);  -- sfix23_En12
  SIGNAL cDelay_im2                       : signed(22 DOWNTO 0);  -- sfix23_En12
  SIGNAL subtractor_sub_cast_12           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL subtractor_sub_cast_13           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL subOut_im2                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL cOut_im2                         : signed(22 DOWNTO 0);  -- sfix23_En12
  SIGNAL cBuff_im2                        : signed(22 DOWNTO 0);  -- sfix23_En12
  SIGNAL cIn_im3                          : signed(21 DOWNTO 0);  -- sfix22_En11
  SIGNAL cDelay_im3                       : signed(21 DOWNTO 0);  -- sfix22_En11
  SIGNAL subtractor_sub_cast_14           : signed(22 DOWNTO 0);  -- sfix23_En11
  SIGNAL subtractor_sub_cast_15           : signed(22 DOWNTO 0);  -- sfix23_En11
  SIGNAL subOut_im3                       : signed(22 DOWNTO 0);  -- sfix23_En11
  SIGNAL cOut_im3                         : signed(21 DOWNTO 0);  -- sfix22_En11
  SIGNAL cBuff_im3                        : signed(21 DOWNTO 0);  -- sfix22_En11
  SIGNAL cIn_im4                          : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL cDelay_im4                       : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL subtractor_sub_cast_16           : signed(21 DOWNTO 0);  -- sfix22_En10
  SIGNAL subtractor_sub_cast_17           : signed(21 DOWNTO 0);  -- sfix22_En10
  SIGNAL subOut_im4                       : signed(21 DOWNTO 0);  -- sfix22_En10
  SIGNAL cOut_im4                         : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL cBuff_im4                        : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL cDelay_im5                       : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL subtractor_sub_cast_18           : signed(21 DOWNTO 0);  -- sfix22_En10
  SIGNAL subtractor_sub_cast_19           : signed(21 DOWNTO 0);  -- sfix22_En10
  SIGNAL subOut_im5                       : signed(21 DOWNTO 0);  -- sfix22_En10
  SIGNAL cOut_im5                         : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL cBuff_im5                        : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL combOutreg_im                    : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL combOut_im_tmp                   : signed(20 DOWNTO 0);  -- sfix21_En10

BEGIN
  intdelay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cBuff_vout1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cBuff_vout1 <= '0';
        ELSE 
          cBuff_vout1 <= ds_vout;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cBuff_vout2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cBuff_vout2 <= '0';
        ELSE 
          cBuff_vout2 <= cBuff_vout1;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cBuff_vout3 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cBuff_vout3 <= '0';
        ELSE 
          cBuff_vout3 <= cBuff_vout2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cBuff_vout4 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cBuff_vout4 <= '0';
        ELSE 
          cBuff_vout4 <= cBuff_vout3;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  intdelay_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cBuff_vout5 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cBuff_vout5 <= '0';
        ELSE 
          cBuff_vout5 <= cBuff_vout4;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  invalidOut_re_1 <= to_signed(16#000000#, 21);

  dsOut_re_signed <= signed(dsOut_re);

  intdelay_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cDelay_re1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cDelay_re1 <= to_signed(16#000000#, 24);
        ELSIF ds_vout = '1' THEN
          cDelay_re1 <= dsOut_re_signed;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  subtractor_sub_cast <= resize(dsOut_re_signed, 25);
  subtractor_sub_cast_1 <= resize(cDelay_re1, 25);
  subOut_re1 <= subtractor_sub_cast - subtractor_sub_cast_1;

  cOut_re1 <= subOut_re1(23 DOWNTO 0);

  intdelay_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cBuff_re1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cBuff_re1 <= to_signed(16#000000#, 24);
        ELSE 
          cBuff_re1 <= cOut_re1;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  cIn_re2 <= cBuff_re1(23 DOWNTO 1);

  intdelay_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cDelay_re2 <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cDelay_re2 <= to_signed(16#000000#, 23);
        ELSIF cBuff_vout1 = '1' THEN
          cDelay_re2 <= cIn_re2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  subtractor_sub_cast_2 <= resize(cIn_re2, 24);
  subtractor_sub_cast_3 <= resize(cDelay_re2, 24);
  subOut_re2 <= subtractor_sub_cast_2 - subtractor_sub_cast_3;

  cOut_re2 <= subOut_re2(22 DOWNTO 0);

  intdelay_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cBuff_re2 <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cBuff_re2 <= to_signed(16#000000#, 23);
        ELSE 
          cBuff_re2 <= cOut_re2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_8_process;


  cIn_re3 <= cBuff_re2(22 DOWNTO 1);

  intdelay_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cDelay_re3 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cDelay_re3 <= to_signed(16#000000#, 22);
        ELSIF cBuff_vout2 = '1' THEN
          cDelay_re3 <= cIn_re3;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_9_process;


  subtractor_sub_cast_4 <= resize(cIn_re3, 23);
  subtractor_sub_cast_5 <= resize(cDelay_re3, 23);
  subOut_re3 <= subtractor_sub_cast_4 - subtractor_sub_cast_5;

  cOut_re3 <= subOut_re3(21 DOWNTO 0);

  intdelay_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cBuff_re3 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cBuff_re3 <= to_signed(16#000000#, 22);
        ELSE 
          cBuff_re3 <= cOut_re3;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_10_process;


  cIn_re4 <= cBuff_re3(21 DOWNTO 1);

  intdelay_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cDelay_re4 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cDelay_re4 <= to_signed(16#000000#, 21);
        ELSIF cBuff_vout3 = '1' THEN
          cDelay_re4 <= cIn_re4;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_11_process;


  subtractor_sub_cast_6 <= resize(cIn_re4, 22);
  subtractor_sub_cast_7 <= resize(cDelay_re4, 22);
  subOut_re4 <= subtractor_sub_cast_6 - subtractor_sub_cast_7;

  cOut_re4 <= subOut_re4(20 DOWNTO 0);

  intdelay_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cBuff_re4 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cBuff_re4 <= to_signed(16#000000#, 21);
        ELSE 
          cBuff_re4 <= cOut_re4;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_12_process;


  intdelay_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cDelay_re5 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cDelay_re5 <= to_signed(16#000000#, 21);
        ELSIF cBuff_vout4 = '1' THEN
          cDelay_re5 <= cBuff_re4;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_13_process;


  subtractor_sub_cast_8 <= resize(cBuff_re4, 22);
  subtractor_sub_cast_9 <= resize(cDelay_re5, 22);
  subOut_re5 <= subtractor_sub_cast_8 - subtractor_sub_cast_9;

  cOut_re5 <= subOut_re5(20 DOWNTO 0);

  intdelay_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cBuff_re5 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cBuff_re5 <= to_signed(16#000000#, 21);
        ELSE 
          cBuff_re5 <= cOut_re5;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_14_process;


  
  combOutreg_re <= invalidOut_re_1 WHEN cBuff_vout5 = '0' ELSE
      cBuff_re5;

  intdelay_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      combOut_re_tmp <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          combOut_re_tmp <= to_signed(16#000000#, 21);
        ELSE 
          combOut_re_tmp <= combOutreg_re;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_15_process;


  combOut_re <= std_logic_vector(combOut_re_tmp);

  invalidOut_im_1 <= to_signed(16#000000#, 21);

  dsOut_im_signed <= signed(dsOut_im);

  intdelay_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cDelay_im1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cDelay_im1 <= to_signed(16#000000#, 24);
        ELSIF ds_vout = '1' THEN
          cDelay_im1 <= dsOut_im_signed;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_16_process;


  subtractor_sub_cast_10 <= resize(dsOut_im_signed, 25);
  subtractor_sub_cast_11 <= resize(cDelay_im1, 25);
  subOut_im1 <= subtractor_sub_cast_10 - subtractor_sub_cast_11;

  cOut_im1 <= subOut_im1(23 DOWNTO 0);

  intdelay_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cBuff_im1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cBuff_im1 <= to_signed(16#000000#, 24);
        ELSE 
          cBuff_im1 <= cOut_im1;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_17_process;


  cIn_im2 <= cBuff_im1(23 DOWNTO 1);

  intdelay_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cDelay_im2 <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cDelay_im2 <= to_signed(16#000000#, 23);
        ELSIF cBuff_vout1 = '1' THEN
          cDelay_im2 <= cIn_im2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_18_process;


  subtractor_sub_cast_12 <= resize(cIn_im2, 24);
  subtractor_sub_cast_13 <= resize(cDelay_im2, 24);
  subOut_im2 <= subtractor_sub_cast_12 - subtractor_sub_cast_13;

  cOut_im2 <= subOut_im2(22 DOWNTO 0);

  intdelay_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cBuff_im2 <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cBuff_im2 <= to_signed(16#000000#, 23);
        ELSE 
          cBuff_im2 <= cOut_im2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_19_process;


  cIn_im3 <= cBuff_im2(22 DOWNTO 1);

  intdelay_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cDelay_im3 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cDelay_im3 <= to_signed(16#000000#, 22);
        ELSIF cBuff_vout2 = '1' THEN
          cDelay_im3 <= cIn_im3;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_20_process;


  subtractor_sub_cast_14 <= resize(cIn_im3, 23);
  subtractor_sub_cast_15 <= resize(cDelay_im3, 23);
  subOut_im3 <= subtractor_sub_cast_14 - subtractor_sub_cast_15;

  cOut_im3 <= subOut_im3(21 DOWNTO 0);

  intdelay_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cBuff_im3 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cBuff_im3 <= to_signed(16#000000#, 22);
        ELSE 
          cBuff_im3 <= cOut_im3;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_21_process;


  cIn_im4 <= cBuff_im3(21 DOWNTO 1);

  intdelay_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cDelay_im4 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cDelay_im4 <= to_signed(16#000000#, 21);
        ELSIF cBuff_vout3 = '1' THEN
          cDelay_im4 <= cIn_im4;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_22_process;


  subtractor_sub_cast_16 <= resize(cIn_im4, 22);
  subtractor_sub_cast_17 <= resize(cDelay_im4, 22);
  subOut_im4 <= subtractor_sub_cast_16 - subtractor_sub_cast_17;

  cOut_im4 <= subOut_im4(20 DOWNTO 0);

  intdelay_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cBuff_im4 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cBuff_im4 <= to_signed(16#000000#, 21);
        ELSE 
          cBuff_im4 <= cOut_im4;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_23_process;


  intdelay_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cDelay_im5 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cDelay_im5 <= to_signed(16#000000#, 21);
        ELSIF cBuff_vout4 = '1' THEN
          cDelay_im5 <= cBuff_im4;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_24_process;


  subtractor_sub_cast_18 <= resize(cBuff_im4, 22);
  subtractor_sub_cast_19 <= resize(cDelay_im5, 22);
  subOut_im5 <= subtractor_sub_cast_18 - subtractor_sub_cast_19;

  cOut_im5 <= subOut_im5(20 DOWNTO 0);

  intdelay_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cBuff_im5 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cBuff_im5 <= to_signed(16#000000#, 21);
        ELSE 
          cBuff_im5 <= cOut_im5;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_25_process;


  
  combOutreg_im <= invalidOut_im_1 WHEN cBuff_vout5 = '0' ELSE
      cBuff_im5;

  intdelay_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      combOut_im_tmp <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          combOut_im_tmp <= to_signed(16#000000#, 21);
        ELSE 
          combOut_im_tmp <= combOutreg_im;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_26_process;


  combOut_im <= std_logic_vector(combOut_im_tmp);

  intdelay_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      c_vout <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          c_vout <= '0';
        ELSE 
          c_vout <= cBuff_vout5;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_27_process;


END rtl;

