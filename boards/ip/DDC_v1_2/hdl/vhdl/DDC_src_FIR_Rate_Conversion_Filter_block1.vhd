-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/ddcduc/DDC_src_FIR_Rate_Conversion_Filter_block1.vhd
-- Created: 2023-01-04 14:03:18
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DDC_src_FIR_Rate_Conversion_Filter_block1
-- Source Path: ddcduc/DDC/FIR Rate Conversion HDL Optimized2/FIR Rate Conversion Filter
-- Hierarchy Level: 2
-- 
-- FIR Rate Conversion Filter
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DDC_src_DDC_pkg.ALL;

ENTITY DDC_src_FIR_Rate_Conversion_Filter_block1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        data_re                           :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
        data_im                           :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
        dataValid                         :   IN    std_logic;
        phase                             :   IN    std_logic;  -- ufix1
        phaseValid                        :   IN    std_logic;
        request                           :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
        dataOut_im                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
        validOut                          :   OUT   std_logic
        );
END DDC_src_FIR_Rate_Conversion_Filter_block1;


ARCHITECTURE rtl OF DDC_src_FIR_Rate_Conversion_Filter_block1 IS

  -- Signals
  SIGNAL capture                          : std_logic;
  SIGNAL coeffTableOut0                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg0                        : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst0_reg             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe0                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL data_re_signed                   : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL data_im_signed                   : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap0_re                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap0_im                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg0_re                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg0_im                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst0_reg_re          : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst0_reg_im          : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe0_re                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe0_im                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product0_re                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product0_im                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst0_reg_re_1        : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst0_reg_im_1        : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe0_re                  : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe0_im                  : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut1                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg1                        : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst1_reg             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe1                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap1_re                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap1_im                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg1_re                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg1_im                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst1_reg_re          : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst1_reg_im          : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe1_re                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe1_im                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product1_re                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product1_im                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst1_reg_re_1        : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst1_reg_im_1        : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe1_re                  : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe1_im                  : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term0_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term0_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term0_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term0_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut2                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg2                        : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst2_reg             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe2                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap2_re                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap2_im                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg2_re                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg2_im                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst2_reg_re          : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst2_reg_im          : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe2_re                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe2_im                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product2_re                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product2_im                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst2_reg_re_1        : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst2_reg_im_1        : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe2_re                  : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe2_im                  : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut3                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg3                        : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst3_reg             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe3                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap3_re                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap3_im                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg3_re                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg3_im                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst3_reg_re          : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst3_reg_im          : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe3_re                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe3_im                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product3_re                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product3_im                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst3_reg_re_1        : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst3_reg_im_1        : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe3_re                  : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe3_im                  : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term1_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term1_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term1_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term1_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term0_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term0_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term0_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term0_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut4                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg4                        : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst4_reg             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe4                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap4_re                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap4_im                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg4_re                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg4_im                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst4_reg_re          : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst4_reg_im          : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe4_re                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe4_im                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product4_re                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product4_im                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst4_reg_re_1        : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst4_reg_im_1        : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe4_re                  : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe4_im                  : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut5                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg5                        : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst5_reg             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe5                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap5_re                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap5_im                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg5_re                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg5_im                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst5_reg_re          : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst5_reg_im          : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe5_re                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe5_im                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product5_re                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product5_im                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst5_reg_re_1        : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst5_reg_im_1        : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe5_re                  : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe5_im                  : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term2_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term2_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term2_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term2_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut6                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg6                        : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst6_reg             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe6                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap6_re                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap6_im                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg6_re                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg6_im                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst6_reg_re          : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst6_reg_im          : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe6_re                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe6_im                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product6_re                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product6_im                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst6_reg_re_1        : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst6_reg_im_1        : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe6_re                  : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe6_im                  : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut7                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg7                        : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst7_reg             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe7                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap7_re                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap7_im                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg7_re                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg7_im                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst7_reg_re          : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst7_reg_im          : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe7_re                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe7_im                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product7_re                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product7_im                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst7_reg_re_1        : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst7_reg_im_1        : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe7_re                  : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe7_im                  : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term3_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term3_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term3_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term3_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term1_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term1_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term1_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term1_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage2Term0_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage2Term0_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage2Term0_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage2Term0_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut8                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg8                        : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst8_reg             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe8                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap8_re                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap8_im                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg8_re                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg8_im                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst8_reg_re          : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst8_reg_im          : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe8_re                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe8_im                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product8_re                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product8_im                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst8_reg_re_1        : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst8_reg_im_1        : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe8_re                  : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe8_im                  : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut9                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg9                        : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst9_reg             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe9                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap9_re                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap9_im                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg9_re                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg9_im                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst9_reg_re          : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst9_reg_im          : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe9_re                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe9_im                  : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product9_re                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product9_im                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst9_reg_re_1        : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst9_reg_im_1        : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe9_re                  : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe9_im                  : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term4_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term4_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term4_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term4_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut10                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg10                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst10_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe10                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap10_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap10_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg10_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg10_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst10_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst10_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe10_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe10_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product10_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product10_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst10_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst10_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe10_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe10_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut11                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg11                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst11_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe11                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap11_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap11_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg11_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg11_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst11_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst11_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe11_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe11_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product11_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product11_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst11_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst11_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe11_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe11_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term5_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term5_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term5_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term5_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term2_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term2_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term2_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term2_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut12                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg12                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst12_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe12                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap12_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap12_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg12_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg12_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst12_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst12_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe12_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe12_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product12_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product12_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst12_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst12_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe12_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe12_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut13                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg13                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst13_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe13                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap13_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap13_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg13_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg13_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst13_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst13_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe13_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe13_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product13_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product13_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst13_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst13_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe13_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe13_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term6_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term6_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term6_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term6_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut14                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg14                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst14_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe14                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap14_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap14_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg14_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg14_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst14_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst14_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe14_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe14_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product14_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product14_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst14_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst14_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe14_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe14_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut15                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg15                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst15_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe15                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap15_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap15_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg15_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg15_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst15_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst15_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe15_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe15_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product15_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product15_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst15_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst15_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe15_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe15_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term7_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term7_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term7_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term7_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term3_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term3_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term3_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term3_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage2Term1_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage2Term1_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage2Term1_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage2Term1_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage3Term0_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage3Term0_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage3Term0_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage3Term0_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut16                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg16                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst16_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe16                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap16_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap16_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg16_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg16_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst16_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst16_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe16_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe16_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product16_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product16_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst16_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst16_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe16_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe16_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut17                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg17                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst17_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe17                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap17_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap17_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg17_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg17_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst17_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst17_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe17_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe17_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product17_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product17_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst17_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst17_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe17_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe17_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term8_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term8_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term8_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term8_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut18                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg18                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst18_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe18                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap18_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap18_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg18_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg18_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst18_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst18_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe18_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe18_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product18_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product18_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst18_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst18_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe18_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe18_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut19                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg19                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst19_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe19                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap19_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap19_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg19_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg19_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst19_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst19_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe19_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe19_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product19_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product19_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst19_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst19_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe19_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe19_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term9_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term9_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term9_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term9_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term4_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term4_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term4_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term4_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut20                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg20                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst20_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe20                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap20_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap20_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg20_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg20_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst20_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst20_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe20_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe20_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product20_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product20_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst20_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst20_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe20_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe20_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut21                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg21                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst21_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe21                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap21_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap21_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg21_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg21_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst21_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst21_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe21_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe21_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product21_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product21_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst21_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst21_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe21_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe21_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term10_re               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term10_im               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term10_re_1             : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term10_im_1             : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut22                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg22                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst22_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe22                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap22_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap22_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg22_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg22_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst22_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst22_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe22_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe22_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product22_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product22_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst22_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst22_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe22_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe22_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut23                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg23                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst23_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe23                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap23_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap23_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg23_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg23_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst23_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst23_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe23_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe23_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product23_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product23_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst23_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst23_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe23_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe23_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term11_re               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term11_im               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term11_re_1             : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term11_im_1             : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term5_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term5_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term5_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term5_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage2Term2_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage2Term2_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage2Term2_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage2Term2_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut24                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg24                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst24_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe24                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap24_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap24_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg24_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg24_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst24_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst24_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe24_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe24_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product24_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product24_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst24_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst24_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe24_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe24_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut25                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg25                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst25_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe25                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap25_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap25_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg25_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg25_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst25_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst25_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe25_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe25_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product25_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product25_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst25_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst25_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe25_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe25_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term12_re               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term12_im               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term12_re_1             : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term12_im_1             : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut26                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg26                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst26_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe26                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap26_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap26_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg26_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg26_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst26_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst26_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe26_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe26_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product26_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product26_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst26_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst26_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe26_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe26_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut27                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg27                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst27_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe27                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap27_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap27_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg27_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg27_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst27_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst27_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe27_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe27_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product27_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product27_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst27_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst27_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe27_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe27_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term13_re               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term13_im               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term13_re_1             : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term13_im_1             : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term6_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term6_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term6_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term6_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut28                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg28                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst28_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe28                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap28_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap28_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg28_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg28_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst28_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst28_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe28_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe28_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product28_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product28_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst28_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst28_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe28_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe28_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut29                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg29                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst29_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe29                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap29_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap29_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg29_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg29_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst29_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst29_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe29_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe29_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product29_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product29_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst29_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst29_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe29_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe29_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term14_re               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term14_im               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term14_re_1             : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term14_im_1             : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut30                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg30                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst30_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe30                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap30_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap30_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg30_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg30_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst30_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst30_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe30_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe30_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product30_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product30_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst30_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst30_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe30_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe30_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut31                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg31                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst31_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe31                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap31_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap31_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg31_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg31_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst31_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst31_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe31_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe31_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product31_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product31_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst31_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst31_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe31_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe31_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term15_re               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term15_im               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term15_re_1             : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term15_im_1             : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term7_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term7_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term7_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term7_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage2Term3_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage2Term3_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage2Term3_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage2Term3_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage3Term1_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage3Term1_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage3Term1_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage3Term1_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage4Term0_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage4Term0_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage4Term0_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage4Term0_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut32                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg32                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst32_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe32                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap32_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap32_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg32_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg32_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst32_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst32_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe32_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe32_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product32_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product32_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst32_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst32_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe32_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe32_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut33                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg33                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst33_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe33                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap33_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap33_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg33_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg33_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst33_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst33_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe33_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe33_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product33_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product33_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst33_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst33_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe33_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe33_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term16_re               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term16_im               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term16_re_1             : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term16_im_1             : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut34                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg34                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst34_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe34                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap34_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap34_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg34_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg34_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst34_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst34_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe34_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe34_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product34_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product34_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst34_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst34_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe34_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe34_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut35                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg35                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst35_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe35                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap35_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap35_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg35_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg35_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst35_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst35_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe35_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe35_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product35_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product35_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst35_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst35_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe35_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe35_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term17_re               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term17_im               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term17_re_1             : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term17_im_1             : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term8_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term8_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term8_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term8_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut36                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg36                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst36_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe36                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap36_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap36_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg36_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg36_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst36_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst36_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe36_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe36_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product36_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product36_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst36_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst36_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe36_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe36_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut37                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg37                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst37_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe37                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap37_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap37_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg37_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg37_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst37_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst37_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe37_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe37_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product37_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product37_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst37_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst37_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe37_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe37_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term18_re               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term18_im               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term18_re_1             : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term18_im_1             : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut38                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg38                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst38_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe38                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap38_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap38_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg38_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg38_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst38_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst38_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe38_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe38_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product38_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product38_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst38_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst38_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe38_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe38_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut39                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg39                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst39_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe39                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap39_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap39_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg39_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg39_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst39_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst39_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe39_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe39_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product39_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product39_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst39_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst39_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe39_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe39_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term19_re               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term19_im               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term19_re_1             : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term19_im_1             : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term9_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term9_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term9_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term9_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage2Term4_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage2Term4_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage2Term4_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage2Term4_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL coeffTableOut40                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL coeffReg40                       : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL productPipeInst40_reg            : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL coeffMultPipe40                  : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL tap40_re                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tap40_im                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg40_re                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapReg40_im                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL productPipeInst40_reg_re         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL productPipeInst40_reg_im         : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL tapMultPipe40_re                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL tapMultPipe40_im                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL product40_re                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL product40_im                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipeInst40_reg_re_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipeInst40_reg_im_1       : vector_of_signed36(0 TO 1);  -- sfix36_En33 [2]
  SIGNAL productPipe40_re                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL productPipe40_im                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term20_re               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage0Term20_im               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term10_re               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage1Term10_im               : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage2Term5_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage2Term5_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage3Term2_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage3Term2_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage3Term2_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage3Term2_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage4Term1_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage4Term1_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage5Term0_re                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage5Term0_im                : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage5Term0_re_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL sumStage5Term0_im_1              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL y_re                             : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL y_im                             : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL dataOut_re_tmp                   : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL dataOut_im_tmp                   : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL validOutPipeInst_reg             : std_logic_vector(0 TO 11);  -- ufix1 [12]

BEGIN
  capture <= request AND phaseValid;

  -- coefficient table for tap 0
  coeffTableInst0_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut0 <= to_signed(16#00000#, 18);
      WHEN OTHERS => 
        coeffTableOut0 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst0_output;


  coeffRegInst0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg0 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg0 <= coeffTableOut0;
      END IF;
    END IF;
  END PROCESS coeffRegInst0_process;


  productPipeInst0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst0_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst0_reg(0) <= coeffReg0;
        productPipeInst0_reg(1) <= productPipeInst0_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst0_process;

  coeffMultPipe0 <= productPipeInst0_reg(1);

  data_re_signed <= signed(data_re);

  data_im_signed <= signed(data_im);

  tapInst0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap0_re <= to_signed(16#00000#, 18);
      tap0_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap0_re <= data_re_signed;
        tap0_im <= data_im_signed;
      END IF;
    END IF;
  END PROCESS tapInst0_process;


  tapRegInst0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg0_re <= to_signed(16#00000#, 18);
      tapReg0_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg0_re <= tap0_re;
        tapReg0_im <= tap0_im;
      END IF;
    END IF;
  END PROCESS tapRegInst0_process;


  productPipeInst0_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst0_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst0_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst0_reg_im(0) <= tapReg0_im;
        productPipeInst0_reg_im(1) <= productPipeInst0_reg_im(0);
        productPipeInst0_reg_re(0) <= tapReg0_re;
        productPipeInst0_reg_re(1) <= productPipeInst0_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst0_1_process;

  tapMultPipe0_re <= productPipeInst0_reg_re(1);
  tapMultPipe0_im <= productPipeInst0_reg_im(1);

  product0_re <= coeffMultPipe0 * tapMultPipe0_re;
  product0_im <= coeffMultPipe0 * tapMultPipe0_im;

  productPipeInst0_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst0_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst0_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst0_reg_im_1(0) <= product0_im;
        productPipeInst0_reg_im_1(1) <= productPipeInst0_reg_im_1(0);
        productPipeInst0_reg_re_1(0) <= product0_re;
        productPipeInst0_reg_re_1(1) <= productPipeInst0_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst0_2_process;

  productPipe0_re <= productPipeInst0_reg_re_1(1);
  productPipe0_im <= productPipeInst0_reg_im_1(1);

  -- coefficient table for tap 1
  coeffTableInst1_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut1 <= to_signed(-16#00054#, 18);
      WHEN OTHERS => 
        coeffTableOut1 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst1_output;


  coeffRegInst1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg1 <= coeffTableOut1;
      END IF;
    END IF;
  END PROCESS coeffRegInst1_process;


  productPipeInst1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst1_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst1_reg(0) <= coeffReg1;
        productPipeInst1_reg(1) <= productPipeInst1_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst1_process;

  coeffMultPipe1 <= productPipeInst1_reg(1);

  tapInst1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap1_re <= to_signed(16#00000#, 18);
      tap1_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap1_re <= tap0_re;
        tap1_im <= tap0_im;
      END IF;
    END IF;
  END PROCESS tapInst1_process;


  tapRegInst1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg1_re <= to_signed(16#00000#, 18);
      tapReg1_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg1_re <= tap1_re;
        tapReg1_im <= tap1_im;
      END IF;
    END IF;
  END PROCESS tapRegInst1_process;


  productPipeInst1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst1_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst1_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst1_reg_im(0) <= tapReg1_im;
        productPipeInst1_reg_im(1) <= productPipeInst1_reg_im(0);
        productPipeInst1_reg_re(0) <= tapReg1_re;
        productPipeInst1_reg_re(1) <= productPipeInst1_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst1_1_process;

  tapMultPipe1_re <= productPipeInst1_reg_re(1);
  tapMultPipe1_im <= productPipeInst1_reg_im(1);

  product1_re <= coeffMultPipe1 * tapMultPipe1_re;
  product1_im <= coeffMultPipe1 * tapMultPipe1_im;

  productPipeInst1_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst1_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst1_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst1_reg_im_1(0) <= product1_im;
        productPipeInst1_reg_im_1(1) <= productPipeInst1_reg_im_1(0);
        productPipeInst1_reg_re_1(0) <= product1_re;
        productPipeInst1_reg_re_1(1) <= productPipeInst1_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst1_2_process;

  productPipe1_re <= productPipeInst1_reg_re_1(1);
  productPipe1_im <= productPipeInst1_reg_im_1(1);

  sumStage0Term0_re <= productPipe0_re + productPipe1_re;
  sumStage0Term0_im <= productPipe0_im + productPipe1_im;

  sumStage0Term0RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage0Term0_re_1 <= to_signed(0, 36);
      sumStage0Term0_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage0Term0_re_1 <= sumStage0Term0_re;
        sumStage0Term0_im_1 <= sumStage0Term0_im;
      END IF;
    END IF;
  END PROCESS sumStage0Term0RegInst_process;


  -- coefficient table for tap 2
  coeffTableInst2_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut2 <= to_signed(16#00000#, 18);
      WHEN OTHERS => 
        coeffTableOut2 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst2_output;


  coeffRegInst2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg2 <= coeffTableOut2;
      END IF;
    END IF;
  END PROCESS coeffRegInst2_process;


  productPipeInst2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst2_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst2_reg(0) <= coeffReg2;
        productPipeInst2_reg(1) <= productPipeInst2_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst2_process;

  coeffMultPipe2 <= productPipeInst2_reg(1);

  tapInst2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap2_re <= to_signed(16#00000#, 18);
      tap2_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap2_re <= tap1_re;
        tap2_im <= tap1_im;
      END IF;
    END IF;
  END PROCESS tapInst2_process;


  tapRegInst2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg2_re <= to_signed(16#00000#, 18);
      tapReg2_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg2_re <= tap2_re;
        tapReg2_im <= tap2_im;
      END IF;
    END IF;
  END PROCESS tapRegInst2_process;


  productPipeInst2_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst2_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst2_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst2_reg_im(0) <= tapReg2_im;
        productPipeInst2_reg_im(1) <= productPipeInst2_reg_im(0);
        productPipeInst2_reg_re(0) <= tapReg2_re;
        productPipeInst2_reg_re(1) <= productPipeInst2_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst2_1_process;

  tapMultPipe2_re <= productPipeInst2_reg_re(1);
  tapMultPipe2_im <= productPipeInst2_reg_im(1);

  product2_re <= coeffMultPipe2 * tapMultPipe2_re;
  product2_im <= coeffMultPipe2 * tapMultPipe2_im;

  productPipeInst2_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst2_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst2_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst2_reg_im_1(0) <= product2_im;
        productPipeInst2_reg_im_1(1) <= productPipeInst2_reg_im_1(0);
        productPipeInst2_reg_re_1(0) <= product2_re;
        productPipeInst2_reg_re_1(1) <= productPipeInst2_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst2_2_process;

  productPipe2_re <= productPipeInst2_reg_re_1(1);
  productPipe2_im <= productPipeInst2_reg_im_1(1);

  -- coefficient table for tap 3
  coeffTableInst3_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut3 <= to_signed(16#000D6#, 18);
      WHEN OTHERS => 
        coeffTableOut3 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst3_output;


  coeffRegInst3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg3 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg3 <= coeffTableOut3;
      END IF;
    END IF;
  END PROCESS coeffRegInst3_process;


  productPipeInst3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst3_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst3_reg(0) <= coeffReg3;
        productPipeInst3_reg(1) <= productPipeInst3_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst3_process;

  coeffMultPipe3 <= productPipeInst3_reg(1);

  tapInst3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap3_re <= to_signed(16#00000#, 18);
      tap3_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap3_re <= tap2_re;
        tap3_im <= tap2_im;
      END IF;
    END IF;
  END PROCESS tapInst3_process;


  tapRegInst3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg3_re <= to_signed(16#00000#, 18);
      tapReg3_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg3_re <= tap3_re;
        tapReg3_im <= tap3_im;
      END IF;
    END IF;
  END PROCESS tapRegInst3_process;


  productPipeInst3_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst3_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst3_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst3_reg_im(0) <= tapReg3_im;
        productPipeInst3_reg_im(1) <= productPipeInst3_reg_im(0);
        productPipeInst3_reg_re(0) <= tapReg3_re;
        productPipeInst3_reg_re(1) <= productPipeInst3_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst3_1_process;

  tapMultPipe3_re <= productPipeInst3_reg_re(1);
  tapMultPipe3_im <= productPipeInst3_reg_im(1);

  product3_re <= coeffMultPipe3 * tapMultPipe3_re;
  product3_im <= coeffMultPipe3 * tapMultPipe3_im;

  productPipeInst3_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst3_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst3_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst3_reg_im_1(0) <= product3_im;
        productPipeInst3_reg_im_1(1) <= productPipeInst3_reg_im_1(0);
        productPipeInst3_reg_re_1(0) <= product3_re;
        productPipeInst3_reg_re_1(1) <= productPipeInst3_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst3_2_process;

  productPipe3_re <= productPipeInst3_reg_re_1(1);
  productPipe3_im <= productPipeInst3_reg_im_1(1);

  sumStage0Term1_re <= productPipe2_re + productPipe3_re;
  sumStage0Term1_im <= productPipe2_im + productPipe3_im;

  sumStage0Term1RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage0Term1_re_1 <= to_signed(0, 36);
      sumStage0Term1_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage0Term1_re_1 <= sumStage0Term1_re;
        sumStage0Term1_im_1 <= sumStage0Term1_im;
      END IF;
    END IF;
  END PROCESS sumStage0Term1RegInst_process;


  sumStage1Term0_re <= sumStage0Term0_re_1 + sumStage0Term1_re_1;
  sumStage1Term0_im <= sumStage0Term0_im_1 + sumStage0Term1_im_1;

  sumStage1Term0RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage1Term0_re_1 <= to_signed(0, 36);
      sumStage1Term0_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage1Term0_re_1 <= sumStage1Term0_re;
        sumStage1Term0_im_1 <= sumStage1Term0_im;
      END IF;
    END IF;
  END PROCESS sumStage1Term0RegInst_process;


  -- coefficient table for tap 4
  coeffTableInst4_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut4 <= to_signed(16#00000#, 18);
      WHEN OTHERS => 
        coeffTableOut4 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst4_output;


  coeffRegInst4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg4 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg4 <= coeffTableOut4;
      END IF;
    END IF;
  END PROCESS coeffRegInst4_process;


  productPipeInst4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst4_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst4_reg(0) <= coeffReg4;
        productPipeInst4_reg(1) <= productPipeInst4_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst4_process;

  coeffMultPipe4 <= productPipeInst4_reg(1);

  tapInst4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap4_re <= to_signed(16#00000#, 18);
      tap4_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap4_re <= tap3_re;
        tap4_im <= tap3_im;
      END IF;
    END IF;
  END PROCESS tapInst4_process;


  tapRegInst4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg4_re <= to_signed(16#00000#, 18);
      tapReg4_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg4_re <= tap4_re;
        tapReg4_im <= tap4_im;
      END IF;
    END IF;
  END PROCESS tapRegInst4_process;


  productPipeInst4_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst4_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst4_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst4_reg_im(0) <= tapReg4_im;
        productPipeInst4_reg_im(1) <= productPipeInst4_reg_im(0);
        productPipeInst4_reg_re(0) <= tapReg4_re;
        productPipeInst4_reg_re(1) <= productPipeInst4_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst4_1_process;

  tapMultPipe4_re <= productPipeInst4_reg_re(1);
  tapMultPipe4_im <= productPipeInst4_reg_im(1);

  product4_re <= coeffMultPipe4 * tapMultPipe4_re;
  product4_im <= coeffMultPipe4 * tapMultPipe4_im;

  productPipeInst4_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst4_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst4_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst4_reg_im_1(0) <= product4_im;
        productPipeInst4_reg_im_1(1) <= productPipeInst4_reg_im_1(0);
        productPipeInst4_reg_re_1(0) <= product4_re;
        productPipeInst4_reg_re_1(1) <= productPipeInst4_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst4_2_process;

  productPipe4_re <= productPipeInst4_reg_re_1(1);
  productPipe4_im <= productPipeInst4_reg_im_1(1);

  -- coefficient table for tap 5
  coeffTableInst5_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut5 <= to_signed(-16#001D1#, 18);
      WHEN OTHERS => 
        coeffTableOut5 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst5_output;


  coeffRegInst5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg5 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg5 <= coeffTableOut5;
      END IF;
    END IF;
  END PROCESS coeffRegInst5_process;


  productPipeInst5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst5_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst5_reg(0) <= coeffReg5;
        productPipeInst5_reg(1) <= productPipeInst5_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst5_process;

  coeffMultPipe5 <= productPipeInst5_reg(1);

  tapInst5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap5_re <= to_signed(16#00000#, 18);
      tap5_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap5_re <= tap4_re;
        tap5_im <= tap4_im;
      END IF;
    END IF;
  END PROCESS tapInst5_process;


  tapRegInst5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg5_re <= to_signed(16#00000#, 18);
      tapReg5_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg5_re <= tap5_re;
        tapReg5_im <= tap5_im;
      END IF;
    END IF;
  END PROCESS tapRegInst5_process;


  productPipeInst5_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst5_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst5_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst5_reg_im(0) <= tapReg5_im;
        productPipeInst5_reg_im(1) <= productPipeInst5_reg_im(0);
        productPipeInst5_reg_re(0) <= tapReg5_re;
        productPipeInst5_reg_re(1) <= productPipeInst5_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst5_1_process;

  tapMultPipe5_re <= productPipeInst5_reg_re(1);
  tapMultPipe5_im <= productPipeInst5_reg_im(1);

  product5_re <= coeffMultPipe5 * tapMultPipe5_re;
  product5_im <= coeffMultPipe5 * tapMultPipe5_im;

  productPipeInst5_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst5_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst5_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst5_reg_im_1(0) <= product5_im;
        productPipeInst5_reg_im_1(1) <= productPipeInst5_reg_im_1(0);
        productPipeInst5_reg_re_1(0) <= product5_re;
        productPipeInst5_reg_re_1(1) <= productPipeInst5_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst5_2_process;

  productPipe5_re <= productPipeInst5_reg_re_1(1);
  productPipe5_im <= productPipeInst5_reg_im_1(1);

  sumStage0Term2_re <= productPipe4_re + productPipe5_re;
  sumStage0Term2_im <= productPipe4_im + productPipe5_im;

  sumStage0Term2RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage0Term2_re_1 <= to_signed(0, 36);
      sumStage0Term2_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage0Term2_re_1 <= sumStage0Term2_re;
        sumStage0Term2_im_1 <= sumStage0Term2_im;
      END IF;
    END IF;
  END PROCESS sumStage0Term2RegInst_process;


  -- coefficient table for tap 6
  coeffTableInst6_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut6 <= to_signed(16#00000#, 18);
      WHEN OTHERS => 
        coeffTableOut6 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst6_output;


  coeffRegInst6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg6 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg6 <= coeffTableOut6;
      END IF;
    END IF;
  END PROCESS coeffRegInst6_process;


  productPipeInst6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst6_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst6_reg(0) <= coeffReg6;
        productPipeInst6_reg(1) <= productPipeInst6_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst6_process;

  coeffMultPipe6 <= productPipeInst6_reg(1);

  tapInst6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap6_re <= to_signed(16#00000#, 18);
      tap6_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap6_re <= tap5_re;
        tap6_im <= tap5_im;
      END IF;
    END IF;
  END PROCESS tapInst6_process;


  tapRegInst6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg6_re <= to_signed(16#00000#, 18);
      tapReg6_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg6_re <= tap6_re;
        tapReg6_im <= tap6_im;
      END IF;
    END IF;
  END PROCESS tapRegInst6_process;


  productPipeInst6_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst6_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst6_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst6_reg_im(0) <= tapReg6_im;
        productPipeInst6_reg_im(1) <= productPipeInst6_reg_im(0);
        productPipeInst6_reg_re(0) <= tapReg6_re;
        productPipeInst6_reg_re(1) <= productPipeInst6_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst6_1_process;

  tapMultPipe6_re <= productPipeInst6_reg_re(1);
  tapMultPipe6_im <= productPipeInst6_reg_im(1);

  product6_re <= coeffMultPipe6 * tapMultPipe6_re;
  product6_im <= coeffMultPipe6 * tapMultPipe6_im;

  productPipeInst6_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst6_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst6_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst6_reg_im_1(0) <= product6_im;
        productPipeInst6_reg_im_1(1) <= productPipeInst6_reg_im_1(0);
        productPipeInst6_reg_re_1(0) <= product6_re;
        productPipeInst6_reg_re_1(1) <= productPipeInst6_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst6_2_process;

  productPipe6_re <= productPipeInst6_reg_re_1(1);
  productPipe6_im <= productPipeInst6_reg_im_1(1);

  -- coefficient table for tap 7
  coeffTableInst7_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut7 <= to_signed(16#00378#, 18);
      WHEN OTHERS => 
        coeffTableOut7 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst7_output;


  coeffRegInst7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg7 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg7 <= coeffTableOut7;
      END IF;
    END IF;
  END PROCESS coeffRegInst7_process;


  productPipeInst7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst7_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst7_reg(0) <= coeffReg7;
        productPipeInst7_reg(1) <= productPipeInst7_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst7_process;

  coeffMultPipe7 <= productPipeInst7_reg(1);

  tapInst7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap7_re <= to_signed(16#00000#, 18);
      tap7_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap7_re <= tap6_re;
        tap7_im <= tap6_im;
      END IF;
    END IF;
  END PROCESS tapInst7_process;


  tapRegInst7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg7_re <= to_signed(16#00000#, 18);
      tapReg7_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg7_re <= tap7_re;
        tapReg7_im <= tap7_im;
      END IF;
    END IF;
  END PROCESS tapRegInst7_process;


  productPipeInst7_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst7_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst7_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst7_reg_im(0) <= tapReg7_im;
        productPipeInst7_reg_im(1) <= productPipeInst7_reg_im(0);
        productPipeInst7_reg_re(0) <= tapReg7_re;
        productPipeInst7_reg_re(1) <= productPipeInst7_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst7_1_process;

  tapMultPipe7_re <= productPipeInst7_reg_re(1);
  tapMultPipe7_im <= productPipeInst7_reg_im(1);

  product7_re <= coeffMultPipe7 * tapMultPipe7_re;
  product7_im <= coeffMultPipe7 * tapMultPipe7_im;

  productPipeInst7_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst7_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst7_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst7_reg_im_1(0) <= product7_im;
        productPipeInst7_reg_im_1(1) <= productPipeInst7_reg_im_1(0);
        productPipeInst7_reg_re_1(0) <= product7_re;
        productPipeInst7_reg_re_1(1) <= productPipeInst7_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst7_2_process;

  productPipe7_re <= productPipeInst7_reg_re_1(1);
  productPipe7_im <= productPipeInst7_reg_im_1(1);

  sumStage0Term3_re <= productPipe6_re + productPipe7_re;
  sumStage0Term3_im <= productPipe6_im + productPipe7_im;

  sumStage0Term3RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage0Term3_re_1 <= to_signed(0, 36);
      sumStage0Term3_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage0Term3_re_1 <= sumStage0Term3_re;
        sumStage0Term3_im_1 <= sumStage0Term3_im;
      END IF;
    END IF;
  END PROCESS sumStage0Term3RegInst_process;


  sumStage1Term1_re <= sumStage0Term2_re_1 + sumStage0Term3_re_1;
  sumStage1Term1_im <= sumStage0Term2_im_1 + sumStage0Term3_im_1;

  sumStage1Term1RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage1Term1_re_1 <= to_signed(0, 36);
      sumStage1Term1_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage1Term1_re_1 <= sumStage1Term1_re;
        sumStage1Term1_im_1 <= sumStage1Term1_im;
      END IF;
    END IF;
  END PROCESS sumStage1Term1RegInst_process;


  sumStage2Term0_re <= sumStage1Term0_re_1 + sumStage1Term1_re_1;
  sumStage2Term0_im <= sumStage1Term0_im_1 + sumStage1Term1_im_1;

  sumStage2Term0RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage2Term0_re_1 <= to_signed(0, 36);
      sumStage2Term0_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage2Term0_re_1 <= sumStage2Term0_re;
        sumStage2Term0_im_1 <= sumStage2Term0_im;
      END IF;
    END IF;
  END PROCESS sumStage2Term0RegInst_process;


  -- coefficient table for tap 8
  coeffTableInst8_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut8 <= to_signed(16#00000#, 18);
      WHEN OTHERS => 
        coeffTableOut8 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst8_output;


  coeffRegInst8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg8 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg8 <= coeffTableOut8;
      END IF;
    END IF;
  END PROCESS coeffRegInst8_process;


  productPipeInst8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst8_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst8_reg(0) <= coeffReg8;
        productPipeInst8_reg(1) <= productPipeInst8_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst8_process;

  coeffMultPipe8 <= productPipeInst8_reg(1);

  tapInst8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap8_re <= to_signed(16#00000#, 18);
      tap8_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap8_re <= tap7_re;
        tap8_im <= tap7_im;
      END IF;
    END IF;
  END PROCESS tapInst8_process;


  tapRegInst8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg8_re <= to_signed(16#00000#, 18);
      tapReg8_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg8_re <= tap8_re;
        tapReg8_im <= tap8_im;
      END IF;
    END IF;
  END PROCESS tapRegInst8_process;


  productPipeInst8_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst8_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst8_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst8_reg_im(0) <= tapReg8_im;
        productPipeInst8_reg_im(1) <= productPipeInst8_reg_im(0);
        productPipeInst8_reg_re(0) <= tapReg8_re;
        productPipeInst8_reg_re(1) <= productPipeInst8_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst8_1_process;

  tapMultPipe8_re <= productPipeInst8_reg_re(1);
  tapMultPipe8_im <= productPipeInst8_reg_im(1);

  product8_re <= coeffMultPipe8 * tapMultPipe8_re;
  product8_im <= coeffMultPipe8 * tapMultPipe8_im;

  productPipeInst8_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst8_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst8_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst8_reg_im_1(0) <= product8_im;
        productPipeInst8_reg_im_1(1) <= productPipeInst8_reg_im_1(0);
        productPipeInst8_reg_re_1(0) <= product8_re;
        productPipeInst8_reg_re_1(1) <= productPipeInst8_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst8_2_process;

  productPipe8_re <= productPipeInst8_reg_re_1(1);
  productPipe8_im <= productPipeInst8_reg_im_1(1);

  -- coefficient table for tap 9
  coeffTableInst9_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut9 <= to_signed(-16#00616#, 18);
      WHEN OTHERS => 
        coeffTableOut9 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst9_output;


  coeffRegInst9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg9 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg9 <= coeffTableOut9;
      END IF;
    END IF;
  END PROCESS coeffRegInst9_process;


  productPipeInst9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst9_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst9_reg(0) <= coeffReg9;
        productPipeInst9_reg(1) <= productPipeInst9_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst9_process;

  coeffMultPipe9 <= productPipeInst9_reg(1);

  tapInst9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap9_re <= to_signed(16#00000#, 18);
      tap9_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap9_re <= tap8_re;
        tap9_im <= tap8_im;
      END IF;
    END IF;
  END PROCESS tapInst9_process;


  tapRegInst9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg9_re <= to_signed(16#00000#, 18);
      tapReg9_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg9_re <= tap9_re;
        tapReg9_im <= tap9_im;
      END IF;
    END IF;
  END PROCESS tapRegInst9_process;


  productPipeInst9_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst9_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst9_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst9_reg_im(0) <= tapReg9_im;
        productPipeInst9_reg_im(1) <= productPipeInst9_reg_im(0);
        productPipeInst9_reg_re(0) <= tapReg9_re;
        productPipeInst9_reg_re(1) <= productPipeInst9_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst9_1_process;

  tapMultPipe9_re <= productPipeInst9_reg_re(1);
  tapMultPipe9_im <= productPipeInst9_reg_im(1);

  product9_re <= coeffMultPipe9 * tapMultPipe9_re;
  product9_im <= coeffMultPipe9 * tapMultPipe9_im;

  productPipeInst9_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst9_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst9_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst9_reg_im_1(0) <= product9_im;
        productPipeInst9_reg_im_1(1) <= productPipeInst9_reg_im_1(0);
        productPipeInst9_reg_re_1(0) <= product9_re;
        productPipeInst9_reg_re_1(1) <= productPipeInst9_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst9_2_process;

  productPipe9_re <= productPipeInst9_reg_re_1(1);
  productPipe9_im <= productPipeInst9_reg_im_1(1);

  sumStage0Term4_re <= productPipe8_re + productPipe9_re;
  sumStage0Term4_im <= productPipe8_im + productPipe9_im;

  sumStage0Term4RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage0Term4_re_1 <= to_signed(0, 36);
      sumStage0Term4_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage0Term4_re_1 <= sumStage0Term4_re;
        sumStage0Term4_im_1 <= sumStage0Term4_im;
      END IF;
    END IF;
  END PROCESS sumStage0Term4RegInst_process;


  -- coefficient table for tap 10
  coeffTableInst10_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut10 <= to_signed(16#00000#, 18);
      WHEN OTHERS => 
        coeffTableOut10 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst10_output;


  coeffRegInst10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg10 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg10 <= coeffTableOut10;
      END IF;
    END IF;
  END PROCESS coeffRegInst10_process;


  productPipeInst10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst10_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst10_reg(0) <= coeffReg10;
        productPipeInst10_reg(1) <= productPipeInst10_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst10_process;

  coeffMultPipe10 <= productPipeInst10_reg(1);

  tapInst10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap10_re <= to_signed(16#00000#, 18);
      tap10_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap10_re <= tap9_re;
        tap10_im <= tap9_im;
      END IF;
    END IF;
  END PROCESS tapInst10_process;


  tapRegInst10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg10_re <= to_signed(16#00000#, 18);
      tapReg10_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg10_re <= tap10_re;
        tapReg10_im <= tap10_im;
      END IF;
    END IF;
  END PROCESS tapRegInst10_process;


  productPipeInst10_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst10_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst10_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst10_reg_im(0) <= tapReg10_im;
        productPipeInst10_reg_im(1) <= productPipeInst10_reg_im(0);
        productPipeInst10_reg_re(0) <= tapReg10_re;
        productPipeInst10_reg_re(1) <= productPipeInst10_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst10_1_process;

  tapMultPipe10_re <= productPipeInst10_reg_re(1);
  tapMultPipe10_im <= productPipeInst10_reg_im(1);

  product10_re <= coeffMultPipe10 * tapMultPipe10_re;
  product10_im <= coeffMultPipe10 * tapMultPipe10_im;

  productPipeInst10_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst10_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst10_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst10_reg_im_1(0) <= product10_im;
        productPipeInst10_reg_im_1(1) <= productPipeInst10_reg_im_1(0);
        productPipeInst10_reg_re_1(0) <= product10_re;
        productPipeInst10_reg_re_1(1) <= productPipeInst10_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst10_2_process;

  productPipe10_re <= productPipeInst10_reg_re_1(1);
  productPipe10_im <= productPipeInst10_reg_im_1(1);

  -- coefficient table for tap 11
  coeffTableInst11_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut11 <= to_signed(16#00A21#, 18);
      WHEN OTHERS => 
        coeffTableOut11 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst11_output;


  coeffRegInst11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg11 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg11 <= coeffTableOut11;
      END IF;
    END IF;
  END PROCESS coeffRegInst11_process;


  productPipeInst11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst11_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst11_reg(0) <= coeffReg11;
        productPipeInst11_reg(1) <= productPipeInst11_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst11_process;

  coeffMultPipe11 <= productPipeInst11_reg(1);

  tapInst11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap11_re <= to_signed(16#00000#, 18);
      tap11_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap11_re <= tap10_re;
        tap11_im <= tap10_im;
      END IF;
    END IF;
  END PROCESS tapInst11_process;


  tapRegInst11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg11_re <= to_signed(16#00000#, 18);
      tapReg11_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg11_re <= tap11_re;
        tapReg11_im <= tap11_im;
      END IF;
    END IF;
  END PROCESS tapRegInst11_process;


  productPipeInst11_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst11_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst11_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst11_reg_im(0) <= tapReg11_im;
        productPipeInst11_reg_im(1) <= productPipeInst11_reg_im(0);
        productPipeInst11_reg_re(0) <= tapReg11_re;
        productPipeInst11_reg_re(1) <= productPipeInst11_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst11_1_process;

  tapMultPipe11_re <= productPipeInst11_reg_re(1);
  tapMultPipe11_im <= productPipeInst11_reg_im(1);

  product11_re <= coeffMultPipe11 * tapMultPipe11_re;
  product11_im <= coeffMultPipe11 * tapMultPipe11_im;

  productPipeInst11_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst11_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst11_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst11_reg_im_1(0) <= product11_im;
        productPipeInst11_reg_im_1(1) <= productPipeInst11_reg_im_1(0);
        productPipeInst11_reg_re_1(0) <= product11_re;
        productPipeInst11_reg_re_1(1) <= productPipeInst11_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst11_2_process;

  productPipe11_re <= productPipeInst11_reg_re_1(1);
  productPipe11_im <= productPipeInst11_reg_im_1(1);

  sumStage0Term5_re <= productPipe10_re + productPipe11_re;
  sumStage0Term5_im <= productPipe10_im + productPipe11_im;

  sumStage0Term5RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage0Term5_re_1 <= to_signed(0, 36);
      sumStage0Term5_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage0Term5_re_1 <= sumStage0Term5_re;
        sumStage0Term5_im_1 <= sumStage0Term5_im;
      END IF;
    END IF;
  END PROCESS sumStage0Term5RegInst_process;


  sumStage1Term2_re <= sumStage0Term4_re_1 + sumStage0Term5_re_1;
  sumStage1Term2_im <= sumStage0Term4_im_1 + sumStage0Term5_im_1;

  sumStage1Term2RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage1Term2_re_1 <= to_signed(0, 36);
      sumStage1Term2_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage1Term2_re_1 <= sumStage1Term2_re;
        sumStage1Term2_im_1 <= sumStage1Term2_im;
      END IF;
    END IF;
  END PROCESS sumStage1Term2RegInst_process;


  -- coefficient table for tap 12
  coeffTableInst12_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut12 <= to_signed(16#00000#, 18);
      WHEN OTHERS => 
        coeffTableOut12 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst12_output;


  coeffRegInst12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg12 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg12 <= coeffTableOut12;
      END IF;
    END IF;
  END PROCESS coeffRegInst12_process;


  productPipeInst12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst12_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst12_reg(0) <= coeffReg12;
        productPipeInst12_reg(1) <= productPipeInst12_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst12_process;

  coeffMultPipe12 <= productPipeInst12_reg(1);

  tapInst12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap12_re <= to_signed(16#00000#, 18);
      tap12_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap12_re <= tap11_re;
        tap12_im <= tap11_im;
      END IF;
    END IF;
  END PROCESS tapInst12_process;


  tapRegInst12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg12_re <= to_signed(16#00000#, 18);
      tapReg12_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg12_re <= tap12_re;
        tapReg12_im <= tap12_im;
      END IF;
    END IF;
  END PROCESS tapRegInst12_process;


  productPipeInst12_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst12_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst12_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst12_reg_im(0) <= tapReg12_im;
        productPipeInst12_reg_im(1) <= productPipeInst12_reg_im(0);
        productPipeInst12_reg_re(0) <= tapReg12_re;
        productPipeInst12_reg_re(1) <= productPipeInst12_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst12_1_process;

  tapMultPipe12_re <= productPipeInst12_reg_re(1);
  tapMultPipe12_im <= productPipeInst12_reg_im(1);

  product12_re <= coeffMultPipe12 * tapMultPipe12_re;
  product12_im <= coeffMultPipe12 * tapMultPipe12_im;

  productPipeInst12_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst12_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst12_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst12_reg_im_1(0) <= product12_im;
        productPipeInst12_reg_im_1(1) <= productPipeInst12_reg_im_1(0);
        productPipeInst12_reg_re_1(0) <= product12_re;
        productPipeInst12_reg_re_1(1) <= productPipeInst12_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst12_2_process;

  productPipe12_re <= productPipeInst12_reg_re_1(1);
  productPipe12_im <= productPipeInst12_reg_im_1(1);

  -- coefficient table for tap 13
  coeffTableInst13_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut13 <= to_signed(-16#0107D#, 18);
      WHEN OTHERS => 
        coeffTableOut13 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst13_output;


  coeffRegInst13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg13 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg13 <= coeffTableOut13;
      END IF;
    END IF;
  END PROCESS coeffRegInst13_process;


  productPipeInst13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst13_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst13_reg(0) <= coeffReg13;
        productPipeInst13_reg(1) <= productPipeInst13_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst13_process;

  coeffMultPipe13 <= productPipeInst13_reg(1);

  tapInst13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap13_re <= to_signed(16#00000#, 18);
      tap13_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap13_re <= tap12_re;
        tap13_im <= tap12_im;
      END IF;
    END IF;
  END PROCESS tapInst13_process;


  tapRegInst13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg13_re <= to_signed(16#00000#, 18);
      tapReg13_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg13_re <= tap13_re;
        tapReg13_im <= tap13_im;
      END IF;
    END IF;
  END PROCESS tapRegInst13_process;


  productPipeInst13_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst13_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst13_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst13_reg_im(0) <= tapReg13_im;
        productPipeInst13_reg_im(1) <= productPipeInst13_reg_im(0);
        productPipeInst13_reg_re(0) <= tapReg13_re;
        productPipeInst13_reg_re(1) <= productPipeInst13_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst13_1_process;

  tapMultPipe13_re <= productPipeInst13_reg_re(1);
  tapMultPipe13_im <= productPipeInst13_reg_im(1);

  product13_re <= coeffMultPipe13 * tapMultPipe13_re;
  product13_im <= coeffMultPipe13 * tapMultPipe13_im;

  productPipeInst13_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst13_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst13_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst13_reg_im_1(0) <= product13_im;
        productPipeInst13_reg_im_1(1) <= productPipeInst13_reg_im_1(0);
        productPipeInst13_reg_re_1(0) <= product13_re;
        productPipeInst13_reg_re_1(1) <= productPipeInst13_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst13_2_process;

  productPipe13_re <= productPipeInst13_reg_re_1(1);
  productPipe13_im <= productPipeInst13_reg_im_1(1);

  sumStage0Term6_re <= productPipe12_re + productPipe13_re;
  sumStage0Term6_im <= productPipe12_im + productPipe13_im;

  sumStage0Term6RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage0Term6_re_1 <= to_signed(0, 36);
      sumStage0Term6_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage0Term6_re_1 <= sumStage0Term6_re;
        sumStage0Term6_im_1 <= sumStage0Term6_im;
      END IF;
    END IF;
  END PROCESS sumStage0Term6RegInst_process;


  -- coefficient table for tap 14
  coeffTableInst14_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut14 <= to_signed(16#00000#, 18);
      WHEN OTHERS => 
        coeffTableOut14 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst14_output;


  coeffRegInst14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg14 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg14 <= coeffTableOut14;
      END IF;
    END IF;
  END PROCESS coeffRegInst14_process;


  productPipeInst14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst14_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst14_reg(0) <= coeffReg14;
        productPipeInst14_reg(1) <= productPipeInst14_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst14_process;

  coeffMultPipe14 <= productPipeInst14_reg(1);

  tapInst14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap14_re <= to_signed(16#00000#, 18);
      tap14_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap14_re <= tap13_re;
        tap14_im <= tap13_im;
      END IF;
    END IF;
  END PROCESS tapInst14_process;


  tapRegInst14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg14_re <= to_signed(16#00000#, 18);
      tapReg14_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg14_re <= tap14_re;
        tapReg14_im <= tap14_im;
      END IF;
    END IF;
  END PROCESS tapRegInst14_process;


  productPipeInst14_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst14_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst14_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst14_reg_im(0) <= tapReg14_im;
        productPipeInst14_reg_im(1) <= productPipeInst14_reg_im(0);
        productPipeInst14_reg_re(0) <= tapReg14_re;
        productPipeInst14_reg_re(1) <= productPipeInst14_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst14_1_process;

  tapMultPipe14_re <= productPipeInst14_reg_re(1);
  tapMultPipe14_im <= productPipeInst14_reg_im(1);

  product14_re <= coeffMultPipe14 * tapMultPipe14_re;
  product14_im <= coeffMultPipe14 * tapMultPipe14_im;

  productPipeInst14_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst14_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst14_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst14_reg_im_1(0) <= product14_im;
        productPipeInst14_reg_im_1(1) <= productPipeInst14_reg_im_1(0);
        productPipeInst14_reg_re_1(0) <= product14_re;
        productPipeInst14_reg_re_1(1) <= productPipeInst14_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst14_2_process;

  productPipe14_re <= productPipeInst14_reg_re_1(1);
  productPipe14_im <= productPipeInst14_reg_im_1(1);

  -- coefficient table for tap 15
  coeffTableInst15_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut15 <= to_signed(16#01B66#, 18);
      WHEN OTHERS => 
        coeffTableOut15 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst15_output;


  coeffRegInst15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg15 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg15 <= coeffTableOut15;
      END IF;
    END IF;
  END PROCESS coeffRegInst15_process;


  productPipeInst15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst15_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst15_reg(0) <= coeffReg15;
        productPipeInst15_reg(1) <= productPipeInst15_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst15_process;

  coeffMultPipe15 <= productPipeInst15_reg(1);

  tapInst15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap15_re <= to_signed(16#00000#, 18);
      tap15_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap15_re <= tap14_re;
        tap15_im <= tap14_im;
      END IF;
    END IF;
  END PROCESS tapInst15_process;


  tapRegInst15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg15_re <= to_signed(16#00000#, 18);
      tapReg15_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg15_re <= tap15_re;
        tapReg15_im <= tap15_im;
      END IF;
    END IF;
  END PROCESS tapRegInst15_process;


  productPipeInst15_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst15_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst15_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst15_reg_im(0) <= tapReg15_im;
        productPipeInst15_reg_im(1) <= productPipeInst15_reg_im(0);
        productPipeInst15_reg_re(0) <= tapReg15_re;
        productPipeInst15_reg_re(1) <= productPipeInst15_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst15_1_process;

  tapMultPipe15_re <= productPipeInst15_reg_re(1);
  tapMultPipe15_im <= productPipeInst15_reg_im(1);

  product15_re <= coeffMultPipe15 * tapMultPipe15_re;
  product15_im <= coeffMultPipe15 * tapMultPipe15_im;

  productPipeInst15_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst15_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst15_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst15_reg_im_1(0) <= product15_im;
        productPipeInst15_reg_im_1(1) <= productPipeInst15_reg_im_1(0);
        productPipeInst15_reg_re_1(0) <= product15_re;
        productPipeInst15_reg_re_1(1) <= productPipeInst15_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst15_2_process;

  productPipe15_re <= productPipeInst15_reg_re_1(1);
  productPipe15_im <= productPipeInst15_reg_im_1(1);

  sumStage0Term7_re <= productPipe14_re + productPipe15_re;
  sumStage0Term7_im <= productPipe14_im + productPipe15_im;

  sumStage0Term7RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage0Term7_re_1 <= to_signed(0, 36);
      sumStage0Term7_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage0Term7_re_1 <= sumStage0Term7_re;
        sumStage0Term7_im_1 <= sumStage0Term7_im;
      END IF;
    END IF;
  END PROCESS sumStage0Term7RegInst_process;


  sumStage1Term3_re <= sumStage0Term6_re_1 + sumStage0Term7_re_1;
  sumStage1Term3_im <= sumStage0Term6_im_1 + sumStage0Term7_im_1;

  sumStage1Term3RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage1Term3_re_1 <= to_signed(0, 36);
      sumStage1Term3_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage1Term3_re_1 <= sumStage1Term3_re;
        sumStage1Term3_im_1 <= sumStage1Term3_im;
      END IF;
    END IF;
  END PROCESS sumStage1Term3RegInst_process;


  sumStage2Term1_re <= sumStage1Term2_re_1 + sumStage1Term3_re_1;
  sumStage2Term1_im <= sumStage1Term2_im_1 + sumStage1Term3_im_1;

  sumStage2Term1RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage2Term1_re_1 <= to_signed(0, 36);
      sumStage2Term1_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage2Term1_re_1 <= sumStage2Term1_re;
        sumStage2Term1_im_1 <= sumStage2Term1_im;
      END IF;
    END IF;
  END PROCESS sumStage2Term1RegInst_process;


  sumStage3Term0_re <= sumStage2Term0_re_1 + sumStage2Term1_re_1;
  sumStage3Term0_im <= sumStage2Term0_im_1 + sumStage2Term1_im_1;

  sumStage3Term0RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage3Term0_re_1 <= to_signed(0, 36);
      sumStage3Term0_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage3Term0_re_1 <= sumStage3Term0_re;
        sumStage3Term0_im_1 <= sumStage3Term0_im;
      END IF;
    END IF;
  END PROCESS sumStage3Term0RegInst_process;


  -- coefficient table for tap 16
  coeffTableInst16_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut16 <= to_signed(16#00000#, 18);
      WHEN OTHERS => 
        coeffTableOut16 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst16_output;


  coeffRegInst16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg16 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg16 <= coeffTableOut16;
      END IF;
    END IF;
  END PROCESS coeffRegInst16_process;


  productPipeInst16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst16_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst16_reg(0) <= coeffReg16;
        productPipeInst16_reg(1) <= productPipeInst16_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst16_process;

  coeffMultPipe16 <= productPipeInst16_reg(1);

  tapInst16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap16_re <= to_signed(16#00000#, 18);
      tap16_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap16_re <= tap15_re;
        tap16_im <= tap15_im;
      END IF;
    END IF;
  END PROCESS tapInst16_process;


  tapRegInst16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg16_re <= to_signed(16#00000#, 18);
      tapReg16_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg16_re <= tap16_re;
        tapReg16_im <= tap16_im;
      END IF;
    END IF;
  END PROCESS tapRegInst16_process;


  productPipeInst16_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst16_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst16_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst16_reg_im(0) <= tapReg16_im;
        productPipeInst16_reg_im(1) <= productPipeInst16_reg_im(0);
        productPipeInst16_reg_re(0) <= tapReg16_re;
        productPipeInst16_reg_re(1) <= productPipeInst16_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst16_1_process;

  tapMultPipe16_re <= productPipeInst16_reg_re(1);
  tapMultPipe16_im <= productPipeInst16_reg_im(1);

  product16_re <= coeffMultPipe16 * tapMultPipe16_re;
  product16_im <= coeffMultPipe16 * tapMultPipe16_im;

  productPipeInst16_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst16_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst16_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst16_reg_im_1(0) <= product16_im;
        productPipeInst16_reg_im_1(1) <= productPipeInst16_reg_im_1(0);
        productPipeInst16_reg_re_1(0) <= product16_re;
        productPipeInst16_reg_re_1(1) <= productPipeInst16_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst16_2_process;

  productPipe16_re <= productPipeInst16_reg_re_1(1);
  productPipe16_im <= productPipeInst16_reg_im_1(1);

  -- coefficient table for tap 17
  coeffTableInst17_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut17 <= to_signed(-16#0330F#, 18);
      WHEN OTHERS => 
        coeffTableOut17 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst17_output;


  coeffRegInst17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg17 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg17 <= coeffTableOut17;
      END IF;
    END IF;
  END PROCESS coeffRegInst17_process;


  productPipeInst17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst17_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst17_reg(0) <= coeffReg17;
        productPipeInst17_reg(1) <= productPipeInst17_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst17_process;

  coeffMultPipe17 <= productPipeInst17_reg(1);

  tapInst17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap17_re <= to_signed(16#00000#, 18);
      tap17_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap17_re <= tap16_re;
        tap17_im <= tap16_im;
      END IF;
    END IF;
  END PROCESS tapInst17_process;


  tapRegInst17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg17_re <= to_signed(16#00000#, 18);
      tapReg17_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg17_re <= tap17_re;
        tapReg17_im <= tap17_im;
      END IF;
    END IF;
  END PROCESS tapRegInst17_process;


  productPipeInst17_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst17_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst17_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst17_reg_im(0) <= tapReg17_im;
        productPipeInst17_reg_im(1) <= productPipeInst17_reg_im(0);
        productPipeInst17_reg_re(0) <= tapReg17_re;
        productPipeInst17_reg_re(1) <= productPipeInst17_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst17_1_process;

  tapMultPipe17_re <= productPipeInst17_reg_re(1);
  tapMultPipe17_im <= productPipeInst17_reg_im(1);

  product17_re <= coeffMultPipe17 * tapMultPipe17_re;
  product17_im <= coeffMultPipe17 * tapMultPipe17_im;

  productPipeInst17_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst17_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst17_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst17_reg_im_1(0) <= product17_im;
        productPipeInst17_reg_im_1(1) <= productPipeInst17_reg_im_1(0);
        productPipeInst17_reg_re_1(0) <= product17_re;
        productPipeInst17_reg_re_1(1) <= productPipeInst17_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst17_2_process;

  productPipe17_re <= productPipeInst17_reg_re_1(1);
  productPipe17_im <= productPipeInst17_reg_im_1(1);

  sumStage0Term8_re <= productPipe16_re + productPipe17_re;
  sumStage0Term8_im <= productPipe16_im + productPipe17_im;

  sumStage0Term8RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage0Term8_re_1 <= to_signed(0, 36);
      sumStage0Term8_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage0Term8_re_1 <= sumStage0Term8_re;
        sumStage0Term8_im_1 <= sumStage0Term8_im;
      END IF;
    END IF;
  END PROCESS sumStage0Term8RegInst_process;


  -- coefficient table for tap 18
  coeffTableInst18_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut18 <= to_signed(16#00000#, 18);
      WHEN OTHERS => 
        coeffTableOut18 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst18_output;


  coeffRegInst18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg18 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg18 <= coeffTableOut18;
      END IF;
    END IF;
  END PROCESS coeffRegInst18_process;


  productPipeInst18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst18_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst18_reg(0) <= coeffReg18;
        productPipeInst18_reg(1) <= productPipeInst18_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst18_process;

  coeffMultPipe18 <= productPipeInst18_reg(1);

  tapInst18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap18_re <= to_signed(16#00000#, 18);
      tap18_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap18_re <= tap17_re;
        tap18_im <= tap17_im;
      END IF;
    END IF;
  END PROCESS tapInst18_process;


  tapRegInst18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg18_re <= to_signed(16#00000#, 18);
      tapReg18_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg18_re <= tap18_re;
        tapReg18_im <= tap18_im;
      END IF;
    END IF;
  END PROCESS tapRegInst18_process;


  productPipeInst18_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst18_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst18_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst18_reg_im(0) <= tapReg18_im;
        productPipeInst18_reg_im(1) <= productPipeInst18_reg_im(0);
        productPipeInst18_reg_re(0) <= tapReg18_re;
        productPipeInst18_reg_re(1) <= productPipeInst18_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst18_1_process;

  tapMultPipe18_re <= productPipeInst18_reg_re(1);
  tapMultPipe18_im <= productPipeInst18_reg_im(1);

  product18_re <= coeffMultPipe18 * tapMultPipe18_re;
  product18_im <= coeffMultPipe18 * tapMultPipe18_im;

  productPipeInst18_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst18_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst18_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst18_reg_im_1(0) <= product18_im;
        productPipeInst18_reg_im_1(1) <= productPipeInst18_reg_im_1(0);
        productPipeInst18_reg_re_1(0) <= product18_re;
        productPipeInst18_reg_re_1(1) <= productPipeInst18_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst18_2_process;

  productPipe18_re <= productPipeInst18_reg_re_1(1);
  productPipe18_im <= productPipeInst18_reg_im_1(1);

  -- coefficient table for tap 19
  coeffTableInst19_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut19 <= to_signed(16#0A1DC#, 18);
      WHEN OTHERS => 
        coeffTableOut19 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst19_output;


  coeffRegInst19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg19 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg19 <= coeffTableOut19;
      END IF;
    END IF;
  END PROCESS coeffRegInst19_process;


  productPipeInst19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst19_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst19_reg(0) <= coeffReg19;
        productPipeInst19_reg(1) <= productPipeInst19_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst19_process;

  coeffMultPipe19 <= productPipeInst19_reg(1);

  tapInst19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap19_re <= to_signed(16#00000#, 18);
      tap19_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap19_re <= tap18_re;
        tap19_im <= tap18_im;
      END IF;
    END IF;
  END PROCESS tapInst19_process;


  tapRegInst19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg19_re <= to_signed(16#00000#, 18);
      tapReg19_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg19_re <= tap19_re;
        tapReg19_im <= tap19_im;
      END IF;
    END IF;
  END PROCESS tapRegInst19_process;


  productPipeInst19_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst19_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst19_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst19_reg_im(0) <= tapReg19_im;
        productPipeInst19_reg_im(1) <= productPipeInst19_reg_im(0);
        productPipeInst19_reg_re(0) <= tapReg19_re;
        productPipeInst19_reg_re(1) <= productPipeInst19_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst19_1_process;

  tapMultPipe19_re <= productPipeInst19_reg_re(1);
  tapMultPipe19_im <= productPipeInst19_reg_im(1);

  product19_re <= coeffMultPipe19 * tapMultPipe19_re;
  product19_im <= coeffMultPipe19 * tapMultPipe19_im;

  productPipeInst19_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst19_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst19_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst19_reg_im_1(0) <= product19_im;
        productPipeInst19_reg_im_1(1) <= productPipeInst19_reg_im_1(0);
        productPipeInst19_reg_re_1(0) <= product19_re;
        productPipeInst19_reg_re_1(1) <= productPipeInst19_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst19_2_process;

  productPipe19_re <= productPipeInst19_reg_re_1(1);
  productPipe19_im <= productPipeInst19_reg_im_1(1);

  sumStage0Term9_re <= productPipe18_re + productPipe19_re;
  sumStage0Term9_im <= productPipe18_im + productPipe19_im;

  sumStage0Term9RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage0Term9_re_1 <= to_signed(0, 36);
      sumStage0Term9_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage0Term9_re_1 <= sumStage0Term9_re;
        sumStage0Term9_im_1 <= sumStage0Term9_im;
      END IF;
    END IF;
  END PROCESS sumStage0Term9RegInst_process;


  sumStage1Term4_re <= sumStage0Term8_re_1 + sumStage0Term9_re_1;
  sumStage1Term4_im <= sumStage0Term8_im_1 + sumStage0Term9_im_1;

  sumStage1Term4RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage1Term4_re_1 <= to_signed(0, 36);
      sumStage1Term4_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage1Term4_re_1 <= sumStage1Term4_re;
        sumStage1Term4_im_1 <= sumStage1Term4_im;
      END IF;
    END IF;
  END PROCESS sumStage1Term4RegInst_process;


  -- coefficient table for tap 20
  coeffTableInst20_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut20 <= to_signed(16#10000#, 18);
      WHEN OTHERS => 
        coeffTableOut20 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst20_output;


  coeffRegInst20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg20 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg20 <= coeffTableOut20;
      END IF;
    END IF;
  END PROCESS coeffRegInst20_process;


  productPipeInst20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst20_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst20_reg(0) <= coeffReg20;
        productPipeInst20_reg(1) <= productPipeInst20_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst20_process;

  coeffMultPipe20 <= productPipeInst20_reg(1);

  tapInst20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap20_re <= to_signed(16#00000#, 18);
      tap20_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap20_re <= tap19_re;
        tap20_im <= tap19_im;
      END IF;
    END IF;
  END PROCESS tapInst20_process;


  tapRegInst20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg20_re <= to_signed(16#00000#, 18);
      tapReg20_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg20_re <= tap20_re;
        tapReg20_im <= tap20_im;
      END IF;
    END IF;
  END PROCESS tapRegInst20_process;


  productPipeInst20_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst20_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst20_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst20_reg_im(0) <= tapReg20_im;
        productPipeInst20_reg_im(1) <= productPipeInst20_reg_im(0);
        productPipeInst20_reg_re(0) <= tapReg20_re;
        productPipeInst20_reg_re(1) <= productPipeInst20_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst20_1_process;

  tapMultPipe20_re <= productPipeInst20_reg_re(1);
  tapMultPipe20_im <= productPipeInst20_reg_im(1);

  product20_re <= coeffMultPipe20 * tapMultPipe20_re;
  product20_im <= coeffMultPipe20 * tapMultPipe20_im;

  productPipeInst20_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst20_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst20_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst20_reg_im_1(0) <= product20_im;
        productPipeInst20_reg_im_1(1) <= productPipeInst20_reg_im_1(0);
        productPipeInst20_reg_re_1(0) <= product20_re;
        productPipeInst20_reg_re_1(1) <= productPipeInst20_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst20_2_process;

  productPipe20_re <= productPipeInst20_reg_re_1(1);
  productPipe20_im <= productPipeInst20_reg_im_1(1);

  -- coefficient table for tap 21
  coeffTableInst21_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut21 <= to_signed(16#0A1DC#, 18);
      WHEN OTHERS => 
        coeffTableOut21 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst21_output;


  coeffRegInst21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg21 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg21 <= coeffTableOut21;
      END IF;
    END IF;
  END PROCESS coeffRegInst21_process;


  productPipeInst21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst21_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst21_reg(0) <= coeffReg21;
        productPipeInst21_reg(1) <= productPipeInst21_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst21_process;

  coeffMultPipe21 <= productPipeInst21_reg(1);

  tapInst21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap21_re <= to_signed(16#00000#, 18);
      tap21_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap21_re <= tap20_re;
        tap21_im <= tap20_im;
      END IF;
    END IF;
  END PROCESS tapInst21_process;


  tapRegInst21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg21_re <= to_signed(16#00000#, 18);
      tapReg21_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg21_re <= tap21_re;
        tapReg21_im <= tap21_im;
      END IF;
    END IF;
  END PROCESS tapRegInst21_process;


  productPipeInst21_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst21_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst21_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst21_reg_im(0) <= tapReg21_im;
        productPipeInst21_reg_im(1) <= productPipeInst21_reg_im(0);
        productPipeInst21_reg_re(0) <= tapReg21_re;
        productPipeInst21_reg_re(1) <= productPipeInst21_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst21_1_process;

  tapMultPipe21_re <= productPipeInst21_reg_re(1);
  tapMultPipe21_im <= productPipeInst21_reg_im(1);

  product21_re <= coeffMultPipe21 * tapMultPipe21_re;
  product21_im <= coeffMultPipe21 * tapMultPipe21_im;

  productPipeInst21_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst21_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst21_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst21_reg_im_1(0) <= product21_im;
        productPipeInst21_reg_im_1(1) <= productPipeInst21_reg_im_1(0);
        productPipeInst21_reg_re_1(0) <= product21_re;
        productPipeInst21_reg_re_1(1) <= productPipeInst21_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst21_2_process;

  productPipe21_re <= productPipeInst21_reg_re_1(1);
  productPipe21_im <= productPipeInst21_reg_im_1(1);

  sumStage0Term10_re <= productPipe20_re + productPipe21_re;
  sumStage0Term10_im <= productPipe20_im + productPipe21_im;

  sumStage0Term10RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage0Term10_re_1 <= to_signed(0, 36);
      sumStage0Term10_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage0Term10_re_1 <= sumStage0Term10_re;
        sumStage0Term10_im_1 <= sumStage0Term10_im;
      END IF;
    END IF;
  END PROCESS sumStage0Term10RegInst_process;


  -- coefficient table for tap 22
  coeffTableInst22_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut22 <= to_signed(16#00000#, 18);
      WHEN OTHERS => 
        coeffTableOut22 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst22_output;


  coeffRegInst22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg22 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg22 <= coeffTableOut22;
      END IF;
    END IF;
  END PROCESS coeffRegInst22_process;


  productPipeInst22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst22_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst22_reg(0) <= coeffReg22;
        productPipeInst22_reg(1) <= productPipeInst22_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst22_process;

  coeffMultPipe22 <= productPipeInst22_reg(1);

  tapInst22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap22_re <= to_signed(16#00000#, 18);
      tap22_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap22_re <= tap21_re;
        tap22_im <= tap21_im;
      END IF;
    END IF;
  END PROCESS tapInst22_process;


  tapRegInst22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg22_re <= to_signed(16#00000#, 18);
      tapReg22_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg22_re <= tap22_re;
        tapReg22_im <= tap22_im;
      END IF;
    END IF;
  END PROCESS tapRegInst22_process;


  productPipeInst22_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst22_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst22_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst22_reg_im(0) <= tapReg22_im;
        productPipeInst22_reg_im(1) <= productPipeInst22_reg_im(0);
        productPipeInst22_reg_re(0) <= tapReg22_re;
        productPipeInst22_reg_re(1) <= productPipeInst22_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst22_1_process;

  tapMultPipe22_re <= productPipeInst22_reg_re(1);
  tapMultPipe22_im <= productPipeInst22_reg_im(1);

  product22_re <= coeffMultPipe22 * tapMultPipe22_re;
  product22_im <= coeffMultPipe22 * tapMultPipe22_im;

  productPipeInst22_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst22_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst22_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst22_reg_im_1(0) <= product22_im;
        productPipeInst22_reg_im_1(1) <= productPipeInst22_reg_im_1(0);
        productPipeInst22_reg_re_1(0) <= product22_re;
        productPipeInst22_reg_re_1(1) <= productPipeInst22_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst22_2_process;

  productPipe22_re <= productPipeInst22_reg_re_1(1);
  productPipe22_im <= productPipeInst22_reg_im_1(1);

  -- coefficient table for tap 23
  coeffTableInst23_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut23 <= to_signed(-16#0330F#, 18);
      WHEN OTHERS => 
        coeffTableOut23 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst23_output;


  coeffRegInst23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg23 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg23 <= coeffTableOut23;
      END IF;
    END IF;
  END PROCESS coeffRegInst23_process;


  productPipeInst23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst23_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst23_reg(0) <= coeffReg23;
        productPipeInst23_reg(1) <= productPipeInst23_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst23_process;

  coeffMultPipe23 <= productPipeInst23_reg(1);

  tapInst23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap23_re <= to_signed(16#00000#, 18);
      tap23_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap23_re <= tap22_re;
        tap23_im <= tap22_im;
      END IF;
    END IF;
  END PROCESS tapInst23_process;


  tapRegInst23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg23_re <= to_signed(16#00000#, 18);
      tapReg23_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg23_re <= tap23_re;
        tapReg23_im <= tap23_im;
      END IF;
    END IF;
  END PROCESS tapRegInst23_process;


  productPipeInst23_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst23_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst23_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst23_reg_im(0) <= tapReg23_im;
        productPipeInst23_reg_im(1) <= productPipeInst23_reg_im(0);
        productPipeInst23_reg_re(0) <= tapReg23_re;
        productPipeInst23_reg_re(1) <= productPipeInst23_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst23_1_process;

  tapMultPipe23_re <= productPipeInst23_reg_re(1);
  tapMultPipe23_im <= productPipeInst23_reg_im(1);

  product23_re <= coeffMultPipe23 * tapMultPipe23_re;
  product23_im <= coeffMultPipe23 * tapMultPipe23_im;

  productPipeInst23_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst23_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst23_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst23_reg_im_1(0) <= product23_im;
        productPipeInst23_reg_im_1(1) <= productPipeInst23_reg_im_1(0);
        productPipeInst23_reg_re_1(0) <= product23_re;
        productPipeInst23_reg_re_1(1) <= productPipeInst23_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst23_2_process;

  productPipe23_re <= productPipeInst23_reg_re_1(1);
  productPipe23_im <= productPipeInst23_reg_im_1(1);

  sumStage0Term11_re <= productPipe22_re + productPipe23_re;
  sumStage0Term11_im <= productPipe22_im + productPipe23_im;

  sumStage0Term11RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage0Term11_re_1 <= to_signed(0, 36);
      sumStage0Term11_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage0Term11_re_1 <= sumStage0Term11_re;
        sumStage0Term11_im_1 <= sumStage0Term11_im;
      END IF;
    END IF;
  END PROCESS sumStage0Term11RegInst_process;


  sumStage1Term5_re <= sumStage0Term10_re_1 + sumStage0Term11_re_1;
  sumStage1Term5_im <= sumStage0Term10_im_1 + sumStage0Term11_im_1;

  sumStage1Term5RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage1Term5_re_1 <= to_signed(0, 36);
      sumStage1Term5_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage1Term5_re_1 <= sumStage1Term5_re;
        sumStage1Term5_im_1 <= sumStage1Term5_im;
      END IF;
    END IF;
  END PROCESS sumStage1Term5RegInst_process;


  sumStage2Term2_re <= sumStage1Term4_re_1 + sumStage1Term5_re_1;
  sumStage2Term2_im <= sumStage1Term4_im_1 + sumStage1Term5_im_1;

  sumStage2Term2RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage2Term2_re_1 <= to_signed(0, 36);
      sumStage2Term2_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage2Term2_re_1 <= sumStage2Term2_re;
        sumStage2Term2_im_1 <= sumStage2Term2_im;
      END IF;
    END IF;
  END PROCESS sumStage2Term2RegInst_process;


  -- coefficient table for tap 24
  coeffTableInst24_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut24 <= to_signed(16#00000#, 18);
      WHEN OTHERS => 
        coeffTableOut24 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst24_output;


  coeffRegInst24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg24 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg24 <= coeffTableOut24;
      END IF;
    END IF;
  END PROCESS coeffRegInst24_process;


  productPipeInst24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst24_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst24_reg(0) <= coeffReg24;
        productPipeInst24_reg(1) <= productPipeInst24_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst24_process;

  coeffMultPipe24 <= productPipeInst24_reg(1);

  tapInst24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap24_re <= to_signed(16#00000#, 18);
      tap24_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap24_re <= tap23_re;
        tap24_im <= tap23_im;
      END IF;
    END IF;
  END PROCESS tapInst24_process;


  tapRegInst24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg24_re <= to_signed(16#00000#, 18);
      tapReg24_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg24_re <= tap24_re;
        tapReg24_im <= tap24_im;
      END IF;
    END IF;
  END PROCESS tapRegInst24_process;


  productPipeInst24_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst24_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst24_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst24_reg_im(0) <= tapReg24_im;
        productPipeInst24_reg_im(1) <= productPipeInst24_reg_im(0);
        productPipeInst24_reg_re(0) <= tapReg24_re;
        productPipeInst24_reg_re(1) <= productPipeInst24_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst24_1_process;

  tapMultPipe24_re <= productPipeInst24_reg_re(1);
  tapMultPipe24_im <= productPipeInst24_reg_im(1);

  product24_re <= coeffMultPipe24 * tapMultPipe24_re;
  product24_im <= coeffMultPipe24 * tapMultPipe24_im;

  productPipeInst24_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst24_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst24_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst24_reg_im_1(0) <= product24_im;
        productPipeInst24_reg_im_1(1) <= productPipeInst24_reg_im_1(0);
        productPipeInst24_reg_re_1(0) <= product24_re;
        productPipeInst24_reg_re_1(1) <= productPipeInst24_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst24_2_process;

  productPipe24_re <= productPipeInst24_reg_re_1(1);
  productPipe24_im <= productPipeInst24_reg_im_1(1);

  -- coefficient table for tap 25
  coeffTableInst25_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut25 <= to_signed(16#01B66#, 18);
      WHEN OTHERS => 
        coeffTableOut25 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst25_output;


  coeffRegInst25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg25 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg25 <= coeffTableOut25;
      END IF;
    END IF;
  END PROCESS coeffRegInst25_process;


  productPipeInst25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst25_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst25_reg(0) <= coeffReg25;
        productPipeInst25_reg(1) <= productPipeInst25_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst25_process;

  coeffMultPipe25 <= productPipeInst25_reg(1);

  tapInst25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap25_re <= to_signed(16#00000#, 18);
      tap25_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap25_re <= tap24_re;
        tap25_im <= tap24_im;
      END IF;
    END IF;
  END PROCESS tapInst25_process;


  tapRegInst25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg25_re <= to_signed(16#00000#, 18);
      tapReg25_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg25_re <= tap25_re;
        tapReg25_im <= tap25_im;
      END IF;
    END IF;
  END PROCESS tapRegInst25_process;


  productPipeInst25_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst25_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst25_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst25_reg_im(0) <= tapReg25_im;
        productPipeInst25_reg_im(1) <= productPipeInst25_reg_im(0);
        productPipeInst25_reg_re(0) <= tapReg25_re;
        productPipeInst25_reg_re(1) <= productPipeInst25_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst25_1_process;

  tapMultPipe25_re <= productPipeInst25_reg_re(1);
  tapMultPipe25_im <= productPipeInst25_reg_im(1);

  product25_re <= coeffMultPipe25 * tapMultPipe25_re;
  product25_im <= coeffMultPipe25 * tapMultPipe25_im;

  productPipeInst25_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst25_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst25_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst25_reg_im_1(0) <= product25_im;
        productPipeInst25_reg_im_1(1) <= productPipeInst25_reg_im_1(0);
        productPipeInst25_reg_re_1(0) <= product25_re;
        productPipeInst25_reg_re_1(1) <= productPipeInst25_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst25_2_process;

  productPipe25_re <= productPipeInst25_reg_re_1(1);
  productPipe25_im <= productPipeInst25_reg_im_1(1);

  sumStage0Term12_re <= productPipe24_re + productPipe25_re;
  sumStage0Term12_im <= productPipe24_im + productPipe25_im;

  sumStage0Term12RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage0Term12_re_1 <= to_signed(0, 36);
      sumStage0Term12_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage0Term12_re_1 <= sumStage0Term12_re;
        sumStage0Term12_im_1 <= sumStage0Term12_im;
      END IF;
    END IF;
  END PROCESS sumStage0Term12RegInst_process;


  -- coefficient table for tap 26
  coeffTableInst26_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut26 <= to_signed(16#00000#, 18);
      WHEN OTHERS => 
        coeffTableOut26 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst26_output;


  coeffRegInst26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg26 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg26 <= coeffTableOut26;
      END IF;
    END IF;
  END PROCESS coeffRegInst26_process;


  productPipeInst26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst26_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst26_reg(0) <= coeffReg26;
        productPipeInst26_reg(1) <= productPipeInst26_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst26_process;

  coeffMultPipe26 <= productPipeInst26_reg(1);

  tapInst26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap26_re <= to_signed(16#00000#, 18);
      tap26_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap26_re <= tap25_re;
        tap26_im <= tap25_im;
      END IF;
    END IF;
  END PROCESS tapInst26_process;


  tapRegInst26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg26_re <= to_signed(16#00000#, 18);
      tapReg26_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg26_re <= tap26_re;
        tapReg26_im <= tap26_im;
      END IF;
    END IF;
  END PROCESS tapRegInst26_process;


  productPipeInst26_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst26_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst26_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst26_reg_im(0) <= tapReg26_im;
        productPipeInst26_reg_im(1) <= productPipeInst26_reg_im(0);
        productPipeInst26_reg_re(0) <= tapReg26_re;
        productPipeInst26_reg_re(1) <= productPipeInst26_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst26_1_process;

  tapMultPipe26_re <= productPipeInst26_reg_re(1);
  tapMultPipe26_im <= productPipeInst26_reg_im(1);

  product26_re <= coeffMultPipe26 * tapMultPipe26_re;
  product26_im <= coeffMultPipe26 * tapMultPipe26_im;

  productPipeInst26_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst26_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst26_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst26_reg_im_1(0) <= product26_im;
        productPipeInst26_reg_im_1(1) <= productPipeInst26_reg_im_1(0);
        productPipeInst26_reg_re_1(0) <= product26_re;
        productPipeInst26_reg_re_1(1) <= productPipeInst26_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst26_2_process;

  productPipe26_re <= productPipeInst26_reg_re_1(1);
  productPipe26_im <= productPipeInst26_reg_im_1(1);

  -- coefficient table for tap 27
  coeffTableInst27_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut27 <= to_signed(-16#0107D#, 18);
      WHEN OTHERS => 
        coeffTableOut27 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst27_output;


  coeffRegInst27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg27 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg27 <= coeffTableOut27;
      END IF;
    END IF;
  END PROCESS coeffRegInst27_process;


  productPipeInst27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst27_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst27_reg(0) <= coeffReg27;
        productPipeInst27_reg(1) <= productPipeInst27_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst27_process;

  coeffMultPipe27 <= productPipeInst27_reg(1);

  tapInst27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap27_re <= to_signed(16#00000#, 18);
      tap27_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap27_re <= tap26_re;
        tap27_im <= tap26_im;
      END IF;
    END IF;
  END PROCESS tapInst27_process;


  tapRegInst27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg27_re <= to_signed(16#00000#, 18);
      tapReg27_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg27_re <= tap27_re;
        tapReg27_im <= tap27_im;
      END IF;
    END IF;
  END PROCESS tapRegInst27_process;


  productPipeInst27_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst27_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst27_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst27_reg_im(0) <= tapReg27_im;
        productPipeInst27_reg_im(1) <= productPipeInst27_reg_im(0);
        productPipeInst27_reg_re(0) <= tapReg27_re;
        productPipeInst27_reg_re(1) <= productPipeInst27_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst27_1_process;

  tapMultPipe27_re <= productPipeInst27_reg_re(1);
  tapMultPipe27_im <= productPipeInst27_reg_im(1);

  product27_re <= coeffMultPipe27 * tapMultPipe27_re;
  product27_im <= coeffMultPipe27 * tapMultPipe27_im;

  productPipeInst27_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst27_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst27_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst27_reg_im_1(0) <= product27_im;
        productPipeInst27_reg_im_1(1) <= productPipeInst27_reg_im_1(0);
        productPipeInst27_reg_re_1(0) <= product27_re;
        productPipeInst27_reg_re_1(1) <= productPipeInst27_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst27_2_process;

  productPipe27_re <= productPipeInst27_reg_re_1(1);
  productPipe27_im <= productPipeInst27_reg_im_1(1);

  sumStage0Term13_re <= productPipe26_re + productPipe27_re;
  sumStage0Term13_im <= productPipe26_im + productPipe27_im;

  sumStage0Term13RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage0Term13_re_1 <= to_signed(0, 36);
      sumStage0Term13_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage0Term13_re_1 <= sumStage0Term13_re;
        sumStage0Term13_im_1 <= sumStage0Term13_im;
      END IF;
    END IF;
  END PROCESS sumStage0Term13RegInst_process;


  sumStage1Term6_re <= sumStage0Term12_re_1 + sumStage0Term13_re_1;
  sumStage1Term6_im <= sumStage0Term12_im_1 + sumStage0Term13_im_1;

  sumStage1Term6RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage1Term6_re_1 <= to_signed(0, 36);
      sumStage1Term6_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage1Term6_re_1 <= sumStage1Term6_re;
        sumStage1Term6_im_1 <= sumStage1Term6_im;
      END IF;
    END IF;
  END PROCESS sumStage1Term6RegInst_process;


  -- coefficient table for tap 28
  coeffTableInst28_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut28 <= to_signed(16#00000#, 18);
      WHEN OTHERS => 
        coeffTableOut28 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst28_output;


  coeffRegInst28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg28 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg28 <= coeffTableOut28;
      END IF;
    END IF;
  END PROCESS coeffRegInst28_process;


  productPipeInst28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst28_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst28_reg(0) <= coeffReg28;
        productPipeInst28_reg(1) <= productPipeInst28_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst28_process;

  coeffMultPipe28 <= productPipeInst28_reg(1);

  tapInst28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap28_re <= to_signed(16#00000#, 18);
      tap28_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap28_re <= tap27_re;
        tap28_im <= tap27_im;
      END IF;
    END IF;
  END PROCESS tapInst28_process;


  tapRegInst28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg28_re <= to_signed(16#00000#, 18);
      tapReg28_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg28_re <= tap28_re;
        tapReg28_im <= tap28_im;
      END IF;
    END IF;
  END PROCESS tapRegInst28_process;


  productPipeInst28_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst28_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst28_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst28_reg_im(0) <= tapReg28_im;
        productPipeInst28_reg_im(1) <= productPipeInst28_reg_im(0);
        productPipeInst28_reg_re(0) <= tapReg28_re;
        productPipeInst28_reg_re(1) <= productPipeInst28_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst28_1_process;

  tapMultPipe28_re <= productPipeInst28_reg_re(1);
  tapMultPipe28_im <= productPipeInst28_reg_im(1);

  product28_re <= coeffMultPipe28 * tapMultPipe28_re;
  product28_im <= coeffMultPipe28 * tapMultPipe28_im;

  productPipeInst28_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst28_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst28_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst28_reg_im_1(0) <= product28_im;
        productPipeInst28_reg_im_1(1) <= productPipeInst28_reg_im_1(0);
        productPipeInst28_reg_re_1(0) <= product28_re;
        productPipeInst28_reg_re_1(1) <= productPipeInst28_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst28_2_process;

  productPipe28_re <= productPipeInst28_reg_re_1(1);
  productPipe28_im <= productPipeInst28_reg_im_1(1);

  -- coefficient table for tap 29
  coeffTableInst29_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut29 <= to_signed(16#00A21#, 18);
      WHEN OTHERS => 
        coeffTableOut29 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst29_output;


  coeffRegInst29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg29 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg29 <= coeffTableOut29;
      END IF;
    END IF;
  END PROCESS coeffRegInst29_process;


  productPipeInst29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst29_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst29_reg(0) <= coeffReg29;
        productPipeInst29_reg(1) <= productPipeInst29_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst29_process;

  coeffMultPipe29 <= productPipeInst29_reg(1);

  tapInst29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap29_re <= to_signed(16#00000#, 18);
      tap29_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap29_re <= tap28_re;
        tap29_im <= tap28_im;
      END IF;
    END IF;
  END PROCESS tapInst29_process;


  tapRegInst29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg29_re <= to_signed(16#00000#, 18);
      tapReg29_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg29_re <= tap29_re;
        tapReg29_im <= tap29_im;
      END IF;
    END IF;
  END PROCESS tapRegInst29_process;


  productPipeInst29_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst29_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst29_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst29_reg_im(0) <= tapReg29_im;
        productPipeInst29_reg_im(1) <= productPipeInst29_reg_im(0);
        productPipeInst29_reg_re(0) <= tapReg29_re;
        productPipeInst29_reg_re(1) <= productPipeInst29_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst29_1_process;

  tapMultPipe29_re <= productPipeInst29_reg_re(1);
  tapMultPipe29_im <= productPipeInst29_reg_im(1);

  product29_re <= coeffMultPipe29 * tapMultPipe29_re;
  product29_im <= coeffMultPipe29 * tapMultPipe29_im;

  productPipeInst29_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst29_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst29_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst29_reg_im_1(0) <= product29_im;
        productPipeInst29_reg_im_1(1) <= productPipeInst29_reg_im_1(0);
        productPipeInst29_reg_re_1(0) <= product29_re;
        productPipeInst29_reg_re_1(1) <= productPipeInst29_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst29_2_process;

  productPipe29_re <= productPipeInst29_reg_re_1(1);
  productPipe29_im <= productPipeInst29_reg_im_1(1);

  sumStage0Term14_re <= productPipe28_re + productPipe29_re;
  sumStage0Term14_im <= productPipe28_im + productPipe29_im;

  sumStage0Term14RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage0Term14_re_1 <= to_signed(0, 36);
      sumStage0Term14_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage0Term14_re_1 <= sumStage0Term14_re;
        sumStage0Term14_im_1 <= sumStage0Term14_im;
      END IF;
    END IF;
  END PROCESS sumStage0Term14RegInst_process;


  -- coefficient table for tap 30
  coeffTableInst30_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut30 <= to_signed(16#00000#, 18);
      WHEN OTHERS => 
        coeffTableOut30 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst30_output;


  coeffRegInst30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg30 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg30 <= coeffTableOut30;
      END IF;
    END IF;
  END PROCESS coeffRegInst30_process;


  productPipeInst30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst30_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst30_reg(0) <= coeffReg30;
        productPipeInst30_reg(1) <= productPipeInst30_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst30_process;

  coeffMultPipe30 <= productPipeInst30_reg(1);

  tapInst30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap30_re <= to_signed(16#00000#, 18);
      tap30_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap30_re <= tap29_re;
        tap30_im <= tap29_im;
      END IF;
    END IF;
  END PROCESS tapInst30_process;


  tapRegInst30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg30_re <= to_signed(16#00000#, 18);
      tapReg30_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg30_re <= tap30_re;
        tapReg30_im <= tap30_im;
      END IF;
    END IF;
  END PROCESS tapRegInst30_process;


  productPipeInst30_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst30_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst30_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst30_reg_im(0) <= tapReg30_im;
        productPipeInst30_reg_im(1) <= productPipeInst30_reg_im(0);
        productPipeInst30_reg_re(0) <= tapReg30_re;
        productPipeInst30_reg_re(1) <= productPipeInst30_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst30_1_process;

  tapMultPipe30_re <= productPipeInst30_reg_re(1);
  tapMultPipe30_im <= productPipeInst30_reg_im(1);

  product30_re <= coeffMultPipe30 * tapMultPipe30_re;
  product30_im <= coeffMultPipe30 * tapMultPipe30_im;

  productPipeInst30_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst30_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst30_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst30_reg_im_1(0) <= product30_im;
        productPipeInst30_reg_im_1(1) <= productPipeInst30_reg_im_1(0);
        productPipeInst30_reg_re_1(0) <= product30_re;
        productPipeInst30_reg_re_1(1) <= productPipeInst30_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst30_2_process;

  productPipe30_re <= productPipeInst30_reg_re_1(1);
  productPipe30_im <= productPipeInst30_reg_im_1(1);

  -- coefficient table for tap 31
  coeffTableInst31_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut31 <= to_signed(-16#00616#, 18);
      WHEN OTHERS => 
        coeffTableOut31 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst31_output;


  coeffRegInst31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg31 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg31 <= coeffTableOut31;
      END IF;
    END IF;
  END PROCESS coeffRegInst31_process;


  productPipeInst31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst31_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst31_reg(0) <= coeffReg31;
        productPipeInst31_reg(1) <= productPipeInst31_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst31_process;

  coeffMultPipe31 <= productPipeInst31_reg(1);

  tapInst31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap31_re <= to_signed(16#00000#, 18);
      tap31_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap31_re <= tap30_re;
        tap31_im <= tap30_im;
      END IF;
    END IF;
  END PROCESS tapInst31_process;


  tapRegInst31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg31_re <= to_signed(16#00000#, 18);
      tapReg31_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg31_re <= tap31_re;
        tapReg31_im <= tap31_im;
      END IF;
    END IF;
  END PROCESS tapRegInst31_process;


  productPipeInst31_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst31_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst31_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst31_reg_im(0) <= tapReg31_im;
        productPipeInst31_reg_im(1) <= productPipeInst31_reg_im(0);
        productPipeInst31_reg_re(0) <= tapReg31_re;
        productPipeInst31_reg_re(1) <= productPipeInst31_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst31_1_process;

  tapMultPipe31_re <= productPipeInst31_reg_re(1);
  tapMultPipe31_im <= productPipeInst31_reg_im(1);

  product31_re <= coeffMultPipe31 * tapMultPipe31_re;
  product31_im <= coeffMultPipe31 * tapMultPipe31_im;

  productPipeInst31_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst31_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst31_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst31_reg_im_1(0) <= product31_im;
        productPipeInst31_reg_im_1(1) <= productPipeInst31_reg_im_1(0);
        productPipeInst31_reg_re_1(0) <= product31_re;
        productPipeInst31_reg_re_1(1) <= productPipeInst31_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst31_2_process;

  productPipe31_re <= productPipeInst31_reg_re_1(1);
  productPipe31_im <= productPipeInst31_reg_im_1(1);

  sumStage0Term15_re <= productPipe30_re + productPipe31_re;
  sumStage0Term15_im <= productPipe30_im + productPipe31_im;

  sumStage0Term15RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage0Term15_re_1 <= to_signed(0, 36);
      sumStage0Term15_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage0Term15_re_1 <= sumStage0Term15_re;
        sumStage0Term15_im_1 <= sumStage0Term15_im;
      END IF;
    END IF;
  END PROCESS sumStage0Term15RegInst_process;


  sumStage1Term7_re <= sumStage0Term14_re_1 + sumStage0Term15_re_1;
  sumStage1Term7_im <= sumStage0Term14_im_1 + sumStage0Term15_im_1;

  sumStage1Term7RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage1Term7_re_1 <= to_signed(0, 36);
      sumStage1Term7_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage1Term7_re_1 <= sumStage1Term7_re;
        sumStage1Term7_im_1 <= sumStage1Term7_im;
      END IF;
    END IF;
  END PROCESS sumStage1Term7RegInst_process;


  sumStage2Term3_re <= sumStage1Term6_re_1 + sumStage1Term7_re_1;
  sumStage2Term3_im <= sumStage1Term6_im_1 + sumStage1Term7_im_1;

  sumStage2Term3RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage2Term3_re_1 <= to_signed(0, 36);
      sumStage2Term3_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage2Term3_re_1 <= sumStage2Term3_re;
        sumStage2Term3_im_1 <= sumStage2Term3_im;
      END IF;
    END IF;
  END PROCESS sumStage2Term3RegInst_process;


  sumStage3Term1_re <= sumStage2Term2_re_1 + sumStage2Term3_re_1;
  sumStage3Term1_im <= sumStage2Term2_im_1 + sumStage2Term3_im_1;

  sumStage3Term1RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage3Term1_re_1 <= to_signed(0, 36);
      sumStage3Term1_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage3Term1_re_1 <= sumStage3Term1_re;
        sumStage3Term1_im_1 <= sumStage3Term1_im;
      END IF;
    END IF;
  END PROCESS sumStage3Term1RegInst_process;


  sumStage4Term0_re <= sumStage3Term0_re_1 + sumStage3Term1_re_1;
  sumStage4Term0_im <= sumStage3Term0_im_1 + sumStage3Term1_im_1;

  sumStage4Term0RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage4Term0_re_1 <= to_signed(0, 36);
      sumStage4Term0_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage4Term0_re_1 <= sumStage4Term0_re;
        sumStage4Term0_im_1 <= sumStage4Term0_im;
      END IF;
    END IF;
  END PROCESS sumStage4Term0RegInst_process;


  -- coefficient table for tap 32
  coeffTableInst32_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut32 <= to_signed(16#00000#, 18);
      WHEN OTHERS => 
        coeffTableOut32 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst32_output;


  coeffRegInst32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg32 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg32 <= coeffTableOut32;
      END IF;
    END IF;
  END PROCESS coeffRegInst32_process;


  productPipeInst32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst32_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst32_reg(0) <= coeffReg32;
        productPipeInst32_reg(1) <= productPipeInst32_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst32_process;

  coeffMultPipe32 <= productPipeInst32_reg(1);

  tapInst32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap32_re <= to_signed(16#00000#, 18);
      tap32_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap32_re <= tap31_re;
        tap32_im <= tap31_im;
      END IF;
    END IF;
  END PROCESS tapInst32_process;


  tapRegInst32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg32_re <= to_signed(16#00000#, 18);
      tapReg32_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg32_re <= tap32_re;
        tapReg32_im <= tap32_im;
      END IF;
    END IF;
  END PROCESS tapRegInst32_process;


  productPipeInst32_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst32_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst32_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst32_reg_im(0) <= tapReg32_im;
        productPipeInst32_reg_im(1) <= productPipeInst32_reg_im(0);
        productPipeInst32_reg_re(0) <= tapReg32_re;
        productPipeInst32_reg_re(1) <= productPipeInst32_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst32_1_process;

  tapMultPipe32_re <= productPipeInst32_reg_re(1);
  tapMultPipe32_im <= productPipeInst32_reg_im(1);

  product32_re <= coeffMultPipe32 * tapMultPipe32_re;
  product32_im <= coeffMultPipe32 * tapMultPipe32_im;

  productPipeInst32_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst32_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst32_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst32_reg_im_1(0) <= product32_im;
        productPipeInst32_reg_im_1(1) <= productPipeInst32_reg_im_1(0);
        productPipeInst32_reg_re_1(0) <= product32_re;
        productPipeInst32_reg_re_1(1) <= productPipeInst32_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst32_2_process;

  productPipe32_re <= productPipeInst32_reg_re_1(1);
  productPipe32_im <= productPipeInst32_reg_im_1(1);

  -- coefficient table for tap 33
  coeffTableInst33_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut33 <= to_signed(16#00378#, 18);
      WHEN OTHERS => 
        coeffTableOut33 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst33_output;


  coeffRegInst33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg33 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg33 <= coeffTableOut33;
      END IF;
    END IF;
  END PROCESS coeffRegInst33_process;


  productPipeInst33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst33_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst33_reg(0) <= coeffReg33;
        productPipeInst33_reg(1) <= productPipeInst33_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst33_process;

  coeffMultPipe33 <= productPipeInst33_reg(1);

  tapInst33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap33_re <= to_signed(16#00000#, 18);
      tap33_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap33_re <= tap32_re;
        tap33_im <= tap32_im;
      END IF;
    END IF;
  END PROCESS tapInst33_process;


  tapRegInst33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg33_re <= to_signed(16#00000#, 18);
      tapReg33_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg33_re <= tap33_re;
        tapReg33_im <= tap33_im;
      END IF;
    END IF;
  END PROCESS tapRegInst33_process;


  productPipeInst33_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst33_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst33_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst33_reg_im(0) <= tapReg33_im;
        productPipeInst33_reg_im(1) <= productPipeInst33_reg_im(0);
        productPipeInst33_reg_re(0) <= tapReg33_re;
        productPipeInst33_reg_re(1) <= productPipeInst33_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst33_1_process;

  tapMultPipe33_re <= productPipeInst33_reg_re(1);
  tapMultPipe33_im <= productPipeInst33_reg_im(1);

  product33_re <= coeffMultPipe33 * tapMultPipe33_re;
  product33_im <= coeffMultPipe33 * tapMultPipe33_im;

  productPipeInst33_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst33_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst33_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst33_reg_im_1(0) <= product33_im;
        productPipeInst33_reg_im_1(1) <= productPipeInst33_reg_im_1(0);
        productPipeInst33_reg_re_1(0) <= product33_re;
        productPipeInst33_reg_re_1(1) <= productPipeInst33_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst33_2_process;

  productPipe33_re <= productPipeInst33_reg_re_1(1);
  productPipe33_im <= productPipeInst33_reg_im_1(1);

  sumStage0Term16_re <= productPipe32_re + productPipe33_re;
  sumStage0Term16_im <= productPipe32_im + productPipe33_im;

  sumStage0Term16RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage0Term16_re_1 <= to_signed(0, 36);
      sumStage0Term16_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage0Term16_re_1 <= sumStage0Term16_re;
        sumStage0Term16_im_1 <= sumStage0Term16_im;
      END IF;
    END IF;
  END PROCESS sumStage0Term16RegInst_process;


  -- coefficient table for tap 34
  coeffTableInst34_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut34 <= to_signed(16#00000#, 18);
      WHEN OTHERS => 
        coeffTableOut34 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst34_output;


  coeffRegInst34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg34 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg34 <= coeffTableOut34;
      END IF;
    END IF;
  END PROCESS coeffRegInst34_process;


  productPipeInst34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst34_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst34_reg(0) <= coeffReg34;
        productPipeInst34_reg(1) <= productPipeInst34_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst34_process;

  coeffMultPipe34 <= productPipeInst34_reg(1);

  tapInst34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap34_re <= to_signed(16#00000#, 18);
      tap34_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap34_re <= tap33_re;
        tap34_im <= tap33_im;
      END IF;
    END IF;
  END PROCESS tapInst34_process;


  tapRegInst34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg34_re <= to_signed(16#00000#, 18);
      tapReg34_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg34_re <= tap34_re;
        tapReg34_im <= tap34_im;
      END IF;
    END IF;
  END PROCESS tapRegInst34_process;


  productPipeInst34_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst34_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst34_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst34_reg_im(0) <= tapReg34_im;
        productPipeInst34_reg_im(1) <= productPipeInst34_reg_im(0);
        productPipeInst34_reg_re(0) <= tapReg34_re;
        productPipeInst34_reg_re(1) <= productPipeInst34_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst34_1_process;

  tapMultPipe34_re <= productPipeInst34_reg_re(1);
  tapMultPipe34_im <= productPipeInst34_reg_im(1);

  product34_re <= coeffMultPipe34 * tapMultPipe34_re;
  product34_im <= coeffMultPipe34 * tapMultPipe34_im;

  productPipeInst34_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst34_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst34_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst34_reg_im_1(0) <= product34_im;
        productPipeInst34_reg_im_1(1) <= productPipeInst34_reg_im_1(0);
        productPipeInst34_reg_re_1(0) <= product34_re;
        productPipeInst34_reg_re_1(1) <= productPipeInst34_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst34_2_process;

  productPipe34_re <= productPipeInst34_reg_re_1(1);
  productPipe34_im <= productPipeInst34_reg_im_1(1);

  -- coefficient table for tap 35
  coeffTableInst35_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut35 <= to_signed(-16#001D1#, 18);
      WHEN OTHERS => 
        coeffTableOut35 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst35_output;


  coeffRegInst35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg35 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg35 <= coeffTableOut35;
      END IF;
    END IF;
  END PROCESS coeffRegInst35_process;


  productPipeInst35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst35_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst35_reg(0) <= coeffReg35;
        productPipeInst35_reg(1) <= productPipeInst35_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst35_process;

  coeffMultPipe35 <= productPipeInst35_reg(1);

  tapInst35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap35_re <= to_signed(16#00000#, 18);
      tap35_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap35_re <= tap34_re;
        tap35_im <= tap34_im;
      END IF;
    END IF;
  END PROCESS tapInst35_process;


  tapRegInst35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg35_re <= to_signed(16#00000#, 18);
      tapReg35_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg35_re <= tap35_re;
        tapReg35_im <= tap35_im;
      END IF;
    END IF;
  END PROCESS tapRegInst35_process;


  productPipeInst35_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst35_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst35_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst35_reg_im(0) <= tapReg35_im;
        productPipeInst35_reg_im(1) <= productPipeInst35_reg_im(0);
        productPipeInst35_reg_re(0) <= tapReg35_re;
        productPipeInst35_reg_re(1) <= productPipeInst35_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst35_1_process;

  tapMultPipe35_re <= productPipeInst35_reg_re(1);
  tapMultPipe35_im <= productPipeInst35_reg_im(1);

  product35_re <= coeffMultPipe35 * tapMultPipe35_re;
  product35_im <= coeffMultPipe35 * tapMultPipe35_im;

  productPipeInst35_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst35_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst35_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst35_reg_im_1(0) <= product35_im;
        productPipeInst35_reg_im_1(1) <= productPipeInst35_reg_im_1(0);
        productPipeInst35_reg_re_1(0) <= product35_re;
        productPipeInst35_reg_re_1(1) <= productPipeInst35_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst35_2_process;

  productPipe35_re <= productPipeInst35_reg_re_1(1);
  productPipe35_im <= productPipeInst35_reg_im_1(1);

  sumStage0Term17_re <= productPipe34_re + productPipe35_re;
  sumStage0Term17_im <= productPipe34_im + productPipe35_im;

  sumStage0Term17RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage0Term17_re_1 <= to_signed(0, 36);
      sumStage0Term17_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage0Term17_re_1 <= sumStage0Term17_re;
        sumStage0Term17_im_1 <= sumStage0Term17_im;
      END IF;
    END IF;
  END PROCESS sumStage0Term17RegInst_process;


  sumStage1Term8_re <= sumStage0Term16_re_1 + sumStage0Term17_re_1;
  sumStage1Term8_im <= sumStage0Term16_im_1 + sumStage0Term17_im_1;

  sumStage1Term8RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage1Term8_re_1 <= to_signed(0, 36);
      sumStage1Term8_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage1Term8_re_1 <= sumStage1Term8_re;
        sumStage1Term8_im_1 <= sumStage1Term8_im;
      END IF;
    END IF;
  END PROCESS sumStage1Term8RegInst_process;


  -- coefficient table for tap 36
  coeffTableInst36_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut36 <= to_signed(16#00000#, 18);
      WHEN OTHERS => 
        coeffTableOut36 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst36_output;


  coeffRegInst36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg36 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg36 <= coeffTableOut36;
      END IF;
    END IF;
  END PROCESS coeffRegInst36_process;


  productPipeInst36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst36_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst36_reg(0) <= coeffReg36;
        productPipeInst36_reg(1) <= productPipeInst36_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst36_process;

  coeffMultPipe36 <= productPipeInst36_reg(1);

  tapInst36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap36_re <= to_signed(16#00000#, 18);
      tap36_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap36_re <= tap35_re;
        tap36_im <= tap35_im;
      END IF;
    END IF;
  END PROCESS tapInst36_process;


  tapRegInst36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg36_re <= to_signed(16#00000#, 18);
      tapReg36_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg36_re <= tap36_re;
        tapReg36_im <= tap36_im;
      END IF;
    END IF;
  END PROCESS tapRegInst36_process;


  productPipeInst36_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst36_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst36_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst36_reg_im(0) <= tapReg36_im;
        productPipeInst36_reg_im(1) <= productPipeInst36_reg_im(0);
        productPipeInst36_reg_re(0) <= tapReg36_re;
        productPipeInst36_reg_re(1) <= productPipeInst36_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst36_1_process;

  tapMultPipe36_re <= productPipeInst36_reg_re(1);
  tapMultPipe36_im <= productPipeInst36_reg_im(1);

  product36_re <= coeffMultPipe36 * tapMultPipe36_re;
  product36_im <= coeffMultPipe36 * tapMultPipe36_im;

  productPipeInst36_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst36_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst36_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst36_reg_im_1(0) <= product36_im;
        productPipeInst36_reg_im_1(1) <= productPipeInst36_reg_im_1(0);
        productPipeInst36_reg_re_1(0) <= product36_re;
        productPipeInst36_reg_re_1(1) <= productPipeInst36_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst36_2_process;

  productPipe36_re <= productPipeInst36_reg_re_1(1);
  productPipe36_im <= productPipeInst36_reg_im_1(1);

  -- coefficient table for tap 37
  coeffTableInst37_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut37 <= to_signed(16#000D6#, 18);
      WHEN OTHERS => 
        coeffTableOut37 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst37_output;


  coeffRegInst37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg37 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg37 <= coeffTableOut37;
      END IF;
    END IF;
  END PROCESS coeffRegInst37_process;


  productPipeInst37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst37_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst37_reg(0) <= coeffReg37;
        productPipeInst37_reg(1) <= productPipeInst37_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst37_process;

  coeffMultPipe37 <= productPipeInst37_reg(1);

  tapInst37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap37_re <= to_signed(16#00000#, 18);
      tap37_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap37_re <= tap36_re;
        tap37_im <= tap36_im;
      END IF;
    END IF;
  END PROCESS tapInst37_process;


  tapRegInst37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg37_re <= to_signed(16#00000#, 18);
      tapReg37_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg37_re <= tap37_re;
        tapReg37_im <= tap37_im;
      END IF;
    END IF;
  END PROCESS tapRegInst37_process;


  productPipeInst37_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst37_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst37_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst37_reg_im(0) <= tapReg37_im;
        productPipeInst37_reg_im(1) <= productPipeInst37_reg_im(0);
        productPipeInst37_reg_re(0) <= tapReg37_re;
        productPipeInst37_reg_re(1) <= productPipeInst37_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst37_1_process;

  tapMultPipe37_re <= productPipeInst37_reg_re(1);
  tapMultPipe37_im <= productPipeInst37_reg_im(1);

  product37_re <= coeffMultPipe37 * tapMultPipe37_re;
  product37_im <= coeffMultPipe37 * tapMultPipe37_im;

  productPipeInst37_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst37_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst37_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst37_reg_im_1(0) <= product37_im;
        productPipeInst37_reg_im_1(1) <= productPipeInst37_reg_im_1(0);
        productPipeInst37_reg_re_1(0) <= product37_re;
        productPipeInst37_reg_re_1(1) <= productPipeInst37_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst37_2_process;

  productPipe37_re <= productPipeInst37_reg_re_1(1);
  productPipe37_im <= productPipeInst37_reg_im_1(1);

  sumStage0Term18_re <= productPipe36_re + productPipe37_re;
  sumStage0Term18_im <= productPipe36_im + productPipe37_im;

  sumStage0Term18RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage0Term18_re_1 <= to_signed(0, 36);
      sumStage0Term18_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage0Term18_re_1 <= sumStage0Term18_re;
        sumStage0Term18_im_1 <= sumStage0Term18_im;
      END IF;
    END IF;
  END PROCESS sumStage0Term18RegInst_process;


  -- coefficient table for tap 38
  coeffTableInst38_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut38 <= to_signed(16#00000#, 18);
      WHEN OTHERS => 
        coeffTableOut38 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst38_output;


  coeffRegInst38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg38 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg38 <= coeffTableOut38;
      END IF;
    END IF;
  END PROCESS coeffRegInst38_process;


  productPipeInst38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst38_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst38_reg(0) <= coeffReg38;
        productPipeInst38_reg(1) <= productPipeInst38_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst38_process;

  coeffMultPipe38 <= productPipeInst38_reg(1);

  tapInst38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap38_re <= to_signed(16#00000#, 18);
      tap38_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap38_re <= tap37_re;
        tap38_im <= tap37_im;
      END IF;
    END IF;
  END PROCESS tapInst38_process;


  tapRegInst38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg38_re <= to_signed(16#00000#, 18);
      tapReg38_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg38_re <= tap38_re;
        tapReg38_im <= tap38_im;
      END IF;
    END IF;
  END PROCESS tapRegInst38_process;


  productPipeInst38_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst38_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst38_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst38_reg_im(0) <= tapReg38_im;
        productPipeInst38_reg_im(1) <= productPipeInst38_reg_im(0);
        productPipeInst38_reg_re(0) <= tapReg38_re;
        productPipeInst38_reg_re(1) <= productPipeInst38_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst38_1_process;

  tapMultPipe38_re <= productPipeInst38_reg_re(1);
  tapMultPipe38_im <= productPipeInst38_reg_im(1);

  product38_re <= coeffMultPipe38 * tapMultPipe38_re;
  product38_im <= coeffMultPipe38 * tapMultPipe38_im;

  productPipeInst38_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst38_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst38_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst38_reg_im_1(0) <= product38_im;
        productPipeInst38_reg_im_1(1) <= productPipeInst38_reg_im_1(0);
        productPipeInst38_reg_re_1(0) <= product38_re;
        productPipeInst38_reg_re_1(1) <= productPipeInst38_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst38_2_process;

  productPipe38_re <= productPipeInst38_reg_re_1(1);
  productPipe38_im <= productPipeInst38_reg_im_1(1);

  -- coefficient table for tap 39
  coeffTableInst39_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut39 <= to_signed(-16#00054#, 18);
      WHEN OTHERS => 
        coeffTableOut39 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst39_output;


  coeffRegInst39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg39 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg39 <= coeffTableOut39;
      END IF;
    END IF;
  END PROCESS coeffRegInst39_process;


  productPipeInst39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst39_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst39_reg(0) <= coeffReg39;
        productPipeInst39_reg(1) <= productPipeInst39_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst39_process;

  coeffMultPipe39 <= productPipeInst39_reg(1);

  tapInst39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap39_re <= to_signed(16#00000#, 18);
      tap39_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap39_re <= tap38_re;
        tap39_im <= tap38_im;
      END IF;
    END IF;
  END PROCESS tapInst39_process;


  tapRegInst39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg39_re <= to_signed(16#00000#, 18);
      tapReg39_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg39_re <= tap39_re;
        tapReg39_im <= tap39_im;
      END IF;
    END IF;
  END PROCESS tapRegInst39_process;


  productPipeInst39_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst39_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst39_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst39_reg_im(0) <= tapReg39_im;
        productPipeInst39_reg_im(1) <= productPipeInst39_reg_im(0);
        productPipeInst39_reg_re(0) <= tapReg39_re;
        productPipeInst39_reg_re(1) <= productPipeInst39_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst39_1_process;

  tapMultPipe39_re <= productPipeInst39_reg_re(1);
  tapMultPipe39_im <= productPipeInst39_reg_im(1);

  product39_re <= coeffMultPipe39 * tapMultPipe39_re;
  product39_im <= coeffMultPipe39 * tapMultPipe39_im;

  productPipeInst39_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst39_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst39_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst39_reg_im_1(0) <= product39_im;
        productPipeInst39_reg_im_1(1) <= productPipeInst39_reg_im_1(0);
        productPipeInst39_reg_re_1(0) <= product39_re;
        productPipeInst39_reg_re_1(1) <= productPipeInst39_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst39_2_process;

  productPipe39_re <= productPipeInst39_reg_re_1(1);
  productPipe39_im <= productPipeInst39_reg_im_1(1);

  sumStage0Term19_re <= productPipe38_re + productPipe39_re;
  sumStage0Term19_im <= productPipe38_im + productPipe39_im;

  sumStage0Term19RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage0Term19_re_1 <= to_signed(0, 36);
      sumStage0Term19_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage0Term19_re_1 <= sumStage0Term19_re;
        sumStage0Term19_im_1 <= sumStage0Term19_im;
      END IF;
    END IF;
  END PROCESS sumStage0Term19RegInst_process;


  sumStage1Term9_re <= sumStage0Term18_re_1 + sumStage0Term19_re_1;
  sumStage1Term9_im <= sumStage0Term18_im_1 + sumStage0Term19_im_1;

  sumStage1Term9RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage1Term9_re_1 <= to_signed(0, 36);
      sumStage1Term9_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage1Term9_re_1 <= sumStage1Term9_re;
        sumStage1Term9_im_1 <= sumStage1Term9_im;
      END IF;
    END IF;
  END PROCESS sumStage1Term9RegInst_process;


  sumStage2Term4_re <= sumStage1Term8_re_1 + sumStage1Term9_re_1;
  sumStage2Term4_im <= sumStage1Term8_im_1 + sumStage1Term9_im_1;

  sumStage2Term4RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage2Term4_re_1 <= to_signed(0, 36);
      sumStage2Term4_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage2Term4_re_1 <= sumStage2Term4_re;
        sumStage2Term4_im_1 <= sumStage2Term4_im;
      END IF;
    END IF;
  END PROCESS sumStage2Term4RegInst_process;


  -- coefficient table for tap 40
  coeffTableInst40_output : PROCESS (phase)
  BEGIN
    CASE phase IS
      WHEN '0' =>
        coeffTableOut40 <= to_signed(16#00000#, 18);
      WHEN OTHERS => 
        coeffTableOut40 <= to_signed(16#00000#, 18);
    END CASE;
  END PROCESS coeffTableInst40_output;


  coeffRegInst40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffReg40 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        coeffReg40 <= coeffTableOut40;
      END IF;
    END IF;
  END PROCESS coeffRegInst40_process;


  productPipeInst40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst40_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst40_reg(0) <= coeffReg40;
        productPipeInst40_reg(1) <= productPipeInst40_reg(0);
      END IF;
    END IF;
  END PROCESS productPipeInst40_process;

  coeffMultPipe40 <= productPipeInst40_reg(1);

  tapInst40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tap40_re <= to_signed(16#00000#, 18);
      tap40_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND dataValid = '1' THEN
        tap40_re <= tap39_re;
        tap40_im <= tap39_im;
      END IF;
    END IF;
  END PROCESS tapInst40_process;


  tapRegInst40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tapReg40_re <= to_signed(16#00000#, 18);
      tapReg40_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND capture = '1' THEN
        tapReg40_re <= tap40_re;
        tapReg40_im <= tap40_im;
      END IF;
    END IF;
  END PROCESS tapRegInst40_process;


  productPipeInst40_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst40_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      productPipeInst40_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst40_reg_im(0) <= tapReg40_im;
        productPipeInst40_reg_im(1) <= productPipeInst40_reg_im(0);
        productPipeInst40_reg_re(0) <= tapReg40_re;
        productPipeInst40_reg_re(1) <= productPipeInst40_reg_re(0);
      END IF;
    END IF;
  END PROCESS productPipeInst40_1_process;

  tapMultPipe40_re <= productPipeInst40_reg_re(1);
  tapMultPipe40_im <= productPipeInst40_reg_im(1);

  product40_re <= coeffMultPipe40 * tapMultPipe40_re;
  product40_im <= coeffMultPipe40 * tapMultPipe40_im;

  productPipeInst40_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      productPipeInst40_reg_re_1 <= (OTHERS => to_signed(0, 36));
      productPipeInst40_reg_im_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        productPipeInst40_reg_im_1(0) <= product40_im;
        productPipeInst40_reg_im_1(1) <= productPipeInst40_reg_im_1(0);
        productPipeInst40_reg_re_1(0) <= product40_re;
        productPipeInst40_reg_re_1(1) <= productPipeInst40_reg_re_1(0);
      END IF;
    END IF;
  END PROCESS productPipeInst40_2_process;

  productPipe40_re <= productPipeInst40_reg_re_1(1);
  productPipe40_im <= productPipeInst40_reg_im_1(1);

  sumStage0Term20RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage0Term20_re <= to_signed(0, 36);
      sumStage0Term20_im <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage0Term20_re <= productPipe40_re;
        sumStage0Term20_im <= productPipe40_im;
      END IF;
    END IF;
  END PROCESS sumStage0Term20RegInst_process;


  sumStage1Term10RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage1Term10_re <= to_signed(0, 36);
      sumStage1Term10_im <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage1Term10_re <= sumStage0Term20_re;
        sumStage1Term10_im <= sumStage0Term20_im;
      END IF;
    END IF;
  END PROCESS sumStage1Term10RegInst_process;


  sumStage2Term5RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage2Term5_re <= to_signed(0, 36);
      sumStage2Term5_im <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage2Term5_re <= sumStage1Term10_re;
        sumStage2Term5_im <= sumStage1Term10_im;
      END IF;
    END IF;
  END PROCESS sumStage2Term5RegInst_process;


  sumStage3Term2_re <= sumStage2Term4_re_1 + sumStage2Term5_re;
  sumStage3Term2_im <= sumStage2Term4_im_1 + sumStage2Term5_im;

  sumStage3Term2RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage3Term2_re_1 <= to_signed(0, 36);
      sumStage3Term2_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage3Term2_re_1 <= sumStage3Term2_re;
        sumStage3Term2_im_1 <= sumStage3Term2_im;
      END IF;
    END IF;
  END PROCESS sumStage3Term2RegInst_process;


  sumStage4Term1RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage4Term1_re <= to_signed(0, 36);
      sumStage4Term1_im <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage4Term1_re <= sumStage3Term2_re_1;
        sumStage4Term1_im <= sumStage3Term2_im_1;
      END IF;
    END IF;
  END PROCESS sumStage4Term1RegInst_process;


  sumStage5Term0_re <= sumStage4Term0_re_1 + sumStage4Term1_re;
  sumStage5Term0_im <= sumStage4Term0_im_1 + sumStage4Term1_im;

  sumStage5Term0RegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumStage5Term0_re_1 <= to_signed(0, 36);
      sumStage5Term0_im_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        sumStage5Term0_re_1 <= sumStage5Term0_re;
        sumStage5Term0_im_1 <= sumStage5Term0_im;
      END IF;
    END IF;
  END PROCESS sumStage5Term0RegInst_process;


  y_re <= sumStage5Term0_re_1(34 DOWNTO 17);
  y_im <= sumStage5Term0_im_1(34 DOWNTO 17);

  outputRegInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataOut_re_tmp <= to_signed(16#00000#, 18);
      dataOut_im_tmp <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        dataOut_re_tmp <= y_re;
        dataOut_im_tmp <= y_im;
      END IF;
    END IF;
  END PROCESS outputRegInst_process;


  dataOut_re <= std_logic_vector(dataOut_re_tmp);

  dataOut_im <= std_logic_vector(dataOut_im_tmp);

  validOutPipeInst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      validOutPipeInst_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND request = '1' THEN
        validOutPipeInst_reg(0) <= phaseValid;
        validOutPipeInst_reg(1 TO 11) <= validOutPipeInst_reg(0 TO 10);
      END IF;
    END IF;
  END PROCESS validOutPipeInst_process;

  validOut <= validOutPipeInst_reg(11);

END rtl;

