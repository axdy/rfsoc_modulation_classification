-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj_dma/hdlsrc/ltehdlCNN_AMC/amc_cnn_dma_src_SinglePortRAM_generic_block3.vhd
-- Created: 2023-02-01 23:11:33
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: amc_cnn_dma_src_SinglePortRAM_generic_block3
-- Source Path: ltehdlCNN_AMC/DUT HDL/Dense Layer 2/Dense Layer 2/Weight Storage 2/SinglePortRAM_generic
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY amc_cnn_dma_src_SinglePortRAM_generic_block3 IS
  GENERIC( AddrWidth                      : integer := 1;
           DataWidth                      : integer := 1
           );
  PORT( clk                               :   IN    std_logic;
        enb                               :   IN    std_logic;
        din                               :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
        addr                              :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
        we                                :   IN    std_logic;  -- ufix1
        dout                              :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
        );
END amc_cnn_dma_src_SinglePortRAM_generic_block3;


ARCHITECTURE rtl OF amc_cnn_dma_src_SinglePortRAM_generic_block3 IS

  -- Local Type Definitions
  TYPE ram_type IS ARRAY (2**AddrWidth - 1 DOWNTO 0) of std_logic_vector(DataWidth - 1 DOWNTO 0);

  -- Signals
  SIGNAL ram                              : ram_type := (B"111110011101001111", B"111110110100001011", B"111101101100011010", B"111101111101110100", B"000000010100011010", B"111011100011010010", B"111101111000100000", B"111111001000100111", B"111110110110111011", B"111101100111010010", B"111110001010100001",
                                                        B"000000101101010010", B"111110110101010000", B"000000010000010101", B"000000001101000011", B"000000100101100101", B"000000001100001011", B"111111111100001110", B"111111001101001001", B"111110011101011100", B"000000010100111100", B"000010100101101111",
                                                        B"111111011011001101", B"111101111011100001", B"000000010110000001", B"111101111101101011", B"000000110101111010", B"111100000001010111", B"000000010100100010", B"111111110111001000", B"111111111001111101", B"111111000110100001", B"111110110010100101",
                                                        B"000010111111011010", B"111111111010110110", B"111101011100100100", B"111110111000000110", B"111111010110110110", B"000000000011000100", B"000000001111000001", B"000000000000101110", B"111111100001100100", B"111101110001010000", B"111101101000101100",
                                                        B"111110111000111000", B"000000100010001110", B"111111010000111110", B"111111110001001010", B"100100110101010111", B"000000010000101001", B"000000011101001111", B"000000010000000110", B"000000100101111010", B"111110101100101110", B"111111110011101000",
                                                        B"000001001010011010", B"111111101100100100", B"000000000100100010", B"000010011010011101", B"000000110111100110", B"111101011000011101", B"000010101010110011", B"111110111000100101", B"111111110001110001", B"111101110110111111", B"111110011101101001",
                                                        B"000000000000101100", B"111110111010100011", B"111101110101110101", B"111110111010110100", B"000000000001101100", B"000000111101000011", B"000000010100010000", B"000000100001110011", B"111110111110110011", B"000000010111100101", B"111101111000000001",
                                                        B"111110011111001100", B"000000001100001010", B"111111101001010110", B"000000011011011110", B"111101000001111010", B"000000001110010111", B"000000100000111100", B"111110110101101001", B"000000010111101010", B"111111011110001010", B"111101001100101111",
                                                        B"111110011101011100", B"111101001010010000", B"111100111101111011", B"111110111101000001", B"111111001000100111", B"111110101010111110", B"000000100101110001", B"000000001010111000", B"111110010111001110", B"111111111001100100", B"111101101100000011",
                                                        B"111101110111111111", B"111110001010010001", B"000000001111100010", B"111110100011001010", B"000000011000010101", B"111110100011111110", B"000000101000100011", B"111111111110011001", B"000000011110001111", B"111100010100110111", B"000000001110011000",
                                                        B"111101111001000100", B"000000001010100010", B"111111101100001110", B"000000110001111110", B"111100110110001001", B"000000101111100000", B"111111001010010001", B"111111111000000001", B"111100111010010111", B"111110110000010001", B"000000010100101100",
                                                        B"111110110010001101", B"111110011101101111", B"111101010101001100", B"111110011011110000", B"000000110100010111", B"000000101100011010", B"111111001011011101");
  SIGNAL data_int                         : std_logic_vector(DataWidth - 1 DOWNTO 0) := B"111111001011011101";
  SIGNAL addr_unsigned                    : unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width

BEGIN
  addr_unsigned <= unsigned(addr);

  SinglePortRAM_generic_process: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF enb = '1' THEN
        IF we = '1' THEN
          ram(to_integer(addr_unsigned)) <= din;
          data_int <= din;
        ELSE
          data_int <= ram(to_integer(addr_unsigned));
        END IF;
      END IF;
    END IF;
  END PROCESS SinglePortRAM_generic_process;

  dout <= data_int;

END rtl;

