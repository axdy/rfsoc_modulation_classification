-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj_dma/hdlsrc/ltehdlCNN_AMC/amc_cnn_dma_src_bias3_add.vhd
-- Created: 2023-02-01 23:11:47
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: amc_cnn_dma_src_bias3_add
-- Source Path: ltehdlCNN_AMC/DUT HDL/Dense Layer 1/bias3_add
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.amc_cnn_dma_src_DUT_HDL_pkg.ALL;

ENTITY amc_cnn_dma_src_bias3_add IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        sampleIn                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
        validIn                           :   IN    std_logic;
        out_nT                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
        samplesOut                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
        validOut                          :   OUT   std_logic
        );
END amc_cnn_dma_src_bias3_add;


ARCHITECTURE rtl OF amc_cnn_dma_src_bias3_add IS

  -- Constants
  CONSTANT nc                             : vector_of_signed18(0 TO 127) := 
    (to_signed(-16#0490F#, 18), to_signed(-16#00107#, 18), to_signed(-16#00288#, 18), to_signed(-16#08C5F#, 18),
     to_signed(-16#02074#, 18), to_signed(-16#0247E#, 18), to_signed(-16#07591#, 18), to_signed(-16#035A9#, 18),
     to_signed(-16#01520#, 18), to_signed(16#000B5#, 18), to_signed(-16#0027C#, 18), to_signed(16#01685#, 18),
     to_signed(-16#00C3A#, 18), to_signed(16#0250A#, 18), to_signed(16#0399E#, 18), to_signed(-16#002C0#, 18),
     to_signed(-16#03110#, 18), to_signed(16#0A5E8#, 18), to_signed(-16#00EC9#, 18), to_signed(-16#04DD9#, 18),
     to_signed(-16#007C8#, 18), to_signed(-16#00212#, 18), to_signed(-16#019F6#, 18), to_signed(-16#047BB#, 18),
     to_signed(-16#016EA#, 18), to_signed(-16#00701#, 18), to_signed(-16#00DB9#, 18), to_signed(-16#070DD#, 18),
     to_signed(16#03CFD#, 18), to_signed(-16#0CE5F#, 18), to_signed(-16#00239#, 18), to_signed(-16#07CD6#, 18),
     to_signed(-16#007C0#, 18), to_signed(-16#0129A#, 18), to_signed(-16#07BFB#, 18), to_signed(-16#0977A#, 18),
     to_signed(-16#0029B#, 18), to_signed(-16#00D37#, 18), to_signed(16#06189#, 18), to_signed(-16#05034#, 18),
     to_signed(16#0506C#, 18), to_signed(-16#09AEA#, 18), to_signed(-16#0025F#, 18), to_signed(-16#04BF2#, 18),
     to_signed(-16#01E4F#, 18), to_signed(16#04126#, 18), to_signed(16#05F72#, 18), to_signed(-16#002F9#, 18),
     to_signed(-16#00138#, 18), to_signed(-16#00728#, 18), to_signed(-16#07D08#, 18), to_signed(16#094A0#, 18),
     to_signed(-16#00616#, 18), to_signed(-16#0C6DC#, 18), to_signed(16#05588#, 18), to_signed(-16#001D7#, 18),
     to_signed(16#0527E#, 18), to_signed(-16#001AE#, 18), to_signed(-16#0F1FC#, 18), to_signed(-16#0B9A3#, 18),
     to_signed(-16#0D665#, 18), to_signed(-16#00331#, 18), to_signed(16#03281#, 18), to_signed(16#0308D#, 18),
     to_signed(-16#00459#, 18), to_signed(-16#05094#, 18), to_signed(16#008AF#, 18), to_signed(16#11A1D#, 18),
     to_signed(-16#01EE3#, 18), to_signed(16#029B2#, 18), to_signed(16#062D2#, 18), to_signed(-16#0015C#, 18),
     to_signed(16#0470B#, 18), to_signed(-16#001AF#, 18), to_signed(-16#04D15#, 18), to_signed(-16#005EB#, 18),
     to_signed(-16#01F07#, 18), to_signed(-16#01B6E#, 18), to_signed(16#01A04#, 18), to_signed(16#08BA5#, 18),
     to_signed(-16#00379#, 18), to_signed(-16#01CA3#, 18), to_signed(-16#0014D#, 18), to_signed(-16#04900#, 18),
     to_signed(16#03973#, 18), to_signed(16#11E74#, 18), to_signed(-16#0262B#, 18), to_signed(-16#003B3#, 18),
     to_signed(-16#032BB#, 18), to_signed(-16#005A0#, 18), to_signed(-16#0026A#, 18), to_signed(-16#04129#, 18),
     to_signed(-16#01DAB#, 18), to_signed(-16#0030B#, 18), to_signed(16#02C4C#, 18), to_signed(-16#026B3#, 18),
     to_signed(-16#0012A#, 18), to_signed(-16#0432D#, 18), to_signed(16#04DAD#, 18), to_signed(-16#00D1C#, 18),
     to_signed(-16#00470#, 18), to_signed(-16#02FE9#, 18), to_signed(-16#0783D#, 18), to_signed(-16#08A6B#, 18),
     to_signed(16#04590#, 18), to_signed(-16#0995C#, 18), to_signed(16#03D38#, 18), to_signed(-16#03862#, 18),
     to_signed(-16#075D3#, 18), to_signed(-16#09841#, 18), to_signed(-16#0174E#, 18), to_signed(16#00097#, 18),
     to_signed(-16#0256F#, 18), to_signed(-16#03F57#, 18), to_signed(-16#01A3F#, 18), to_signed(-16#021B4#, 18),
     to_signed(16#05658#, 18), to_signed(-16#00D04#, 18), to_signed(16#05738#, 18), to_signed(-16#04D1E#, 18),
     to_signed(-16#0EC3D#, 18), to_signed(-16#0A19F#, 18), to_signed(-16#051A8#, 18), to_signed(-16#0019D#, 18),
     to_signed(16#0440F#, 18), to_signed(16#00B9B#, 18), to_signed(-16#02F26#, 18), to_signed(-16#043AC#, 18));  -- sfix18 [128]

  -- Signals
  SIGNAL sampleIn_signed                  : signed(17 DOWNTO 0);  -- sfix18_En10
  SIGNAL out_nT_signed                    : signed(17 DOWNTO 0);  -- sfix18_En10
  SIGNAL samplesOut_tmp                   : signed(17 DOWNTO 0);  -- sfix18_En10
  SIGNAL reg_flag                         : std_logic;
  SIGNAL reg_count_bias                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL reg_flag_next                    : std_logic;
  SIGNAL reg_count_bias_next              : unsigned(7 DOWNTO 0);  -- ufix8

BEGIN
  sampleIn_signed <= signed(sampleIn);

  out_nT_signed <= signed(out_nT);

  bias3_add_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reg_flag <= '0';
        reg_count_bias <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        reg_flag <= reg_flag_next;
        reg_count_bias <= reg_count_bias_next;
      END IF;
    END IF;
  END PROCESS bias3_add_process;

  bias3_add_output : PROCESS (reg_count_bias, reg_flag, sampleIn_signed, validIn)
    VARIABLE reg_flag_temp : std_logic;
    VARIABLE add_cast : signed(22 DOWNTO 0);
    VARIABLE add_cast_0 : signed(22 DOWNTO 0);
    VARIABLE add_temp : signed(22 DOWNTO 0);
  BEGIN
    add_temp := to_signed(16#000000#, 23);
    add_cast := to_signed(16#000000#, 23);
    add_cast_0 := to_signed(16#000000#, 23);
    reg_flag_temp := reg_flag;
    reg_count_bias_next <= reg_count_bias;
    -- Output samples
    --     samplesOut = fi(0,1,18,10);
    samplesOut_tmp <= to_signed(16#00000#, 18);
    -- Constants
    IF validIn = '1' THEN 
      reg_flag_temp := '1';
    END IF;
    IF reg_flag_temp = '1' THEN 
      validOut <= '1';
      add_cast := resize(sampleIn_signed & '0' & '0' & '0' & '0', 23);
      add_cast_0 := resize(nc(to_integer(reg_count_bias)), 23);
      add_temp := add_cast + add_cast_0;
      IF ((add_temp(22) = '0') AND (add_temp(21) /= '0')) OR ((add_temp(22) = '0') AND (add_temp(21 DOWNTO 4) = "011111111111111111")) THEN 
        samplesOut_tmp <= "011111111111111111";
      ELSIF (add_temp(22) = '1') AND (add_temp(21) /= '1') THEN 
        samplesOut_tmp <= "100000000000000000";
      ELSE 
        samplesOut_tmp <= add_temp(21 DOWNTO 4) + ('0' & add_temp(3));
      END IF;
      IF reg_count_bias = to_unsigned(16#7F#, 8) THEN 
        reg_count_bias_next <= to_unsigned(16#00#, 8);
      ELSE 
        reg_count_bias_next <= reg_count_bias + to_unsigned(16#01#, 8);
      END IF;
      reg_flag_temp := '0';
    ELSE 
      validOut <= '0';
    END IF;
    reg_flag_next <= reg_flag_temp;
  END PROCESS bias3_add_output;


  samplesOut <= std_logic_vector(samplesOut_tmp);

END rtl;

