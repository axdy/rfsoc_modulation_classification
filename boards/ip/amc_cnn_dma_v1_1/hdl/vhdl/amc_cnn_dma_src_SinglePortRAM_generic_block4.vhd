-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj_dma/hdlsrc/ltehdlCNN_AMC/amc_cnn_dma_src_SinglePortRAM_generic_block4.vhd
-- Created: 2023-02-01 23:11:33
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: amc_cnn_dma_src_SinglePortRAM_generic_block4
-- Source Path: ltehdlCNN_AMC/DUT HDL/Dense Layer 2/Dense Layer 2/Weight Storage 3/SinglePortRAM_generic
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY amc_cnn_dma_src_SinglePortRAM_generic_block4 IS
  GENERIC( AddrWidth                      : integer := 1;
           DataWidth                      : integer := 1
           );
  PORT( clk                               :   IN    std_logic;
        enb                               :   IN    std_logic;
        din                               :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
        addr                              :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
        we                                :   IN    std_logic;  -- ufix1
        dout                              :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
        );
END amc_cnn_dma_src_SinglePortRAM_generic_block4;


ARCHITECTURE rtl OF amc_cnn_dma_src_SinglePortRAM_generic_block4 IS

  -- Local Type Definitions
  TYPE ram_type IS ARRAY (2**AddrWidth - 1 DOWNTO 0) of std_logic_vector(DataWidth - 1 DOWNTO 0);

  -- Signals
  SIGNAL ram                              : ram_type := (B"111110011101111011", B"111110101111001011", B"111101100101100010", B"111101110111110011", B"000000001000011011", B"111100100011000111", B"111101111010111100", B"111110110011110101", B"111110110110111111", B"111101100110010110", B"111110010111001001",
                                                        B"000000011100000110", B"111110111110000010", B"000000010000100000", B"000000011110110111", B"000000101011011011", B"000000011000000011", B"000000000110110111", B"000001100101001110", B"111110011011000101", B"000000011100010101", B"111111000110000100",
                                                        B"000010000011111111", B"111101111000000111", B"000000011000000111", B"111111011001101101", B"000000111010101100", B"111010001000001011", B"000000011100110101", B"111111100100001000", B"000000001110100011", B"000000010111001001", B"111110101110111000",
                                                        B"111111001111100000", B"000000001010001110", B"111110001001110101", B"111110110100101101", B"111111110011101100", B"111111010010011110", B"000000001100111100", B"111111010111110110", B"111111011110010010", B"111110000111000010", B"111101100100111001",
                                                        B"111110110011000000", B"111111111011000111", B"111111010100110100", B"111111110010001110", B"111001011010010100", B"111111110011111101", B"000000011111110101", B"000000010011110101", B"000000101010111110", B"111110101011001111", B"111111110011001100",
                                                        B"000001010011010111", B"000000001101110110", B"000000011110000100", B"111110110110011100", B"000000111110101101", B"111101001100000011", B"111111000100100001", B"111110110011000001", B"111111111100111001", B"111101110010101110", B"111110000010101111",
                                                        B"000000001010001001", B"111110100011110100", B"111101101110010100", B"111110100010100110", B"111111111110110111", B"000001001011010011", B"111111011001100100", B"000000100100110000", B"111110110110111000", B"000000011011111001", B"111101110111101010",
                                                        B"111110011011100001", B"000000000010101100", B"111111101011010011", B"111111110000101011", B"111100110011001011", B"000000100000111111", B"000000100011111000", B"111110111000101010", B"000000010011011000", B"000001101111111111", B"111101001101111110",
                                                        B"111110010110000111", B"111101001001111000", B"111110101010100100", B"000000011011110111", B"000001100001100010", B"111110111001000011", B"000000101101001010", B"000000010101011111", B"111110011001001000", B"000000101000111001", B"111101100000001000",
                                                        B"111101101111100110", B"111110001001101011", B"000000011011100011", B"111110100011010001", B"000000011001101110", B"111110101101101111", B"000000101100101010", B"111111001111101010", B"000000100011011111", B"111100100011001100", B"000000011001101010",
                                                        B"111101101000101010", B"111101100100101101", B"000000010100001000", B"000000111110100010", B"111100110101010110", B"000000110010011001", B"111110011110001101", B"111111100011010001", B"111110101001001001", B"111110100011100000", B"000000011100001010",
                                                        B"111110111010110010", B"111110100001100011", B"111101110110010011", B"000000110011010011", B"000000110110111011", B"111111110010011101", B"111110111100111000");
  SIGNAL data_int                         : std_logic_vector(DataWidth - 1 DOWNTO 0) := B"111110111100111000";
  SIGNAL addr_unsigned                    : unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width

BEGIN
  addr_unsigned <= unsigned(addr);

  SinglePortRAM_generic_process: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF enb = '1' THEN
        IF we = '1' THEN
          ram(to_integer(addr_unsigned)) <= din;
          data_int <= din;
        ELSE
          data_int <= ram(to_integer(addr_unsigned));
        END IF;
      END IF;
    END IF;
  END PROCESS SinglePortRAM_generic_process;

  dout <= data_int;

END rtl;

