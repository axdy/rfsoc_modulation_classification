-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj_dma/hdlsrc/ltehdlCNN_AMC/amc_cnn_dma_src_BRAM_Storage_Layer_2_block.vhd
-- Created: 2023-02-01 23:11:35
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: amc_cnn_dma_src_BRAM_Storage_Layer_2_block
-- Source Path: ltehdlCNN_AMC/DUT HDL/Dense Layer 1/BRAM Storage Layer 2
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.amc_cnn_dma_src_DUT_HDL_pkg.ALL;

ENTITY amc_cnn_dma_src_BRAM_Storage_Layer_2_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        vectorIn                          :   IN    vector_of_std_logic_vector18(0 TO 15);  -- sfix18_En14 [16]
        wr_addr                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        wr_en                             :   IN    std_logic;
        rd_addr                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        rd_row_idx                        :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
        validIn                           :   IN    std_logic;
        sampleOut                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En14
        validOut                          :   OUT   std_logic
        );
END amc_cnn_dma_src_BRAM_Storage_Layer_2_block;


ARCHITECTURE rtl OF amc_cnn_dma_src_BRAM_Storage_Layer_2_block IS

  -- Component Declarations
  COMPONENT amc_cnn_dma_src_DualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          rd_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : amc_cnn_dma_src_DualPortRAM_generic
    USE ENTITY work.amc_cnn_dma_src_DualPortRAM_generic(rtl);

  -- Signals
  SIGNAL vectorIn_signed                  : vector_of_std_logic_vector18(0 TO 15);  -- ufix18 [16]
  SIGNAL rd_row_idx_unsigned              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL vvv                              : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Delay1_reg                       : vector_of_unsigned5(0 TO 1);  -- ufix5 [2]
  SIGNAL Delay1_reg_next                  : vector_of_unsigned5(0 TO 1);  -- ufix5 [2]
  SIGNAL fff_rd_row                       : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL RAM_0_out1                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL ram_out                          : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL ram_out_signed                   : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL RAM1_out1                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL fff_rd_row_2                     : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL fff_rd_row_2_signed              : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL RAM2_out1                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM2_out2                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM2_out2_signed                 : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL RAM3_out1                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM3_out2                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM3_out2_signed                 : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL RAM4_out1                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM4_out2                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM4_out2_signed                 : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL RAM5_out1                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM5_out2                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM5_out2_signed                 : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL RAM6_out1                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM6_out2                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM6_out2_signed                 : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL RAM7_out1                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM7_out2                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM7_out2_signed                 : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL RAM8_out1                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM8_out2                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM8_out2_signed                 : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL RAM9_out1                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM9_out2                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM9_out2_signed                 : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL RAM10_out1                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM10_out2                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM10_out2_signed                : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL RAM11_out1                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM11_out2                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM11_out2_signed                : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL RAM12_out1                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM12_out2                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM12_out2_signed                : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL RAM13_out1                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM13_out2                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM13_out2_signed                : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL RAM14_out1                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM14_out2                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM14_out2_signed                : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL RAM15_out1                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM15_out2                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL RAM15_out2_signed                : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL fff_sampleOut                    : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Delay_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay_reg_next                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL fff_valid                        : std_logic;

BEGIN
  u_RAM_0 : amc_cnn_dma_src_DualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 18
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => vectorIn_signed(0),
              wr_addr => wr_addr,
              wr_en => wr_en,
              rd_addr => rd_addr,
              wr_dout => RAM_0_out1,
              rd_dout => ram_out
              );

  u_RAM1 : amc_cnn_dma_src_DualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 18
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => vectorIn_signed(1),
              wr_addr => wr_addr,
              wr_en => wr_en,
              rd_addr => rd_addr,
              wr_dout => RAM1_out1,
              rd_dout => fff_rd_row_2
              );

  u_RAM2 : amc_cnn_dma_src_DualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 18
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => vectorIn_signed(2),
              wr_addr => wr_addr,
              wr_en => wr_en,
              rd_addr => rd_addr,
              wr_dout => RAM2_out1,
              rd_dout => RAM2_out2
              );

  u_RAM3 : amc_cnn_dma_src_DualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 18
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => vectorIn_signed(3),
              wr_addr => wr_addr,
              wr_en => wr_en,
              rd_addr => rd_addr,
              wr_dout => RAM3_out1,
              rd_dout => RAM3_out2
              );

  u_RAM4 : amc_cnn_dma_src_DualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 18
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => vectorIn_signed(4),
              wr_addr => wr_addr,
              wr_en => wr_en,
              rd_addr => rd_addr,
              wr_dout => RAM4_out1,
              rd_dout => RAM4_out2
              );

  u_RAM5 : amc_cnn_dma_src_DualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 18
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(vvv),
              wr_addr => wr_addr,
              wr_en => wr_en,
              rd_addr => rd_addr,
              wr_dout => RAM5_out1,
              rd_dout => RAM5_out2
              );

  u_RAM6 : amc_cnn_dma_src_DualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 18
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => vectorIn_signed(6),
              wr_addr => wr_addr,
              wr_en => wr_en,
              rd_addr => rd_addr,
              wr_dout => RAM6_out1,
              rd_dout => RAM6_out2
              );

  u_RAM7 : amc_cnn_dma_src_DualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 18
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => vectorIn_signed(7),
              wr_addr => wr_addr,
              wr_en => wr_en,
              rd_addr => rd_addr,
              wr_dout => RAM7_out1,
              rd_dout => RAM7_out2
              );

  u_RAM8 : amc_cnn_dma_src_DualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 18
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => vectorIn_signed(8),
              wr_addr => wr_addr,
              wr_en => wr_en,
              rd_addr => rd_addr,
              wr_dout => RAM8_out1,
              rd_dout => RAM8_out2
              );

  u_RAM9 : amc_cnn_dma_src_DualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 18
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => vectorIn_signed(9),
              wr_addr => wr_addr,
              wr_en => wr_en,
              rd_addr => rd_addr,
              wr_dout => RAM9_out1,
              rd_dout => RAM9_out2
              );

  u_RAM10 : amc_cnn_dma_src_DualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 18
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => vectorIn_signed(10),
              wr_addr => wr_addr,
              wr_en => wr_en,
              rd_addr => rd_addr,
              wr_dout => RAM10_out1,
              rd_dout => RAM10_out2
              );

  u_RAM11 : amc_cnn_dma_src_DualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 18
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => vectorIn_signed(11),
              wr_addr => wr_addr,
              wr_en => wr_en,
              rd_addr => rd_addr,
              wr_dout => RAM11_out1,
              rd_dout => RAM11_out2
              );

  u_RAM12 : amc_cnn_dma_src_DualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 18
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => vectorIn_signed(12),
              wr_addr => wr_addr,
              wr_en => wr_en,
              rd_addr => rd_addr,
              wr_dout => RAM12_out1,
              rd_dout => RAM12_out2
              );

  u_RAM13 : amc_cnn_dma_src_DualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 18
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => vectorIn_signed(13),
              wr_addr => wr_addr,
              wr_en => wr_en,
              rd_addr => rd_addr,
              wr_dout => RAM13_out1,
              rd_dout => RAM13_out2
              );

  u_RAM14 : amc_cnn_dma_src_DualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 18
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => vectorIn_signed(14),
              wr_addr => wr_addr,
              wr_en => wr_en,
              rd_addr => rd_addr,
              wr_dout => RAM14_out1,
              rd_dout => RAM14_out2
              );

  u_RAM15 : amc_cnn_dma_src_DualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 18
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => vectorIn_signed(15),
              wr_addr => wr_addr,
              wr_en => wr_en,
              rd_addr => rd_addr,
              wr_dout => RAM15_out1,
              rd_dout => RAM15_out2
              );

  vectorIn_signed <= vectorIn;

  rd_row_idx_unsigned <= unsigned(rd_row_idx);

  vvv <= signed(vectorIn_signed(5));

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_reg(0) <= to_unsigned(16#00#, 5);
        Delay1_reg(1) <= to_unsigned(16#00#, 5);
      ELSIF enb = '1' THEN
        Delay1_reg(0) <= Delay1_reg_next(0);
        Delay1_reg(1) <= Delay1_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  fff_rd_row <= Delay1_reg(1);
  Delay1_reg_next(0) <= rd_row_idx_unsigned;
  Delay1_reg_next(1) <= Delay1_reg(0);

  ram_out_signed <= signed(ram_out);

  fff_rd_row_2_signed <= signed(fff_rd_row_2);

  RAM2_out2_signed <= signed(RAM2_out2);

  RAM3_out2_signed <= signed(RAM3_out2);

  RAM4_out2_signed <= signed(RAM4_out2);

  RAM5_out2_signed <= signed(RAM5_out2);

  RAM6_out2_signed <= signed(RAM6_out2);

  RAM7_out2_signed <= signed(RAM7_out2);

  RAM8_out2_signed <= signed(RAM8_out2);

  RAM9_out2_signed <= signed(RAM9_out2);

  RAM10_out2_signed <= signed(RAM10_out2);

  RAM11_out2_signed <= signed(RAM11_out2);

  RAM12_out2_signed <= signed(RAM12_out2);

  RAM13_out2_signed <= signed(RAM13_out2);

  RAM14_out2_signed <= signed(RAM14_out2);

  RAM15_out2_signed <= signed(RAM15_out2);

  
  fff_sampleOut <= ram_out_signed WHEN fff_rd_row = to_unsigned(16#00#, 5) ELSE
      fff_rd_row_2_signed WHEN fff_rd_row = to_unsigned(16#01#, 5) ELSE
      RAM2_out2_signed WHEN fff_rd_row = to_unsigned(16#02#, 5) ELSE
      RAM3_out2_signed WHEN fff_rd_row = to_unsigned(16#03#, 5) ELSE
      RAM4_out2_signed WHEN fff_rd_row = to_unsigned(16#04#, 5) ELSE
      RAM5_out2_signed WHEN fff_rd_row = to_unsigned(16#05#, 5) ELSE
      RAM6_out2_signed WHEN fff_rd_row = to_unsigned(16#06#, 5) ELSE
      RAM7_out2_signed WHEN fff_rd_row = to_unsigned(16#07#, 5) ELSE
      RAM8_out2_signed WHEN fff_rd_row = to_unsigned(16#08#, 5) ELSE
      RAM9_out2_signed WHEN fff_rd_row = to_unsigned(16#09#, 5) ELSE
      RAM10_out2_signed WHEN fff_rd_row = to_unsigned(16#0A#, 5) ELSE
      RAM11_out2_signed WHEN fff_rd_row = to_unsigned(16#0B#, 5) ELSE
      RAM12_out2_signed WHEN fff_rd_row = to_unsigned(16#0C#, 5) ELSE
      RAM13_out2_signed WHEN fff_rd_row = to_unsigned(16#0D#, 5) ELSE
      RAM14_out2_signed WHEN fff_rd_row = to_unsigned(16#0E#, 5) ELSE
      RAM15_out2_signed;

  sampleOut <= std_logic_vector(fff_sampleOut);

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_reg(0) <= '0';
        Delay_reg(1) <= '0';
      ELSIF enb = '1' THEN
        Delay_reg(0) <= Delay_reg_next(0);
        Delay_reg(1) <= Delay_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay_process;

  fff_valid <= Delay_reg(1);
  Delay_reg_next(0) <= validIn;
  Delay_reg_next(1) <= Delay_reg(0);

  validOut <= fff_valid;

END rtl;

