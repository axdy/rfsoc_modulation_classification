-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj_dma/hdlsrc/ltehdlCNN_AMC/amc_cnn_dma_src_ParallelMACs_15.vhd
-- Created: 2023-02-01 23:11:34
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: amc_cnn_dma_src_ParallelMACs_15
-- Source Path: ltehdlCNN_AMC/DUT HDL/Conv Layer 2/Filter Matrix Multiplier1/ParallelMACs 15
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.amc_cnn_dma_src_DUT_HDL_pkg.ALL;

ENTITY amc_cnn_dma_src_ParallelMACs_15 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        vectorIn                          :   IN    vector_of_std_logic_vector18(0 TO 15);  -- sfix18_En13 [16]
        validIn                           :   IN    std_logic;
        samplesOut                        :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En13
        );
END amc_cnn_dma_src_ParallelMACs_15;


ARCHITECTURE rtl OF amc_cnn_dma_src_ParallelMACs_15 IS

  -- Component Declarations
  COMPONENT amc_cnn_dma_src_Weight_Storage_0_block8
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          count_Weights                   :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          weightsOut                      :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En17
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_Weight_Storage1_block7
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          count_Weights                   :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          weightsOut                      :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En17
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_Weight_Storage2_block7
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          count_Weights                   :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          weightsOut                      :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En17
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_Weight_Storage3_block7
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          count_Weights                   :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          weightsOut                      :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En17
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_Weight_Storage4_block7
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          count_Weights                   :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          weightsOut                      :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En17
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_Weight_Storage5_block7
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          count_Weights                   :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          weightsOut                      :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En17
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_Weight_Storage6_block7
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          count_Weights                   :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          weightsOut                      :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En17
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_Weight_Storage7_block7
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          count_Weights                   :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          weightsOut                      :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En17
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_Weight_Storage8_block7
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          count_Weights                   :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          weightsOut                      :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En17
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_Weight_Storage9_block7
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          count_Weights                   :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          weightsOut                      :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En17
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_Weight_Storage10_block7
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          count_Weights                   :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          weightsOut                      :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En17
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_Weight_Storage11_block7
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          count_Weights                   :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          weightsOut                      :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En17
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_Weight_Storage12_block7
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          count_Weights                   :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          weightsOut                      :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En17
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_Weight_Storage13_block7
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          count_Weights                   :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          weightsOut                      :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En17
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_Weight_Storage14_block7
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          count_Weights                   :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          weightsOut                      :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En17
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_Weight_Storage15_block7
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          count_Weights                   :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          weightsOut                      :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En17
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_MAC0_block6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          countWeights                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          samplesIn                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En13
          validIn                         :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En13
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_MAC1_block6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          countWeights                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          samplesIn                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En13
          validIn                         :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En13
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_MAC2_block6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          countWeights                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          samplesIn                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En13
          validIn                         :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En13
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_MAC3_block6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          countWeights                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          samplesIn                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En13
          validIn                         :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En13
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_MAC4_block6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          countWeights                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          samplesIn                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En13
          validIn                         :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En13
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_MAC5_block6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          countWeights                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          samplesIn                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En13
          validIn                         :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En13
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_MAC6_block6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          countWeights                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          samplesIn                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En13
          validIn                         :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En13
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_MAC7_block6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          countWeights                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          samplesIn                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En13
          validIn                         :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En13
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_MAC8_block6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          countWeights                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          samplesIn                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En13
          validIn                         :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En13
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_MAC9_block6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          countWeights                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          samplesIn                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En13
          validIn                         :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En13
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_MAC10_block6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          countWeights                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          samplesIn                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En13
          validIn                         :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En13
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_MAC11_block6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          countWeights                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          samplesIn                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En13
          validIn                         :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En13
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_MAC12_block6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          countWeights                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          samplesIn                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En13
          validIn                         :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En13
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_MAC13_block6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          countWeights                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          samplesIn                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En13
          validIn                         :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En13
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_MAC14_block6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          countWeights                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          samplesIn                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En13
          validIn                         :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En13
          );
  END COMPONENT;

  COMPONENT amc_cnn_dma_src_MAC15_block6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          countWeights                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          samplesIn                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En13
          validIn                         :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En13
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : amc_cnn_dma_src_Weight_Storage_0_block8
    USE ENTITY work.amc_cnn_dma_src_Weight_Storage_0_block8(rtl);

  FOR ALL : amc_cnn_dma_src_Weight_Storage1_block7
    USE ENTITY work.amc_cnn_dma_src_Weight_Storage1_block7(rtl);

  FOR ALL : amc_cnn_dma_src_Weight_Storage2_block7
    USE ENTITY work.amc_cnn_dma_src_Weight_Storage2_block7(rtl);

  FOR ALL : amc_cnn_dma_src_Weight_Storage3_block7
    USE ENTITY work.amc_cnn_dma_src_Weight_Storage3_block7(rtl);

  FOR ALL : amc_cnn_dma_src_Weight_Storage4_block7
    USE ENTITY work.amc_cnn_dma_src_Weight_Storage4_block7(rtl);

  FOR ALL : amc_cnn_dma_src_Weight_Storage5_block7
    USE ENTITY work.amc_cnn_dma_src_Weight_Storage5_block7(rtl);

  FOR ALL : amc_cnn_dma_src_Weight_Storage6_block7
    USE ENTITY work.amc_cnn_dma_src_Weight_Storage6_block7(rtl);

  FOR ALL : amc_cnn_dma_src_Weight_Storage7_block7
    USE ENTITY work.amc_cnn_dma_src_Weight_Storage7_block7(rtl);

  FOR ALL : amc_cnn_dma_src_Weight_Storage8_block7
    USE ENTITY work.amc_cnn_dma_src_Weight_Storage8_block7(rtl);

  FOR ALL : amc_cnn_dma_src_Weight_Storage9_block7
    USE ENTITY work.amc_cnn_dma_src_Weight_Storage9_block7(rtl);

  FOR ALL : amc_cnn_dma_src_Weight_Storage10_block7
    USE ENTITY work.amc_cnn_dma_src_Weight_Storage10_block7(rtl);

  FOR ALL : amc_cnn_dma_src_Weight_Storage11_block7
    USE ENTITY work.amc_cnn_dma_src_Weight_Storage11_block7(rtl);

  FOR ALL : amc_cnn_dma_src_Weight_Storage12_block7
    USE ENTITY work.amc_cnn_dma_src_Weight_Storage12_block7(rtl);

  FOR ALL : amc_cnn_dma_src_Weight_Storage13_block7
    USE ENTITY work.amc_cnn_dma_src_Weight_Storage13_block7(rtl);

  FOR ALL : amc_cnn_dma_src_Weight_Storage14_block7
    USE ENTITY work.amc_cnn_dma_src_Weight_Storage14_block7(rtl);

  FOR ALL : amc_cnn_dma_src_Weight_Storage15_block7
    USE ENTITY work.amc_cnn_dma_src_Weight_Storage15_block7(rtl);

  FOR ALL : amc_cnn_dma_src_MAC0_block6
    USE ENTITY work.amc_cnn_dma_src_MAC0_block6(rtl);

  FOR ALL : amc_cnn_dma_src_MAC1_block6
    USE ENTITY work.amc_cnn_dma_src_MAC1_block6(rtl);

  FOR ALL : amc_cnn_dma_src_MAC2_block6
    USE ENTITY work.amc_cnn_dma_src_MAC2_block6(rtl);

  FOR ALL : amc_cnn_dma_src_MAC3_block6
    USE ENTITY work.amc_cnn_dma_src_MAC3_block6(rtl);

  FOR ALL : amc_cnn_dma_src_MAC4_block6
    USE ENTITY work.amc_cnn_dma_src_MAC4_block6(rtl);

  FOR ALL : amc_cnn_dma_src_MAC5_block6
    USE ENTITY work.amc_cnn_dma_src_MAC5_block6(rtl);

  FOR ALL : amc_cnn_dma_src_MAC6_block6
    USE ENTITY work.amc_cnn_dma_src_MAC6_block6(rtl);

  FOR ALL : amc_cnn_dma_src_MAC7_block6
    USE ENTITY work.amc_cnn_dma_src_MAC7_block6(rtl);

  FOR ALL : amc_cnn_dma_src_MAC8_block6
    USE ENTITY work.amc_cnn_dma_src_MAC8_block6(rtl);

  FOR ALL : amc_cnn_dma_src_MAC9_block6
    USE ENTITY work.amc_cnn_dma_src_MAC9_block6(rtl);

  FOR ALL : amc_cnn_dma_src_MAC10_block6
    USE ENTITY work.amc_cnn_dma_src_MAC10_block6(rtl);

  FOR ALL : amc_cnn_dma_src_MAC11_block6
    USE ENTITY work.amc_cnn_dma_src_MAC11_block6(rtl);

  FOR ALL : amc_cnn_dma_src_MAC12_block6
    USE ENTITY work.amc_cnn_dma_src_MAC12_block6(rtl);

  FOR ALL : amc_cnn_dma_src_MAC13_block6
    USE ENTITY work.amc_cnn_dma_src_MAC13_block6(rtl);

  FOR ALL : amc_cnn_dma_src_MAC14_block6
    USE ENTITY work.amc_cnn_dma_src_MAC14_block6(rtl);

  FOR ALL : amc_cnn_dma_src_MAC15_block6
    USE ENTITY work.amc_cnn_dma_src_MAC15_block6(rtl);

  -- Signals
  SIGNAL countWeights                     : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL vectorIn_signed                  : vector_of_signed18(0 TO 15);  -- sfix18_En13 [16]
  SIGNAL Delay_out1                       : vector_of_signed18(0 TO 15);  -- sfix18_En13 [16]
  SIGNAL Weight_Storage_0_out1            : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Weight_Storage1_out1             : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Weight_Storage2_out1             : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Weight_Storage3_out1             : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Weight_Storage4_out1             : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Weight_Storage5_out1             : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Weight_Storage6_out1             : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Weight_Storage7_out1             : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Weight_Storage8_out1             : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Weight_Storage9_out1             : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Weight_Storage10_out1            : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Weight_Storage11_out1            : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Weight_Storage12_out1            : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Weight_Storage13_out1            : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Weight_Storage14_out1            : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Weight_Storage15_out1            : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL MAC0_out1                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL MAC0_out1_signed                 : signed(17 DOWNTO 0);  -- sfix18_En13
  SIGNAL MAC1_out1                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL MAC1_out1_signed                 : signed(17 DOWNTO 0);  -- sfix18_En13
  SIGNAL MAC2_out1                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL MAC2_out1_signed                 : signed(17 DOWNTO 0);  -- sfix18_En13
  SIGNAL MAC3_out1                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL MAC3_out1_signed                 : signed(17 DOWNTO 0);  -- sfix18_En13
  SIGNAL MAC4_out1                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL MAC4_out1_signed                 : signed(17 DOWNTO 0);  -- sfix18_En13
  SIGNAL MAC5_out1                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL MAC5_out1_signed                 : signed(17 DOWNTO 0);  -- sfix18_En13
  SIGNAL MAC6_out1                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL MAC6_out1_signed                 : signed(17 DOWNTO 0);  -- sfix18_En13
  SIGNAL MAC7_out1                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL MAC7_out1_signed                 : signed(17 DOWNTO 0);  -- sfix18_En13
  SIGNAL MAC8_out1                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL MAC8_out1_signed                 : signed(17 DOWNTO 0);  -- sfix18_En13
  SIGNAL MAC9_out1                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL MAC9_out1_signed                 : signed(17 DOWNTO 0);  -- sfix18_En13
  SIGNAL MAC10_out1                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL MAC10_out1_signed                : signed(17 DOWNTO 0);  -- sfix18_En13
  SIGNAL MAC11_out1                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL MAC11_out1_signed                : signed(17 DOWNTO 0);  -- sfix18_En13
  SIGNAL MAC12_out1                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL MAC12_out1_signed                : signed(17 DOWNTO 0);  -- sfix18_En13
  SIGNAL MAC13_out1                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL MAC13_out1_signed                : signed(17 DOWNTO 0);  -- sfix18_En13
  SIGNAL MAC14_out1                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL MAC14_out1_signed                : signed(17 DOWNTO 0);  -- sfix18_En13
  SIGNAL MAC15_out1                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL MAC15_out1_signed                : signed(17 DOWNTO 0);  -- sfix18_En13
  SIGNAL Add_add_cast                     : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_cast_1                   : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_temp                     : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_cast_2                   : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_temp_1                   : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_cast_3                   : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_temp_2                   : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_cast_4                   : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_temp_3                   : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_cast_5                   : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_temp_4                   : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_cast_6                   : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_temp_5                   : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_cast_7                   : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_temp_6                   : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_cast_8                   : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_temp_7                   : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_cast_9                   : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_temp_8                   : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_cast_10                  : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_temp_9                   : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_cast_11                  : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_temp_10                  : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_cast_12                  : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_temp_11                  : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_cast_13                  : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_temp_12                  : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_cast_14                  : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_temp_13                  : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_add_cast_15                  : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Add_out1                         : signed(21 DOWNTO 0);  -- sfix22_En13
  SIGNAL Data_Type_Conversion_out1        : signed(17 DOWNTO 0);  -- sfix18_En13

BEGIN
  u_Weight_Storage_0 : amc_cnn_dma_src_Weight_Storage_0_block8
    PORT MAP( clk => clk,
              enb => enb,
              count_Weights => std_logic_vector(countWeights),  -- ufix5
              weightsOut => Weight_Storage_0_out1  -- sfix18_En17
              );

  u_Weight_Storage1 : amc_cnn_dma_src_Weight_Storage1_block7
    PORT MAP( clk => clk,
              enb => enb,
              count_Weights => std_logic_vector(countWeights),  -- ufix5
              weightsOut => Weight_Storage1_out1  -- sfix18_En17
              );

  u_Weight_Storage2 : amc_cnn_dma_src_Weight_Storage2_block7
    PORT MAP( clk => clk,
              enb => enb,
              count_Weights => std_logic_vector(countWeights),  -- ufix5
              weightsOut => Weight_Storage2_out1  -- sfix18_En17
              );

  u_Weight_Storage3 : amc_cnn_dma_src_Weight_Storage3_block7
    PORT MAP( clk => clk,
              enb => enb,
              count_Weights => std_logic_vector(countWeights),  -- ufix5
              weightsOut => Weight_Storage3_out1  -- sfix18_En17
              );

  u_Weight_Storage4 : amc_cnn_dma_src_Weight_Storage4_block7
    PORT MAP( clk => clk,
              enb => enb,
              count_Weights => std_logic_vector(countWeights),  -- ufix5
              weightsOut => Weight_Storage4_out1  -- sfix18_En17
              );

  u_Weight_Storage5 : amc_cnn_dma_src_Weight_Storage5_block7
    PORT MAP( clk => clk,
              enb => enb,
              count_Weights => std_logic_vector(countWeights),  -- ufix5
              weightsOut => Weight_Storage5_out1  -- sfix18_En17
              );

  u_Weight_Storage6 : amc_cnn_dma_src_Weight_Storage6_block7
    PORT MAP( clk => clk,
              enb => enb,
              count_Weights => std_logic_vector(countWeights),  -- ufix5
              weightsOut => Weight_Storage6_out1  -- sfix18_En17
              );

  u_Weight_Storage7 : amc_cnn_dma_src_Weight_Storage7_block7
    PORT MAP( clk => clk,
              enb => enb,
              count_Weights => std_logic_vector(countWeights),  -- ufix5
              weightsOut => Weight_Storage7_out1  -- sfix18_En17
              );

  u_Weight_Storage8 : amc_cnn_dma_src_Weight_Storage8_block7
    PORT MAP( clk => clk,
              enb => enb,
              count_Weights => std_logic_vector(countWeights),  -- ufix5
              weightsOut => Weight_Storage8_out1  -- sfix18_En17
              );

  u_Weight_Storage9 : amc_cnn_dma_src_Weight_Storage9_block7
    PORT MAP( clk => clk,
              enb => enb,
              count_Weights => std_logic_vector(countWeights),  -- ufix5
              weightsOut => Weight_Storage9_out1  -- sfix18_En17
              );

  u_Weight_Storage10 : amc_cnn_dma_src_Weight_Storage10_block7
    PORT MAP( clk => clk,
              enb => enb,
              count_Weights => std_logic_vector(countWeights),  -- ufix5
              weightsOut => Weight_Storage10_out1  -- sfix18_En17
              );

  u_Weight_Storage11 : amc_cnn_dma_src_Weight_Storage11_block7
    PORT MAP( clk => clk,
              enb => enb,
              count_Weights => std_logic_vector(countWeights),  -- ufix5
              weightsOut => Weight_Storage11_out1  -- sfix18_En17
              );

  u_Weight_Storage12 : amc_cnn_dma_src_Weight_Storage12_block7
    PORT MAP( clk => clk,
              enb => enb,
              count_Weights => std_logic_vector(countWeights),  -- ufix5
              weightsOut => Weight_Storage12_out1  -- sfix18_En17
              );

  u_Weight_Storage13 : amc_cnn_dma_src_Weight_Storage13_block7
    PORT MAP( clk => clk,
              enb => enb,
              count_Weights => std_logic_vector(countWeights),  -- ufix5
              weightsOut => Weight_Storage13_out1  -- sfix18_En17
              );

  u_Weight_Storage14 : amc_cnn_dma_src_Weight_Storage14_block7
    PORT MAP( clk => clk,
              enb => enb,
              count_Weights => std_logic_vector(countWeights),  -- ufix5
              weightsOut => Weight_Storage14_out1  -- sfix18_En17
              );

  u_Weight_Storage15 : amc_cnn_dma_src_Weight_Storage15_block7
    PORT MAP( clk => clk,
              enb => enb,
              count_Weights => std_logic_vector(countWeights),  -- ufix5
              weightsOut => Weight_Storage15_out1  -- sfix18_En17
              );

  u_MAC0 : amc_cnn_dma_src_MAC0_block6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              countWeights => Weight_Storage_0_out1,  -- sfix18_En17
              samplesIn => std_logic_vector(Delay_out1(0)),  -- sfix18_En13
              validIn => Delay1_out1,
              dataOut => MAC0_out1  -- sfix18_En13
              );

  u_MAC1 : amc_cnn_dma_src_MAC1_block6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              countWeights => Weight_Storage1_out1,  -- sfix18_En17
              samplesIn => std_logic_vector(Delay_out1(1)),  -- sfix18_En13
              validIn => Delay1_out1,
              dataOut => MAC1_out1  -- sfix18_En13
              );

  u_MAC2 : amc_cnn_dma_src_MAC2_block6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              countWeights => Weight_Storage2_out1,  -- sfix18_En17
              samplesIn => std_logic_vector(Delay_out1(2)),  -- sfix18_En13
              validIn => Delay1_out1,
              dataOut => MAC2_out1  -- sfix18_En13
              );

  u_MAC3 : amc_cnn_dma_src_MAC3_block6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              countWeights => Weight_Storage3_out1,  -- sfix18_En17
              samplesIn => std_logic_vector(Delay_out1(3)),  -- sfix18_En13
              validIn => Delay1_out1,
              dataOut => MAC3_out1  -- sfix18_En13
              );

  u_MAC4 : amc_cnn_dma_src_MAC4_block6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              countWeights => Weight_Storage4_out1,  -- sfix18_En17
              samplesIn => std_logic_vector(Delay_out1(4)),  -- sfix18_En13
              validIn => Delay1_out1,
              dataOut => MAC4_out1  -- sfix18_En13
              );

  u_MAC5 : amc_cnn_dma_src_MAC5_block6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              countWeights => Weight_Storage5_out1,  -- sfix18_En17
              samplesIn => std_logic_vector(Delay_out1(5)),  -- sfix18_En13
              validIn => Delay1_out1,
              dataOut => MAC5_out1  -- sfix18_En13
              );

  u_MAC6 : amc_cnn_dma_src_MAC6_block6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              countWeights => Weight_Storage6_out1,  -- sfix18_En17
              samplesIn => std_logic_vector(Delay_out1(6)),  -- sfix18_En13
              validIn => Delay1_out1,
              dataOut => MAC6_out1  -- sfix18_En13
              );

  u_MAC7 : amc_cnn_dma_src_MAC7_block6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              countWeights => Weight_Storage7_out1,  -- sfix18_En17
              samplesIn => std_logic_vector(Delay_out1(7)),  -- sfix18_En13
              validIn => Delay1_out1,
              dataOut => MAC7_out1  -- sfix18_En13
              );

  u_MAC8 : amc_cnn_dma_src_MAC8_block6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              countWeights => Weight_Storage8_out1,  -- sfix18_En17
              samplesIn => std_logic_vector(Delay_out1(8)),  -- sfix18_En13
              validIn => Delay1_out1,
              dataOut => MAC8_out1  -- sfix18_En13
              );

  u_MAC9 : amc_cnn_dma_src_MAC9_block6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              countWeights => Weight_Storage9_out1,  -- sfix18_En17
              samplesIn => std_logic_vector(Delay_out1(9)),  -- sfix18_En13
              validIn => Delay1_out1,
              dataOut => MAC9_out1  -- sfix18_En13
              );

  u_MAC10 : amc_cnn_dma_src_MAC10_block6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              countWeights => Weight_Storage10_out1,  -- sfix18_En17
              samplesIn => std_logic_vector(Delay_out1(10)),  -- sfix18_En13
              validIn => Delay1_out1,
              dataOut => MAC10_out1  -- sfix18_En13
              );

  u_MAC11 : amc_cnn_dma_src_MAC11_block6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              countWeights => Weight_Storage11_out1,  -- sfix18_En17
              samplesIn => std_logic_vector(Delay_out1(11)),  -- sfix18_En13
              validIn => Delay1_out1,
              dataOut => MAC11_out1  -- sfix18_En13
              );

  u_MAC12 : amc_cnn_dma_src_MAC12_block6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              countWeights => Weight_Storage12_out1,  -- sfix18_En17
              samplesIn => std_logic_vector(Delay_out1(12)),  -- sfix18_En13
              validIn => Delay1_out1,
              dataOut => MAC12_out1  -- sfix18_En13
              );

  u_MAC13 : amc_cnn_dma_src_MAC13_block6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              countWeights => Weight_Storage13_out1,  -- sfix18_En17
              samplesIn => std_logic_vector(Delay_out1(13)),  -- sfix18_En13
              validIn => Delay1_out1,
              dataOut => MAC13_out1  -- sfix18_En13
              );

  u_MAC14 : amc_cnn_dma_src_MAC14_block6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              countWeights => Weight_Storage14_out1,  -- sfix18_En17
              samplesIn => std_logic_vector(Delay_out1(14)),  -- sfix18_En13
              validIn => Delay1_out1,
              dataOut => MAC14_out1  -- sfix18_En13
              );

  u_MAC15 : amc_cnn_dma_src_MAC15_block6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              countWeights => Weight_Storage15_out1,  -- sfix18_En17
              samplesIn => std_logic_vector(Delay_out1(15)),  -- sfix18_En13
              validIn => Delay1_out1,
              dataOut => MAC15_out1  -- sfix18_En13
              );

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 23
  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        countWeights <= to_unsigned(16#00#, 5);
      ELSIF enb = '1' THEN
        IF validIn = '1' THEN 
          IF countWeights >= to_unsigned(16#17#, 5) THEN 
            countWeights <= to_unsigned(16#00#, 5);
          ELSE 
            countWeights <= countWeights + to_unsigned(16#01#, 5);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  outputgen: FOR k IN 0 TO 15 GENERATE
    vectorIn_signed(k) <= signed(vectorIn(k));
  END GENERATE;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1(0) <= to_signed(16#00000#, 18);
        Delay_out1(1) <= to_signed(16#00000#, 18);
        Delay_out1(2) <= to_signed(16#00000#, 18);
        Delay_out1(3) <= to_signed(16#00000#, 18);
        Delay_out1(4) <= to_signed(16#00000#, 18);
        Delay_out1(5) <= to_signed(16#00000#, 18);
        Delay_out1(6) <= to_signed(16#00000#, 18);
        Delay_out1(7) <= to_signed(16#00000#, 18);
        Delay_out1(8) <= to_signed(16#00000#, 18);
        Delay_out1(9) <= to_signed(16#00000#, 18);
        Delay_out1(10) <= to_signed(16#00000#, 18);
        Delay_out1(11) <= to_signed(16#00000#, 18);
        Delay_out1(12) <= to_signed(16#00000#, 18);
        Delay_out1(13) <= to_signed(16#00000#, 18);
        Delay_out1(14) <= to_signed(16#00000#, 18);
        Delay_out1(15) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay_out1(0) <= vectorIn_signed(0);
        Delay_out1(1) <= vectorIn_signed(1);
        Delay_out1(2) <= vectorIn_signed(2);
        Delay_out1(3) <= vectorIn_signed(3);
        Delay_out1(4) <= vectorIn_signed(4);
        Delay_out1(5) <= vectorIn_signed(5);
        Delay_out1(6) <= vectorIn_signed(6);
        Delay_out1(7) <= vectorIn_signed(7);
        Delay_out1(8) <= vectorIn_signed(8);
        Delay_out1(9) <= vectorIn_signed(9);
        Delay_out1(10) <= vectorIn_signed(10);
        Delay_out1(11) <= vectorIn_signed(11);
        Delay_out1(12) <= vectorIn_signed(12);
        Delay_out1(13) <= vectorIn_signed(13);
        Delay_out1(14) <= vectorIn_signed(14);
        Delay_out1(15) <= vectorIn_signed(15);
      END IF;
    END IF;
  END PROCESS Delay_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1 <= validIn;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  MAC0_out1_signed <= signed(MAC0_out1);

  MAC1_out1_signed <= signed(MAC1_out1);

  MAC2_out1_signed <= signed(MAC2_out1);

  MAC3_out1_signed <= signed(MAC3_out1);

  MAC4_out1_signed <= signed(MAC4_out1);

  MAC5_out1_signed <= signed(MAC5_out1);

  MAC6_out1_signed <= signed(MAC6_out1);

  MAC7_out1_signed <= signed(MAC7_out1);

  MAC8_out1_signed <= signed(MAC8_out1);

  MAC9_out1_signed <= signed(MAC9_out1);

  MAC10_out1_signed <= signed(MAC10_out1);

  MAC11_out1_signed <= signed(MAC11_out1);

  MAC12_out1_signed <= signed(MAC12_out1);

  MAC13_out1_signed <= signed(MAC13_out1);

  MAC14_out1_signed <= signed(MAC14_out1);

  MAC15_out1_signed <= signed(MAC15_out1);

  Add_add_cast <= resize(MAC0_out1_signed, 22);
  Add_add_cast_1 <= resize(MAC1_out1_signed, 22);
  Add_add_temp <= Add_add_cast + Add_add_cast_1;
  Add_add_cast_2 <= resize(MAC2_out1_signed, 22);
  Add_add_temp_1 <= Add_add_temp + Add_add_cast_2;
  Add_add_cast_3 <= resize(MAC3_out1_signed, 22);
  Add_add_temp_2 <= Add_add_temp_1 + Add_add_cast_3;
  Add_add_cast_4 <= resize(MAC4_out1_signed, 22);
  Add_add_temp_3 <= Add_add_temp_2 + Add_add_cast_4;
  Add_add_cast_5 <= resize(MAC5_out1_signed, 22);
  Add_add_temp_4 <= Add_add_temp_3 + Add_add_cast_5;
  Add_add_cast_6 <= resize(MAC6_out1_signed, 22);
  Add_add_temp_5 <= Add_add_temp_4 + Add_add_cast_6;
  Add_add_cast_7 <= resize(MAC7_out1_signed, 22);
  Add_add_temp_6 <= Add_add_temp_5 + Add_add_cast_7;
  Add_add_cast_8 <= resize(MAC8_out1_signed, 22);
  Add_add_temp_7 <= Add_add_temp_6 + Add_add_cast_8;
  Add_add_cast_9 <= resize(MAC9_out1_signed, 22);
  Add_add_temp_8 <= Add_add_temp_7 + Add_add_cast_9;
  Add_add_cast_10 <= resize(MAC10_out1_signed, 22);
  Add_add_temp_9 <= Add_add_temp_8 + Add_add_cast_10;
  Add_add_cast_11 <= resize(MAC11_out1_signed, 22);
  Add_add_temp_10 <= Add_add_temp_9 + Add_add_cast_11;
  Add_add_cast_12 <= resize(MAC12_out1_signed, 22);
  Add_add_temp_11 <= Add_add_temp_10 + Add_add_cast_12;
  Add_add_cast_13 <= resize(MAC13_out1_signed, 22);
  Add_add_temp_12 <= Add_add_temp_11 + Add_add_cast_13;
  Add_add_cast_14 <= resize(MAC14_out1_signed, 22);
  Add_add_temp_13 <= Add_add_temp_12 + Add_add_cast_14;
  Add_add_cast_15 <= resize(MAC15_out1_signed, 22);
  Add_out1 <= Add_add_temp_13 + Add_add_cast_15;

  Data_Type_Conversion_out1 <= Add_out1(17 DOWNTO 0);

  samplesOut <= std_logic_vector(Data_Type_Conversion_out1);

END rtl;

