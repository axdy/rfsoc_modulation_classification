-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj_dma/hdlsrc/ltehdlCNN_AMC/amc_cnn_dma_src_SinglePortRAM_generic_block7.vhd
-- Created: 2023-02-01 23:11:33
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: amc_cnn_dma_src_SinglePortRAM_generic_block7
-- Source Path: ltehdlCNN_AMC/DUT HDL/Dense Layer 2/Dense Layer 2/Weight Storage 6/SinglePortRAM_generic
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY amc_cnn_dma_src_SinglePortRAM_generic_block7 IS
  GENERIC( AddrWidth                      : integer := 1;
           DataWidth                      : integer := 1
           );
  PORT( clk                               :   IN    std_logic;
        enb                               :   IN    std_logic;
        din                               :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
        addr                              :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
        we                                :   IN    std_logic;  -- ufix1
        dout                              :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
        );
END amc_cnn_dma_src_SinglePortRAM_generic_block7;


ARCHITECTURE rtl OF amc_cnn_dma_src_SinglePortRAM_generic_block7 IS

  -- Local Type Definitions
  TYPE ram_type IS ARRAY (2**AddrWidth - 1 DOWNTO 0) of std_logic_vector(DataWidth - 1 DOWNTO 0);

  -- Signals
  SIGNAL ram                              : ram_type := (B"111100111101011001", B"000000110010101111", B"111101111110100001", B"000000010011000000", B"000000001000001010", B"111111011010000001", B"000010110100100010", B"000000000001111010", B"000000100010101110", B"111111000011000010", B"111111111000101111",
                                                        B"111110000101101010", B"111111101111100000", B"111111100001100001", B"111001100000001001", B"110111101101000001", B"111011111111001111", B"111001010110101110", B"110010001110101100", B"000000000010101111", B"111111010110101110", B"000000101000110110",
                                                        B"110110110001100101", B"000000111110001010", B"111011100101011001", B"111111011101000011", B"111000010101101100", B"111101010110010010", B"111011010110011001", B"111111101100110111", B"110101111100000000", B"111111110011111000", B"000000010010001011",
                                                        B"111111101010010000", B"111111110010101110", B"111110110010010010", B"111111111110111000", B"111111110110110001", B"111111111011101000", B"111011100111110111", B"111111110001011100", B"000001011010011110", B"000101010101001010", B"000000101011001111",
                                                        B"000000100101011000", B"111111010111000100", B"000010000000001100", B"111111101010101001", B"000011010000100001", B"111011101011010100", B"111010110110001100", B"111001100111000010", B"000000010100000010", B"000000000001000000", B"000000010001001100",
                                                        B"110111110100100101", B"111111011110101001", B"000110011000101001", B"111111100100100011", B"111001100000101010", B"000001001000010000", B"111110101001111110", B"000000111010111000", B"111111111011000011", B"000001010110100101", B"111011000101001010",
                                                        B"111001010011010001", B"111111110100001001", B"000011000001001001", B"000000000010001010", B"000000110110111011", B"111010001000001101", B"000000011111100001", B"111000001010101010", B"000011000101011010", B"111001111011110110", B"111111111010110110",
                                                        B"111110110111011110", B"111111110010001111", B"111111001100011111", B"111111111110100000", B"111101110000000111", B"000110111101000111", B"111010001101011100", B"000000100000100000", B"111111100000011010", B"110100110000010011", B"111110101100000100",
                                                        B"000000001010111111", B"111111011101111110", B"111111111010010111", B"000000001101110000", B"111001011100000111", B"111111100101110001", B"111011100110111100", B"111001110100100110", B"111111110111110010", B"000000000010000111", B"000010101010101111",
                                                        B"000000010110101111", B"000001010000001001", B"111100100001101010", B"111111110101101111", B"111011001111000001", B"111110110100010011", B"111011000111000100", B"000000010100101001", B"111011000010101000", B"000001001010010011", B"111000111100001100",
                                                        B"111110001110101111", B"111111011100000101", B"000000100000100001", B"111001111001100000", B"111110000011100001", B"000010001110101010", B"000010000001001101", B"111111110110000101", B"111111001001110101", B"111100001001011011", B"110110100011011011",
                                                        B"000000100100010000", B"000100011111110100", B"000100011110010010", B"110111110011100011", B"111011110111111110", B"000000001011101011", B"000000000010111100");
  SIGNAL data_int                         : std_logic_vector(DataWidth - 1 DOWNTO 0) := B"000000000010111100";
  SIGNAL addr_unsigned                    : unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width

BEGIN
  addr_unsigned <= unsigned(addr);

  SinglePortRAM_generic_process: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF enb = '1' THEN
        IF we = '1' THEN
          ram(to_integer(addr_unsigned)) <= din;
          data_int <= din;
        ELSE
          data_int <= ram(to_integer(addr_unsigned));
        END IF;
      END IF;
    END IF;
  END PROCESS SinglePortRAM_generic_process;

  dout <= data_int;

END rtl;

