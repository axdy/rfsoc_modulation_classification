-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj_dma/hdlsrc/ltehdlCNN_AMC/amc_cnn_dma_src_SinglePortRAM_generic_block2.vhd
-- Created: 2023-02-01 23:11:33
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: amc_cnn_dma_src_SinglePortRAM_generic_block2
-- Source Path: ltehdlCNN_AMC/DUT HDL/Dense Layer 2/Dense Layer 2/Weight Storage 1/SinglePortRAM_generic
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY amc_cnn_dma_src_SinglePortRAM_generic_block2 IS
  GENERIC( AddrWidth                      : integer := 1;
           DataWidth                      : integer := 1
           );
  PORT( clk                               :   IN    std_logic;
        enb                               :   IN    std_logic;
        din                               :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
        addr                              :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
        we                                :   IN    std_logic;  -- ufix1
        dout                              :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
        );
END amc_cnn_dma_src_SinglePortRAM_generic_block2;


ARCHITECTURE rtl OF amc_cnn_dma_src_SinglePortRAM_generic_block2 IS

  -- Local Type Definitions
  TYPE ram_type IS ARRAY (2**AddrWidth - 1 DOWNTO 0) of std_logic_vector(DataWidth - 1 DOWNTO 0);

  -- Signals
  SIGNAL ram                              : ram_type := (B"000011011100001111", B"000000110111010000", B"000001110010111101", B"000000101000010001", B"000001000001011111", B"000000010010010101", B"111111100011111100", B"000001011011111001", B"000001101001011001", B"000010000101111101", B"111101001011011101",
                                                        B"111001110001100101", B"000001111011111001", B"111111010110110000", B"111101111000000010", B"111110100100111011", B"111110011011010010", B"111110011100011010", B"111110001111101101", B"000000010100001001", B"111100111100011100", B"111110000110101100",
                                                        B"111110111010110100", B"000000011011001111", B"111100110001111111", B"111100110101101100", B"111110110010000101", B"111011110100010101", B"111110101100110110", B"000001001001110001", B"111101000010001000", B"111111011011110100", B"000001011010001011",
                                                        B"111110001001001101", B"000000010111011110", B"111110010110001001", B"000000100110000100", B"000000001111001110", B"111110111110110100", B"111101000011001010", B"111111100000011100", B"000001010001101000", B"000011101000100000", B"000000001001100100",
                                                        B"111101011000100111", B"000000101011011101", B"111101100101001000", B"111111100110101000", B"111110010001001001", B"111011111000001000", B"111101111010101100", B"111101111110001100", B"000000001101010000", B"000001011110100110", B"000000110000100010",
                                                        B"111101100101101000", B"000000000100111001", B"111011010100101111", B"111101001110010110", B"111110010111100010", B"000010010101110011", B"111111011101100001", B"111110010101000000", B"000000011000001001", B"000001100111011110", B"000000000011001011",
                                                        B"111110010000011001", B"000001100010101100", B"000000000010011001", B"000001011011110000", B"111111111011111110", B"111101100001010010", B"111111110001101000", B"111100111010110010", B"000010001011100111", B"111110001010101101", B"000001111010000110",
                                                        B"000010000101100100", B"111111100011111101", B"000000000011111010", B"111111111011010001", B"000001001010100110", B"111100000101111010", B"111110001100000000", B"111111010000100010", B"000000110000000100", B"111101110110011101", B"000001111001101111",
                                                        B"000001011101101000", B"000001000101111111", B"000000010010001011", B"000000011101000110", B"111110000000100001", B"111111010100000000", B"111110001111101111", B"111110101100010001", B"111110011101101101", B"000000011110001110", B"111111011010101110",
                                                        B"000000111010111001", B"111110111101101000", B"111101111100001001", B"000000101000101000", B"111110100010010100", B"000011110011001101", B"111110101101010110", B"000000001110011110", B"111111000000111001", B"000000011111010001", B"111110010001111011",
                                                        B"000001010100001010", B"111011001001111100", B"111111110010010001", B"111100111111010110", B"000001011010010100", B"111100101011101100", B"111100100001011010", B"000000000011011010", B"111101001000010001", B"000001011111100100", B"111110010000110101",
                                                        B"111111111001101100", B"111111010010110111", B"000010101111010011", B"111101111111110110", B"111110110111011111", B"000000100111010001", B"111101111100011000");
  SIGNAL data_int                         : std_logic_vector(DataWidth - 1 DOWNTO 0) := B"111101111100011000";
  SIGNAL addr_unsigned                    : unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width

BEGIN
  addr_unsigned <= unsigned(addr);

  SinglePortRAM_generic_process: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF enb = '1' THEN
        IF we = '1' THEN
          ram(to_integer(addr_unsigned)) <= din;
          data_int <= din;
        ELSE
          data_int <= ram(to_integer(addr_unsigned));
        END IF;
      END IF;
    END IF;
  END PROCESS SinglePortRAM_generic_process;

  dout <= data_int;

END rtl;

