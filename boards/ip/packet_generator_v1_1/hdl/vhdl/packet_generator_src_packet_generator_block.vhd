-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/packet_generator/packet_generator_src_packet_generator_block.vhd
-- Created: 2023-01-11 17:03:48
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: packet_generator_src_packet_generator_block
-- Source Path: packet_generator/Packet Generator/packet_generator
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY packet_generator_src_packet_generator_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        validIn                           :   IN    std_logic;
        capture                           :   IN    std_logic;
        captureSize                       :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        validOut                          :   OUT   std_logic;
        addr                              :   OUT   std_logic_vector(14 DOWNTO 0);  -- ufix15
        wrEn                              :   OUT   std_logic;
        tlast                             :   OUT   std_logic;
        s                                 :   OUT   std_logic_vector(2 DOWNTO 0)  -- ufix3
        );
END packet_generator_src_packet_generator_block;


ARCHITECTURE rtl OF packet_generator_src_packet_generator_block IS

  -- Signals
  SIGNAL captureSize_unsigned             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL addr_tmp                         : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL s_tmp                            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL count                            : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL state                            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL count_next                       : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL state_next                       : unsigned(2 DOWNTO 0);  -- ufix3

BEGIN
  captureSize_unsigned <= unsigned(captureSize);

  packet_generator_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count <= to_unsigned(16#0000#, 15);
      state <= to_unsigned(16#0#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count <= count_next;
        state <= state_next;
      END IF;
    END IF;
  END PROCESS packet_generator_process;

  packet_generator_output : PROCESS (capture, captureSize_unsigned, count, state, validIn)
    VARIABLE sub_cast : signed(16 DOWNTO 0);
    VARIABLE sub_temp : signed(16 DOWNTO 0);
    VARIABLE cast : unsigned(15 DOWNTO 0);
    VARIABLE sub_cast_0 : signed(16 DOWNTO 0);
    VARIABLE sub_temp_0 : signed(16 DOWNTO 0);
    VARIABLE cast_0 : unsigned(15 DOWNTO 0);
  BEGIN
    sub_temp := to_signed(16#00000#, 17);
    sub_temp_0 := to_signed(16#00000#, 17);
    sub_cast := to_signed(16#00000#, 17);
    cast := to_unsigned(16#0000#, 16);
    sub_cast_0 := to_signed(16#00000#, 17);
    cast_0 := to_unsigned(16#0000#, 16);
    count_next <= count;
    state_next <= state;
    -- maximum size of capture
    -- States
    -- Begin logic
    validOut <= '0';
    tlast <= '0';
    wrEn <= '0';
    addr_tmp <= to_unsigned(16#0000#, 15);
    CASE state IS
      WHEN "000" =>
        IF capture = '1' THEN 
          wrEn <= '1';
          state_next <= to_unsigned(16#1#, 3);
          addr_tmp <= count;
          count_next <= count + to_unsigned(16#0001#, 15);
        END IF;
      WHEN "001" =>
        IF validIn = '1' THEN 
          wrEn <= '1';
          sub_cast_0 := signed(resize(captureSize_unsigned, 17));
          sub_temp_0 := sub_cast_0 - to_signed(16#00001#, 17);
          IF sub_temp_0(16) = '1' THEN 
            cast_0 := X"0000";
          ELSE 
            cast_0 := unsigned(sub_temp_0(15 DOWNTO 0));
          END IF;
          IF resize(count, 16) = cast_0 THEN 
            state_next <= to_unsigned(16#2#, 3);
            addr_tmp <= count;
            count_next <= to_unsigned(16#0000#, 15);
          ELSE 
            addr_tmp <= count;
            count_next <= count + to_unsigned(16#0001#, 15);
          END IF;
        END IF;
      WHEN "010" =>
        sub_cast := signed(resize(captureSize_unsigned, 17));
        sub_temp := sub_cast - to_signed(16#00001#, 17);
        IF sub_temp(16) = '1' THEN 
          cast := X"0000";
        ELSE 
          cast := unsigned(sub_temp(15 DOWNTO 0));
        END IF;
        IF resize(count, 16) = cast THEN 
          state_next <= to_unsigned(16#3#, 3);
          addr_tmp <= count;
          validOut <= '1';
          tlast <= '1';
          count_next <= to_unsigned(16#0000#, 15);
        ELSE 
          addr_tmp <= count;
          validOut <= '1';
          count_next <= count + to_unsigned(16#0001#, 15);
        END IF;
      WHEN "011" =>
        IF ( NOT capture) = '1' THEN 
          state_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN OTHERS => 
        NULL;
    END CASE;
    s_tmp <= state;
  END PROCESS packet_generator_output;


  addr <= std_logic_vector(addr_tmp);

  s <= std_logic_vector(s_tmp);

END rtl;

