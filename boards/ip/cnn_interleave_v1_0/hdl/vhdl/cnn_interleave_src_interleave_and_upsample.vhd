-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj_dma/hdlsrc/ltehdlCNN_AMC/cnn_interleave_src_interleave_and_upsample.vhd
-- Created: 2023-02-01 23:49:41
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 3.25521e-08
-- Target subsystem base rate: 3.25521e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        3.25521e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- interleavedOut                ce_out        3.25521e-08
-- validOut                      ce_out        3.25521e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: cnn_interleave_src_interleave_and_upsample
-- Source Path: ltehdlCNN_AMC/interleave and upsample
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY cnn_interleave_src_interleave_and_upsample IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        dataIn                            :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        validIn                           :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        interleavedOut                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
        validOut                          :   OUT   std_logic
        );
END cnn_interleave_src_interleave_and_upsample;


ARCHITECTURE rtl OF cnn_interleave_src_interleave_and_upsample IS

  -- Component Declarations
  COMPONENT cnn_interleave_src_Interleave_IQ
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Real_rsvd                       :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          Imag                            :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          validIn                         :   IN    std_logic;
          interleavedOut                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : cnn_interleave_src_Interleave_IQ
    USE ENTITY work.cnn_interleave_src_Interleave_IQ(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL dataIn_unsigned                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bit_Slice_Real_out1              : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Data_Type_Conversion2_out1       : signed(15 DOWNTO 0);  -- int16
  SIGNAL Bit_Slice_Imag_out1              : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Data_Type_Conversion3_out1       : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay3_out1                      : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay1_out1                      : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Interleave_IQ_out1               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL validIn_1                        : std_logic;
  SIGNAL Interleave_IQ_out1_signed        : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay4_out1                      : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay5_out1                      : std_logic;

BEGIN
  u_Interleave_IQ : cnn_interleave_src_Interleave_IQ
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Real_rsvd => std_logic_vector(Delay3_out1),  -- int16
              Imag => std_logic_vector(Delay1_out1),  -- int16
              validIn => Delay2_out1,
              interleavedOut => Interleave_IQ_out1,  -- int16
              validOut => validIn_1
              );

  dataIn_unsigned <= unsigned(dataIn);

  Bit_Slice_Real_out1 <= dataIn_unsigned(15 DOWNTO 0);

  Data_Type_Conversion2_out1 <= signed(Bit_Slice_Real_out1);

  enb <= clk_enable;

  Bit_Slice_Imag_out1 <= dataIn_unsigned(31 DOWNTO 16);

  Data_Type_Conversion3_out1 <= signed(Bit_Slice_Imag_out1);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay3_out1 <= Data_Type_Conversion2_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay1_out1 <= Data_Type_Conversion3_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay2_out1 <= validIn;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Interleave_IQ_out1_signed <= signed(Interleave_IQ_out1);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay4_out1 <= Interleave_IQ_out1_signed;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  interleavedOut <= std_logic_vector(Delay4_out1);

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay5_out1 <= validIn_1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  validOut <= Delay5_out1;

  ce_out <= clk_enable;

END rtl;

